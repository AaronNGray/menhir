File "ocaml.mly", line 529, characters 29-36:
Warning: the token COMMENT is unused.
File "ocaml.mly", line 530, characters 30-39:
Warning: the token DOCSTRING is unused.
File "ocaml.mly", line 532, characters 7-10:
Warning: the token EOL is unused.
File "ocaml.mly", line 448, characters 7-22:
Warning: the token GREATERRBRACKET is unused.
Grammar has 211 nonterminal symbols, among which 7 start symbols.
Grammar has 121 terminal symbols.
Grammar has 769 productions.
nullable(with_type_binder) = false
nullable(with_constraints) = false
nullable(with_constraint) = false
nullable(virtual_flag) = true
nullable(value_type) = false
nullable(value_description) = false
nullable(value) = false
nullable(val_longident) = false
nullable(val_ident) = false
nullable(use_file_tail) = false
nullable(use_file_body) = false
nullable(use_file) = false
nullable(typevar_list) = false
nullable(type_variance) = true
nullable(type_variable) = false
nullable(type_parameters) = true
nullable(type_parameter_list) = false
nullable(type_parameter) = false
nullable(type_longident) = false
nullable(type_kind) = true
nullable(type_declarations) = false
nullable(type_declaration) = false
nullable(type_constraint) = false
nullable(toplevel_phrase) = false
nullable(toplevel_directive) = false
nullable(top_structure_tail) = true
nullable(top_structure) = true
nullable(tag_field) = false
nullable(subtractive) = false
nullable(structure_tail) = true
nullable(structure_item) = false
nullable(structure) = true
nullable(strict_binding) = false
nullable(str_type_extension) = false
nullable(str_include_statement) = false
nullable(str_extension_constructors) = false
nullable(str_exception_declaration) = false
nullable(single_attr_id) = false
nullable(simple_pattern_not_ident) = false
nullable(simple_pattern) = false
nullable(simple_labeled_expr_list) = false
nullable(simple_expr) = false
nullable(simple_core_type_or_tuple) = false
nullable(simple_core_type2) = false
nullable(simple_core_type) = false
nullable(signed_constant) = false
nullable(signature_item) = false
nullable(signature) = true
nullable(sig_type_extension) = false
nullable(sig_include_statement) = false
nullable(sig_extension_constructors) = false
nullable(sig_exception_declaration) = false
nullable(seq_expr) = false
nullable(row_field_list) = false
nullable(row_field) = false
nullable(record_expr) = false
nullable(rec_module_declarations) = false
nullable(rec_module_declaration) = false
nullable(rec_module_bindings) = false
nullable(rec_module_binding) = false
nullable(rec_flag) = true
nullable(private_virtual_flags) = true
nullable(private_flag) = true
nullable(primitive_declaration_body) = false
nullable(primitive_declaration) = false
nullable(post_item_attributes) = true
nullable(post_item_attribute) = false
nullable(poly_type_no_attr) = false
nullable(poly_type) = false
nullable(payload) = true
nullable(pattern_var) = false
nullable(pattern_semi_list) = false
nullable(pattern_comma_list) = false
nullable(pattern) = false
nullable(parse_pattern) = false
nullable(parse_expression) = false
nullable(parse_core_type) = false
nullable(parent_binder) = true
nullable(package_type_cstrs) = false
nullable(package_type_cstr) = false
nullable(package_type) = false
nullable(override_flag) = true
nullable(optional_type_variable) = false
nullable(optional_type_parameters) = true
nullable(optional_type_parameter_list) = false
nullable(optional_type_parameter) = false
nullable(opt_type_constraint) = true
nullable(opt_semi) = true
nullable(opt_pattern_type_constraint) = true
nullable(opt_default) = true
nullable(opt_bar) = true
nullable(opt_assign_arrow) = true
nullable(opt_ampersand) = true
nullable(operator) = false
nullable(open_statement) = false
nullable(nonrec_flag) = true
nullable(name_tag_list) = false
nullable(name_tag) = false
nullable(mutable_flag) = true
nullable(mty_longident) = false
nullable(module_type_declaration_body) = true
nullable(module_type_declaration) = false
nullable(module_type) = false
nullable(module_expr) = false
nullable(module_declaration_body) = false
nullable(module_declaration) = false
nullable(module_binding_body) = false
nullable(module_binding) = false
nullable(module_alias) = false
nullable(mod_longident) = false
nullable(mod_ext_longident) = false
nullable(method_) = false
nullable(meth_list) = false
nullable(match_cases) = false
nullable(match_case) = false
nullable(lident_list) = false
nullable(let_pattern) = false
nullable(let_bindings) = false
nullable(let_binding_body) = false
nullable(let_binding) = false
nullable(lbl_pattern_list) = false
nullable(lbl_pattern) = false
nullable(lbl_expr_list) = false
nullable(lbl_expr) = false
nullable(labeled_simple_pattern) = false
nullable(labeled_simple_expr) = false
nullable(label_var) = false
nullable(label_longident) = false
nullable(label_let_pattern) = false
nullable(label_ident) = false
nullable(label_expr) = false
nullable(label_declarations) = false
nullable(label_declaration_semi) = false
nullable(label_declaration) = false
nullable(label) = false
nullable(item_extension) = false
nullable(interface) = false
nullable(index_operator_core) = false
nullable(index_operator) = false
nullable(implementation) = false
nullable(ident) = false
nullable(generalized_constructor_arguments) = true
nullable(functor_args) = false
nullable(functor_arg_name) = false
nullable(functor_arg) = false
nullable(fun_def) = false
nullable(fun_binding) = false
nullable(floating_attribute) = false
nullable(field_expr_list) = false
nullable(field_expr) = false
nullable(field) = false
nullable(extension_constructor_rebind) = false
nullable(extension_constructor_declaration) = false
nullable(extension) = false
nullable(ext_attributes) = true
nullable(expr_semi_list) = false
nullable(expr_comma_list) = false
nullable(expr) = false
nullable(direction_flag) = false
nullable(core_type_no_attr) = false
nullable(core_type_list) = false
nullable(core_type_comma_list) = false
nullable(core_type2) = false
nullable(core_type) = false
nullable(constructor_declarations) = false
nullable(constructor_declaration) = false
nullable(constructor_arguments) = false
nullable(constraints) = true
nullable(constrain_field) = false
nullable(constrain) = false
nullable(constr_longident) = false
nullable(constr_ident) = false
nullable(constant) = false
nullable(clty_longident) = false
nullable(class_type_parameters) = true
nullable(class_type_declarations) = false
nullable(class_type_declaration) = false
nullable(class_type) = false
nullable(class_structure) = true
nullable(class_simple_expr) = false
nullable(class_signature) = false
nullable(class_sig_fields) = true
nullable(class_sig_field) = false
nullable(class_sig_body) = true
nullable(class_self_type) = true
nullable(class_self_pattern) = true
nullable(class_longident) = false
nullable(class_fun_def) = false
nullable(class_fun_binding) = false
nullable(class_fields) = true
nullable(class_field) = false
nullable(class_expr) = false
nullable(class_descriptions) = false
nullable(class_description) = false
nullable(class_declarations) = false
nullable(class_declaration) = false
nullable(bar_extension_constructor_rebind) = false
nullable(bar_extension_constructor_declaration) = false
nullable(bar_constructor_declaration) = false
nullable(attributes) = true
nullable(attribute) = false
nullable(attr_id) = false
nullable(and_type_declaration) = false
nullable(and_module_declaration) = false
nullable(and_module_binding) = false
nullable(and_let_binding) = false
nullable(and_class_type_declaration) = false
nullable(and_class_description) = false
nullable(and_class_declaration) = false
nullable(amper_type_list) = false
nullable(additive) = false
first(with_type_binder) = EQUAL
first(with_constraints) = TYPE MODULE
first(with_constraint) = TYPE MODULE
first(virtual_flag) = VIRTUAL
first(value_type) = VIRTUAL MUTABLE LIDENT
first(value_description) = VAL
first(value) = VIRTUAL MUTABLE LIDENT BANG
first(val_longident) = UIDENT LPAREN LIDENT
first(val_ident) = LPAREN LIDENT
first(use_file_tail) = VAL TYPE SHARP SEMISEMI OPEN MODULE LET LBRACKETPERCENTPERCENT LBRACKETATATAT INCLUDE EXTERNAL EXCEPTION EOF CLASS
first(use_file_body) = WHILE VAL UIDENT TYPE TRY TRUE STRING SHARP SEMISEMI PREFIXOP PLUSDOT PLUS OPEN OBJECT NEW NATIVEINT MODULE MINUSDOT MINUS MATCH LPAREN LIDENT LET LBRACKETPERCENTPERCENT LBRACKETPERCENT LBRACKETBAR LBRACKETATATAT LBRACKET LBRACELESS LBRACE LAZY INT64 INT32 INT INCLUDE IF FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EOF CLASS CHAR BEGIN BANG BACKQUOTE ASSERT
first(use_file) = WHILE VAL UIDENT TYPE TRY TRUE STRING SHARP SEMISEMI PREFIXOP PLUSDOT PLUS OPEN OBJECT NEW NATIVEINT MODULE MINUSDOT MINUS MATCH LPAREN LIDENT LET LBRACKETPERCENTPERCENT LBRACKETPERCENT LBRACKETBAR LBRACKETATATAT LBRACKET LBRACELESS LBRACE LAZY INT64 INT32 INT INCLUDE IF FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EOF CLASS CHAR BEGIN BANG BACKQUOTE ASSERT
first(typevar_list) = QUOTE
first(type_variance) = PLUS MINUS
first(type_variable) = QUOTE
first(type_parameters) = QUOTE PLUS MINUS LPAREN
first(type_parameter_list) = QUOTE PLUS MINUS
first(type_parameter) = QUOTE PLUS MINUS
first(type_longident) = UIDENT LIDENT
first(type_kind) = EQUAL
first(type_declarations) = TYPE
first(type_declaration) = TYPE
first(type_constraint) = COLONGREATER COLON
first(toplevel_phrase) = WHILE VAL UIDENT TYPE TRY TRUE STRING SHARP SEMISEMI PREFIXOP PLUSDOT PLUS OPEN OBJECT NEW NATIVEINT MODULE MINUSDOT MINUS MATCH LPAREN LIDENT LET LBRACKETPERCENTPERCENT LBRACKETPERCENT LBRACKETBAR LBRACKETATATAT LBRACKET LBRACELESS LBRACE LAZY INT64 INT32 INT INCLUDE IF FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EOF CLASS CHAR BEGIN BANG BACKQUOTE ASSERT
first(toplevel_directive) = SHARP
first(top_structure_tail) = VAL TYPE OPEN MODULE LET LBRACKETPERCENTPERCENT LBRACKETATATAT INCLUDE EXTERNAL EXCEPTION CLASS
first(top_structure) = WHILE VAL UIDENT TYPE TRY TRUE STRING PREFIXOP PLUSDOT PLUS OPEN OBJECT NEW NATIVEINT MODULE MINUSDOT MINUS MATCH LPAREN LIDENT LET LBRACKETPERCENTPERCENT LBRACKETPERCENT LBRACKETBAR LBRACKETATATAT LBRACKET LBRACELESS LBRACE LAZY INT64 INT32 INT INCLUDE IF FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION CLASS CHAR BEGIN BANG BACKQUOTE ASSERT
first(tag_field) = BACKQUOTE
first(subtractive) = MINUSDOT MINUS
first(structure_tail) = VAL TYPE SEMISEMI OPEN MODULE LET LBRACKETPERCENTPERCENT LBRACKETATATAT INCLUDE EXTERNAL EXCEPTION CLASS
first(structure_item) = VAL TYPE OPEN MODULE LET LBRACKETPERCENTPERCENT LBRACKETATATAT INCLUDE EXTERNAL EXCEPTION CLASS
first(structure) = WHILE VAL UIDENT TYPE TRY TRUE STRING SEMISEMI PREFIXOP PLUSDOT PLUS OPEN OBJECT NEW NATIVEINT MODULE MINUSDOT MINUS MATCH LPAREN LIDENT LET LBRACKETPERCENTPERCENT LBRACKETPERCENT LBRACKETBAR LBRACKETATATAT LBRACKET LBRACELESS LBRACE LAZY INT64 INT32 INT INCLUDE IF FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION CLASS CHAR BEGIN BANG BACKQUOTE ASSERT
first(strict_binding) = UNDERSCORE UIDENT TRUE TILDE STRING SHARP QUESTION PLUS OPTLABEL NATIVEINT MINUS LPAREN LIDENT LBRACKETPERCENT LBRACKETBAR LBRACKET LBRACE LABEL INT64 INT32 INT FLOAT FALSE EQUAL CHAR BACKQUOTE
first(str_type_extension) = TYPE
first(str_include_statement) = INCLUDE
first(str_extension_constructors) = UIDENT TRUE LPAREN FALSE COLONCOLON BAR
first(str_exception_declaration) = EXCEPTION
first(single_attr_id) = WITH WHILE WHEN VIRTUAL VAL UIDENT TYPE TRY TRUE TO THEN STRUCT SIG REC PRIVATE OR OPEN OF OBJECT NONREC NEW MUTABLE MODULE METHOD MATCH LIDENT LET LAZY INITIALIZER INHERIT INCLUDE IN IF FUNCTOR FUNCTION FUN FOR FALSE EXTERNAL EXCEPTION END ELSE DOWNTO DONE DO CONSTRAINT CLASS BEGIN ASSERT AS AND
first(simple_pattern_not_ident) = UNDERSCORE UIDENT TRUE STRING SHARP PLUS NATIVEINT MINUS LPAREN LBRACKETPERCENT LBRACKETBAR LBRACKET LBRACE INT64 INT32 INT FLOAT FALSE CHAR BACKQUOTE
first(simple_pattern) = UNDERSCORE UIDENT TRUE STRING SHARP PLUS NATIVEINT MINUS LPAREN LIDENT LBRACKETPERCENT LBRACKETBAR LBRACKET LBRACE INT64 INT32 INT FLOAT FALSE CHAR BACKQUOTE
first(simple_labeled_expr_list) = UIDENT TRUE TILDE STRING QUESTION PREFIXOP OPTLABEL NEW NATIVEINT LPAREN LIDENT LBRACKETPERCENT LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT FLOAT FALSE CHAR BEGIN BANG BACKQUOTE
first(simple_expr) = UIDENT TRUE STRING PREFIXOP NEW NATIVEINT LPAREN LIDENT LBRACKETPERCENT LBRACKETBAR LBRACKET LBRACELESS LBRACE INT64 INT32 INT FLOAT FALSE CHAR BEGIN BANG BACKQUOTE
first(simple_core_type_or_tuple) = UNDERSCORE UIDENT SHARP QUOTE LPAREN LIDENT LESS LBRACKETPERCENT LBRACKETLESS LBRACKETGREATER LBRACKET
first(simple_core_type2) = UNDERSCORE UIDENT SHARP QUOTE LPAREN LIDENT LESS LBRACKETPERCENT LBRACKETLESS LBRACKETGREATER LBRACKET
first(simple_core_type) = UNDERSCORE UIDENT SHARP QUOTE LPAREN LIDENT LESS LBRACKETPERCENT LBRACKETLESS LBRACKETGREATER LBRACKET
first(signed_constant) = STRING PLUS NATIVEINT MINUS INT64 INT32 INT FLOAT CHAR
first(signature_item) = VAL TYPE OPEN MODULE LBRACKETPERCENTPERCENT LBRACKETATATAT INCLUDE EXTERNAL EXCEPTION CLASS
first(signature) = VAL TYPE SEMISEMI OPEN MODULE LBRACKETPERCENTPERCENT LBRACKETATATAT INCLUDE EXTERNAL EXCEPTION CLASS
first(sig_type_extension) = TYPE
first(sig_include_statement) = INCLUDE
first(sig_extension_constructors) = UIDENT TRUE LPAREN FALSE COLONCOLON BAR
first(sig_exception_declaration) = EXCEPTION
first(seq_expr) = WHILE UIDENT TRY TRUE STRING PREFIXOP PLUSDOT PLUS OBJECT NEW NATIVEINT MINUSDOT MINUS MATCH LPAREN LIDENT LET LBRACKETPERCENT LBRACKETBAR LBRACKET LBRACELESS LBRACE LAZY INT64 INT32 INT IF FUNCTION FUN FOR FLOAT FALSE CHAR BEGIN BANG BACKQUOTE ASSERT
first(row_field_list) = UNDERSCORE UIDENT SHARP QUOTE LPAREN LIDENT LESS LBRACKETPERCENT LBRACKETLESS LBRACKETGREATER LBRACKET BACKQUOTE
first(row_field) = UNDERSCORE UIDENT SHARP QUOTE LPAREN LIDENT LESS LBRACKETPERCENT LBRACKETLESS LBRACKETGREATER LBRACKET BACKQUOTE
first(record_expr) = UIDENT TRUE STRING PREFIXOP NEW NATIVEINT LPAREN LIDENT LBRACKETPERCENT LBRACKETBAR LBRACKET LBRACELESS LBRACE INT64 INT32 INT FLOAT FALSE CHAR BEGIN BANG BACKQUOTE
first(rec_module_declarations) = MODULE
first(rec_module_declaration) = MODULE
first(rec_module_bindings) = MODULE
first(rec_module_binding) = MODULE
first(rec_flag) = REC
first(private_virtual_flags) = VIRTUAL PRIVATE
first(private_flag) = PRIVATE
first(primitive_declaration_body) = STRING
first(primitive_declaration) = EXTERNAL
first(post_item_attributes) = LBRACKETATAT
first(post_item_attribute) = LBRACKETATAT
first(poly_type_no_attr) = UNDERSCORE UIDENT SHARP QUOTE QUESTION OPTLABEL LPAREN LIDENT LESS LBRACKETPERCENT LBRACKETLESS LBRACKETGREATER LBRACKET
first(poly_type) = UNDERSCORE UIDENT SHARP QUOTE QUESTION OPTLABEL LPAREN LIDENT LESS LBRACKETPERCENT LBRACKETLESS LBRACKETGREATER LBRACKET
first(payload) = WHILE VAL UIDENT TYPE TRY TRUE STRING SEMISEMI QUESTION PREFIXOP PLUSDOT PLUS OPEN OBJECT NEW NATIVEINT MODULE MINUSDOT MINUS MATCH LPAREN LIDENT LET LBRACKETPERCENTPERCENT LBRACKETPERCENT LBRACKETBAR LBRACKETATATAT LBRACKET LBRACELESS LBRACE LAZY INT64 INT32 INT INCLUDE IF FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION COLON CLASS CHAR BEGIN BANG BACKQUOTE ASSERT
first(pattern_var) = UNDERSCORE LIDENT
first(pattern_semi_list) = UNDERSCORE UIDENT TRUE STRING SHARP PLUS NATIVEINT MINUS LPAREN LIDENT LBRACKETPERCENT LBRACKETBAR LBRACKET LBRACE LAZY INT64 INT32 INT FLOAT FALSE EXCEPTION CHAR BACKQUOTE
first(pattern_comma_list) = UNDERSCORE UIDENT TRUE STRING SHARP PLUS NATIVEINT MINUS LPAREN LIDENT LBRACKETPERCENT LBRACKETBAR LBRACKET LBRACE LAZY INT64 INT32 INT FLOAT FALSE EXCEPTION CHAR BACKQUOTE
first(pattern) = UNDERSCORE UIDENT TRUE STRING SHARP PLUS NATIVEINT MINUS LPAREN LIDENT LBRACKETPERCENT LBRACKETBAR LBRACKET LBRACE LAZY INT64 INT32 INT FLOAT FALSE EXCEPTION CHAR BACKQUOTE
first(parse_pattern) = UNDERSCORE UIDENT TRUE STRING SHARP PLUS NATIVEINT MINUS LPAREN LIDENT LBRACKETPERCENT LBRACKETBAR LBRACKET LBRACE LAZY INT64 INT32 INT FLOAT FALSE EXCEPTION CHAR BACKQUOTE
first(parse_expression) = WHILE UIDENT TRY TRUE STRING PREFIXOP PLUSDOT PLUS OBJECT NEW NATIVEINT MINUSDOT MINUS MATCH LPAREN LIDENT LET LBRACKETPERCENT LBRACKETBAR LBRACKET LBRACELESS LBRACE LAZY INT64 INT32 INT IF FUNCTION FUN FOR FLOAT FALSE CHAR BEGIN BANG BACKQUOTE ASSERT
first(parse_core_type) = UNDERSCORE UIDENT SHARP QUOTE QUESTION OPTLABEL LPAREN LIDENT LESS LBRACKETPERCENT LBRACKETLESS LBRACKETGREATER LBRACKET
first(parent_binder) = AS
first(package_type_cstrs) = TYPE
first(package_type_cstr) = TYPE
first(package_type) = UIDENT LIDENT
first(override_flag) = BANG
first(optional_type_variable) = UNDERSCORE QUOTE
first(optional_type_parameters) = UNDERSCORE QUOTE PLUS MINUS LPAREN
first(optional_type_parameter_list) = UNDERSCORE QUOTE PLUS MINUS
first(optional_type_parameter) = UNDERSCORE QUOTE PLUS MINUS
first(opt_type_constraint) = COLONGREATER COLON
first(opt_semi) = SEMI
first(opt_pattern_type_constraint) = COLON
first(opt_default) = EQUAL
first(opt_bar) = BAR
first(opt_assign_arrow) = LESSMINUS
first(opt_ampersand) = AMPERSAND
first(operator) = STAR SHARPOP PREFIXOP PLUSEQ PLUSDOT PLUS PERCENT OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL DOT COLONEQUAL BARBAR BANG AMPERSAND AMPERAMPER
first(open_statement) = OPEN
first(nonrec_flag) = NONREC
first(name_tag_list) = BACKQUOTE
first(name_tag) = BACKQUOTE
first(mutable_flag) = MUTABLE
first(mty_longident) = UIDENT LIDENT
first(module_type_declaration_body) = EQUAL
first(module_type_declaration) = MODULE
first(module_type) = UIDENT SIG MODULE LPAREN LIDENT LBRACKETPERCENT FUNCTOR
first(module_expr) = UIDENT STRUCT LPAREN LBRACKETPERCENT FUNCTOR
first(module_declaration_body) = LPAREN COLON
first(module_declaration) = MODULE
first(module_binding_body) = LPAREN EQUAL COLON
first(module_binding) = MODULE
first(module_alias) = MODULE
first(mod_longident) = UIDENT
first(mod_ext_longident) = UIDENT
first(method_) = VIRTUAL PRIVATE LIDENT BANG
first(meth_list) = LIDENT DOTDOT
first(match_cases) = UNDERSCORE UIDENT TRUE STRING SHARP PLUS NATIVEINT MINUS LPAREN LIDENT LBRACKETPERCENT LBRACKETBAR LBRACKET LBRACE LAZY INT64 INT32 INT FLOAT FALSE EXCEPTION CHAR BACKQUOTE
first(match_case) = UNDERSCORE UIDENT TRUE STRING SHARP PLUS NATIVEINT MINUS LPAREN LIDENT LBRACKETPERCENT LBRACKETBAR LBRACKET LBRACE LAZY INT64 INT32 INT FLOAT FALSE EXCEPTION CHAR BACKQUOTE
first(lident_list) = LIDENT
first(let_pattern) = UNDERSCORE UIDENT TRUE STRING SHARP PLUS NATIVEINT MINUS LPAREN LIDENT LBRACKETPERCENT LBRACKETBAR LBRACKET LBRACE LAZY INT64 INT32 INT FLOAT FALSE EXCEPTION CHAR BACKQUOTE
first(let_bindings) = LET
first(let_binding_body) = UNDERSCORE UIDENT TRUE STRING SHARP PLUS NATIVEINT MINUS LPAREN LIDENT LBRACKETPERCENT LBRACKETBAR LBRACKET LBRACE LAZY INT64 INT32 INT FLOAT FALSE EXCEPTION CHAR BACKQUOTE
first(let_binding) = LET
first(lbl_pattern_list) = UIDENT LIDENT
first(lbl_pattern) = UIDENT LIDENT
first(lbl_expr_list) = UIDENT LIDENT
first(lbl_expr) = UIDENT LIDENT
first(labeled_simple_pattern) = UNDERSCORE UIDENT TRUE TILDE STRING SHARP QUESTION PLUS OPTLABEL NATIVEINT MINUS LPAREN LIDENT LBRACKETPERCENT LBRACKETBAR LBRACKET LBRACE LABEL INT64 INT32 INT FLOAT FALSE CHAR BACKQUOTE
first(labeled_simple_expr) = UIDENT TRUE TILDE STRING QUESTION PREFIXOP OPTLABEL NEW NATIVEINT LPAREN LIDENT LBRACKETPERCENT LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT FLOAT FALSE CHAR BEGIN BANG BACKQUOTE
first(label_var) = LIDENT
first(label_longident) = UIDENT LIDENT
first(label_let_pattern) = LIDENT
first(label_ident) = LIDENT
first(label_expr) = TILDE QUESTION OPTLABEL LABEL
first(label_declarations) = MUTABLE LIDENT
first(label_declaration_semi) = MUTABLE LIDENT
first(label_declaration) = MUTABLE LIDENT
first(label) = LIDENT
first(item_extension) = LBRACKETPERCENTPERCENT
first(interface) = VAL TYPE SEMISEMI OPEN MODULE LBRACKETPERCENTPERCENT LBRACKETATATAT INCLUDE EXTERNAL EXCEPTION EOF CLASS
first(index_operator_core) = LPAREN LBRACKET LBRACE
first(index_operator) = DOT
first(implementation) = WHILE VAL UIDENT TYPE TRY TRUE STRING SEMISEMI PREFIXOP PLUSDOT PLUS OPEN OBJECT NEW NATIVEINT MODULE MINUSDOT MINUS MATCH LPAREN LIDENT LET LBRACKETPERCENTPERCENT LBRACKETPERCENT LBRACKETBAR LBRACKETATATAT LBRACKET LBRACELESS LBRACE LAZY INT64 INT32 INT INCLUDE IF FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EOF CLASS CHAR BEGIN BANG BACKQUOTE ASSERT
first(ident) = UIDENT LIDENT
first(generalized_constructor_arguments) = OF COLON
first(functor_args) = LPAREN
first(functor_arg_name) = UNDERSCORE UIDENT
first(functor_arg) = LPAREN
first(fun_def) = UNDERSCORE UIDENT TRUE TILDE STRING SHARP QUESTION PLUS OPTLABEL NATIVEINT MINUSGREATER MINUS LPAREN LIDENT LBRACKETPERCENT LBRACKETBAR LBRACKET LBRACE LABEL INT64 INT32 INT FLOAT FALSE COLON CHAR BACKQUOTE
first(fun_binding) = UNDERSCORE UIDENT TRUE TILDE STRING SHARP QUESTION PLUS OPTLABEL NATIVEINT MINUS LPAREN LIDENT LBRACKETPERCENT LBRACKETBAR LBRACKET LBRACE LABEL INT64 INT32 INT FLOAT FALSE EQUAL COLONGREATER COLON CHAR BACKQUOTE
first(floating_attribute) = LBRACKETATATAT
first(field_expr_list) = LIDENT
first(field_expr) = LIDENT
first(field) = LIDENT
first(extension_constructor_rebind) = UIDENT TRUE LPAREN FALSE COLONCOLON
first(extension_constructor_declaration) = UIDENT TRUE LPAREN FALSE COLONCOLON
first(extension) = LBRACKETPERCENT
first(ext_attributes) = PERCENT LBRACKETAT
first(expr_semi_list) = WHILE UIDENT TRY TRUE STRING PREFIXOP PLUSDOT PLUS OBJECT NEW NATIVEINT MINUSDOT MINUS MATCH LPAREN LIDENT LET LBRACKETPERCENT LBRACKETBAR LBRACKET LBRACELESS LBRACE LAZY INT64 INT32 INT IF FUNCTION FUN FOR FLOAT FALSE CHAR BEGIN BANG BACKQUOTE ASSERT
first(expr_comma_list) = WHILE UIDENT TRY TRUE STRING PREFIXOP PLUSDOT PLUS OBJECT NEW NATIVEINT MINUSDOT MINUS MATCH LPAREN LIDENT LET LBRACKETPERCENT LBRACKETBAR LBRACKET LBRACELESS LBRACE LAZY INT64 INT32 INT IF FUNCTION FUN FOR FLOAT FALSE CHAR BEGIN BANG BACKQUOTE ASSERT
first(expr) = WHILE UIDENT TRY TRUE STRING PREFIXOP PLUSDOT PLUS OBJECT NEW NATIVEINT MINUSDOT MINUS MATCH LPAREN LIDENT LET LBRACKETPERCENT LBRACKETBAR LBRACKET LBRACELESS LBRACE LAZY INT64 INT32 INT IF FUNCTION FUN FOR FLOAT FALSE CHAR BEGIN BANG BACKQUOTE ASSERT
first(direction_flag) = TO DOWNTO
first(core_type_no_attr) = UNDERSCORE UIDENT SHARP QUOTE QUESTION OPTLABEL LPAREN LIDENT LESS LBRACKETPERCENT LBRACKETLESS LBRACKETGREATER LBRACKET
first(core_type_list) = UNDERSCORE UIDENT SHARP QUOTE LPAREN LIDENT LESS LBRACKETPERCENT LBRACKETLESS LBRACKETGREATER LBRACKET
first(core_type_comma_list) = UNDERSCORE UIDENT SHARP QUOTE QUESTION OPTLABEL LPAREN LIDENT LESS LBRACKETPERCENT LBRACKETLESS LBRACKETGREATER LBRACKET
first(core_type2) = UNDERSCORE UIDENT SHARP QUOTE QUESTION OPTLABEL LPAREN LIDENT LESS LBRACKETPERCENT LBRACKETLESS LBRACKETGREATER LBRACKET
first(core_type) = UNDERSCORE UIDENT SHARP QUOTE QUESTION OPTLABEL LPAREN LIDENT LESS LBRACKETPERCENT LBRACKETLESS LBRACKETGREATER LBRACKET
first(constructor_declarations) = UIDENT TRUE LPAREN FALSE COLONCOLON BAR
first(constructor_declaration) = UIDENT TRUE LPAREN FALSE COLONCOLON
first(constructor_arguments) = UNDERSCORE UIDENT SHARP QUOTE LPAREN LIDENT LESS LBRACKETPERCENT LBRACKETLESS LBRACKETGREATER LBRACKET LBRACE
first(constraints) = CONSTRAINT
first(constrain_field) = UNDERSCORE UIDENT SHARP QUOTE QUESTION OPTLABEL LPAREN LIDENT LESS LBRACKETPERCENT LBRACKETLESS LBRACKETGREATER LBRACKET
first(constrain) = UNDERSCORE UIDENT SHARP QUOTE QUESTION OPTLABEL LPAREN LIDENT LESS LBRACKETPERCENT LBRACKETLESS LBRACKETGREATER LBRACKET
first(constr_longident) = UIDENT TRUE LPAREN LBRACKET FALSE
first(constr_ident) = UIDENT TRUE LPAREN FALSE COLONCOLON
first(constant) = STRING NATIVEINT INT64 INT32 INT FLOAT CHAR
first(clty_longident) = UIDENT LIDENT
first(class_type_parameters) = LBRACKET
first(class_type_declarations) = CLASS
first(class_type_declaration) = CLASS
first(class_type) = UNDERSCORE UIDENT SHARP QUOTE QUESTION OPTLABEL OBJECT LPAREN LIDENT LESS LBRACKETPERCENT LBRACKETLESS LBRACKETGREATER LBRACKET
first(class_structure) = VAL METHOD LPAREN LBRACKETPERCENTPERCENT LBRACKETATATAT INITIALIZER INHERIT CONSTRAINT
first(class_simple_expr) = UIDENT OBJECT LPAREN LIDENT LBRACKET
first(class_signature) = UIDENT OBJECT LIDENT LBRACKETPERCENT LBRACKET
first(class_sig_fields) = VAL METHOD LBRACKETPERCENTPERCENT LBRACKETATATAT INHERIT CONSTRAINT
first(class_sig_field) = VAL METHOD LBRACKETPERCENTPERCENT LBRACKETATATAT INHERIT CONSTRAINT
first(class_sig_body) = VAL METHOD LPAREN LBRACKETPERCENTPERCENT LBRACKETATATAT INHERIT CONSTRAINT
first(class_self_type) = LPAREN
first(class_self_pattern) = LPAREN
first(class_longident) = UIDENT LIDENT
first(class_fun_def) = UNDERSCORE UIDENT TRUE TILDE STRING SHARP QUESTION PLUS OPTLABEL NATIVEINT MINUS LPAREN LIDENT LBRACKETPERCENT LBRACKETBAR LBRACKET LBRACE LABEL INT64 INT32 INT FLOAT FALSE CHAR BACKQUOTE
first(class_fun_binding) = UNDERSCORE UIDENT TRUE TILDE STRING SHARP QUESTION PLUS OPTLABEL NATIVEINT MINUS LPAREN LIDENT LBRACKETPERCENT LBRACKETBAR LBRACKET LBRACE LABEL INT64 INT32 INT FLOAT FALSE EQUAL COLON CHAR BACKQUOTE
first(class_fields) = VAL METHOD LBRACKETPERCENTPERCENT LBRACKETATATAT INITIALIZER INHERIT CONSTRAINT
first(class_field) = VAL METHOD LBRACKETPERCENTPERCENT LBRACKETATATAT INITIALIZER INHERIT CONSTRAINT
first(class_expr) = UIDENT OBJECT LPAREN LIDENT LET LBRACKETPERCENT LBRACKET FUN
first(class_descriptions) = CLASS
first(class_description) = CLASS
first(class_declarations) = CLASS
first(class_declaration) = CLASS
first(bar_extension_constructor_rebind) = BAR
first(bar_extension_constructor_declaration) = BAR
first(bar_constructor_declaration) = BAR
first(attributes) = LBRACKETAT
first(attribute) = LBRACKETAT
first(attr_id) = WITH WHILE WHEN VIRTUAL VAL UIDENT TYPE TRY TRUE TO THEN STRUCT SIG REC PRIVATE OR OPEN OF OBJECT NONREC NEW MUTABLE MODULE METHOD MATCH LIDENT LET LAZY INITIALIZER INHERIT INCLUDE IN IF FUNCTOR FUNCTION FUN FOR FALSE EXTERNAL EXCEPTION END ELSE DOWNTO DONE DO CONSTRAINT CLASS BEGIN ASSERT AS AND
first(and_type_declaration) = AND
first(and_module_declaration) = AND
first(and_module_binding) = AND
first(and_let_binding) = AND
first(and_class_type_declaration) = AND
first(and_class_description) = AND
first(and_class_declaration) = AND
first(amper_type_list) = UNDERSCORE UIDENT SHARP QUOTE QUESTION OPTLABEL LPAREN LIDENT LESS LBRACKETPERCENT LBRACKETLESS LBRACKETGREATER LBRACKET
first(additive) = PLUSDOT PLUS
follow(with_type_binder) = UNDERSCORE UIDENT SHARP QUOTE QUESTION OPTLABEL LPAREN LIDENT LESS LBRACKETPERCENT LBRACKETLESS LBRACKETGREATER LBRACKET
follow(with_constraints) = error WITH VAL TYPE SHARP SEMISEMI RPAREN RBRACKET OPEN MODULE MINUSGREATER LET LBRACKETPERCENTPERCENT LBRACKETATATAT LBRACKETATAT LBRACKETAT INCLUDE EXTERNAL EXCEPTION EQUAL EOF END CLASS AND
follow(with_constraint) = error WITH VAL TYPE SHARP SEMISEMI RPAREN RBRACKET OPEN MODULE MINUSGREATER LET LBRACKETPERCENTPERCENT LBRACKETATATAT LBRACKETATAT LBRACKETAT INCLUDE EXTERNAL EXCEPTION EQUAL EOF END CLASS AND
follow(virtual_flag) = LIDENT LBRACKET
follow(value_type) = error VAL METHOD LBRACKETPERCENTPERCENT LBRACKETATATAT LBRACKETATAT INHERIT END CONSTRAINT
follow(value_description) = error VAL TYPE SHARP SEMISEMI RBRACKET OPEN MODULE LET LBRACKETPERCENTPERCENT LBRACKETATATAT INCLUDE EXTERNAL EXCEPTION EOF END CLASS
follow(value) = error VAL METHOD LBRACKETPERCENTPERCENT LBRACKETATATAT LBRACKETATAT INITIALIZER INHERIT END CONSTRAINT
follow(val_longident) = error WITH VAL UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARPOP SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUSEQ PLUSDOT PLUS PERCENT OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETPERCENTPERCENT LBRACKETPERCENT LBRACKETBAR LBRACKETATATAT LBRACKETATAT LBRACKETAT LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DONE DO CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BANG BACKQUOTE AS AND AMPERSAND AMPERAMPER
follow(val_ident) = error WITH WHEN VAL UNDERSCORE UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARPOP SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUSEQ PLUSDOT PLUS PERCENT OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETPERCENTPERCENT LBRACKETPERCENT LBRACKETBAR LBRACKETATATAT LBRACKETATAT LBRACKETAT LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DONE DO CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BANG BACKQUOTE AS AND AMPERSAND AMPERAMPER
follow(use_file_tail) = #
follow(use_file_body) = #
follow(use_file) = #
follow(typevar_list) = QUOTE DOT
follow(type_variance) = UNDERSCORE QUOTE
follow(type_variable) = UIDENT RPAREN RBRACKET LIDENT COMMA
follow(type_parameters) = UIDENT LIDENT
follow(type_parameter_list) = RPAREN RBRACKET COMMA
follow(type_parameter) = UIDENT RPAREN RBRACKET LIDENT COMMA
follow(type_longident) = error WITH WHEN VAL UNDERSCORE UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PLUSEQ PLUS OPTLABEL OPEN NATIVEINT MODULE MINUSGREATER MINUS METHOD LPAREN LIDENT LET LBRACKETPERCENTPERCENT LBRACKETPERCENT LBRACKETBAR LBRACKETATATAT LBRACKETATAT LBRACKETAT LBRACKET LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INCLUDE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END CONSTRAINT COMMA COLONGREATER COLONCOLON COLON CLASS CHAR BARRBRACKET BAR BACKQUOTE AS AND AMPERSAND
follow(type_kind) = error VAL TYPE SHARP SEMISEMI RBRACKET OPEN MODULE LET LBRACKETPERCENTPERCENT LBRACKETATATAT LBRACKETATAT INCLUDE EXTERNAL EXCEPTION EOF END CONSTRAINT CLASS AND
follow(type_declarations) = error VAL TYPE SHARP SEMISEMI RBRACKET OPEN MODULE LET LBRACKETPERCENTPERCENT LBRACKETATATAT INCLUDE EXTERNAL EXCEPTION EOF END CLASS AND
follow(type_declaration) = error VAL TYPE SHARP SEMISEMI RBRACKET OPEN MODULE LET LBRACKETPERCENTPERCENT LBRACKETATATAT INCLUDE EXTERNAL EXCEPTION EOF END CLASS AND
follow(type_constraint) = error SEMI RPAREN RBRACE EQUAL
follow(toplevel_phrase) = #
follow(toplevel_directive) = VAL TYPE SHARP SEMISEMI OPEN MODULE LET LBRACKETPERCENTPERCENT LBRACKETATATAT INCLUDE EXTERNAL EXCEPTION EOF CLASS
follow(top_structure_tail) = SEMISEMI
follow(top_structure) = SEMISEMI
follow(tag_field) = RBRACKET GREATER BAR
follow(subtractive) = WHILE UIDENT TRY TRUE STRING PREFIXOP PLUSDOT PLUS OBJECT NEW NATIVEINT MINUSDOT MINUS MATCH LPAREN LIDENT LET LBRACKETPERCENT LBRACKETBAR LBRACKET LBRACELESS LBRACE LAZY INT64 INT32 INT IF FUNCTION FUN FOR FLOAT FALSE CHAR BEGIN BANG BACKQUOTE ASSERT
follow(structure_tail) = error RBRACKET EOF END
follow(structure_item) = error VAL TYPE SHARP SEMISEMI RBRACKET OPEN MODULE LET LBRACKETPERCENTPERCENT LBRACKETATATAT INCLUDE EXTERNAL EXCEPTION EOF END CLASS
follow(structure) = error RBRACKET EOF END
follow(strict_binding) = error VAL TYPE SHARP SEMISEMI RBRACKET OPEN MODULE METHOD LET LBRACKETPERCENTPERCENT LBRACKETATATAT LBRACKETATAT INITIALIZER INHERIT INCLUDE IN EXTERNAL EXCEPTION EOF END CONSTRAINT CLASS AND
follow(str_type_extension) = error VAL TYPE SHARP SEMISEMI RBRACKET OPEN MODULE LET LBRACKETPERCENTPERCENT LBRACKETATATAT INCLUDE EXTERNAL EXCEPTION EOF END CLASS
follow(str_include_statement) = error VAL TYPE SHARP SEMISEMI RBRACKET OPEN MODULE LET LBRACKETPERCENTPERCENT LBRACKETATATAT INCLUDE EXTERNAL EXCEPTION EOF END CLASS
follow(str_extension_constructors) = error VAL TYPE SHARP SEMISEMI RBRACKET OPEN MODULE LET LBRACKETPERCENTPERCENT LBRACKETATATAT LBRACKETATAT INCLUDE EXTERNAL EXCEPTION EOF END CLASS BAR
follow(str_exception_declaration) = error VAL TYPE SHARP SEMISEMI RBRACKET OPEN MODULE LET LBRACKETPERCENTPERCENT LBRACKETATATAT INCLUDE EXTERNAL EXCEPTION EOF END CLASS
follow(single_attr_id) = error WHILE VAL UNDERSCORE UIDENT TYPE TRY TRUE TILDE STRING SHARP SEMISEMI REC RBRACKET QUESTION PREFIXOP PLUSDOT PLUS OPTLABEL OPEN OBJECT NEW NATIVEINT MODULE MINUSDOT MINUS METHOD MATCH LPAREN LIDENT LET LBRACKETPERCENTPERCENT LBRACKETPERCENT LBRACKETBAR LBRACKETATATAT LBRACKETAT LBRACKET LBRACELESS LBRACE LAZY LABEL INT64 INT32 INT INITIALIZER INHERIT INCLUDE IF FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION END DOT CONSTRAINT COLON CLASS CHAR BEGIN BAR BANG BACKQUOTE ASSERT
follow(simple_pattern_not_ident) = error WHEN UNDERSCORE UIDENT TRUE TILDE STRING SHARP SEMI RPAREN RBRACKET RBRACE QUESTION PLUS OPTLABEL NATIVEINT MINUSGREATER MINUS LPAREN LIDENT LBRACKETPERCENT LBRACKETBAR LBRACKETAT LBRACKET LBRACE LABEL INT64 INT32 INT FLOAT FALSE EQUAL EOF COMMA COLONGREATER COLONCOLON COLON CHAR BARRBRACKET BAR BACKQUOTE AS
follow(simple_pattern) = error WHEN UNDERSCORE UIDENT TRUE TILDE STRING SHARP SEMI RPAREN RBRACKET RBRACE QUESTION PLUS OPTLABEL NATIVEINT MINUSGREATER MINUS LPAREN LIDENT LBRACKETPERCENT LBRACKETBAR LBRACKETAT LBRACKET LBRACE LABEL INT64 INT32 INT FLOAT FALSE EQUAL EOF COMMA COLONGREATER COLONCOLON COLON CHAR BARRBRACKET BAR BACKQUOTE AS
follow(simple_labeled_expr_list) = error WITH VAL UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUSEQ PLUSDOT PLUS PERCENT OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETPERCENTPERCENT LBRACKETPERCENT LBRACKETBAR LBRACKETATATAT LBRACKETATAT LBRACKETAT LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DONE DO CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BANG BACKQUOTE AS AND AMPERSAND AMPERAMPER
follow(simple_expr) = error WITH VAL UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARPOP SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUSEQ PLUSDOT PLUS PERCENT OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETPERCENTPERCENT LBRACKETPERCENT LBRACKETBAR LBRACKETATATAT LBRACKETATAT LBRACKETAT LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DONE DO CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BANG BACKQUOTE AS AND AMPERSAND AMPERAMPER
follow(simple_core_type_or_tuple) = error WITH VAL TYPE SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OPEN MODULE MINUSGREATER METHOD LET LBRACKETPERCENTPERCENT LBRACKETATATAT LBRACKETATAT LBRACKETAT INITIALIZER INHERIT INCLUDE GREATER EXTERNAL EXCEPTION EQUAL EOF END CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND AMPERSAND
follow(simple_core_type2) = error WITH VAL UIDENT TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OPEN MODULE MINUSGREATER METHOD LIDENT LET LBRACKETPERCENTPERCENT LBRACKETATATAT LBRACKETATAT LBRACKETAT INITIALIZER INHERIT INCLUDE GREATER EXTERNAL EXCEPTION EQUAL EOF END CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND AMPERSAND
follow(simple_core_type) = error WITH VAL TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OPEN MODULE MINUSGREATER METHOD LET LBRACKETPERCENTPERCENT LBRACKETATATAT LBRACKETATAT LBRACKETAT INITIALIZER INHERIT INCLUDE GREATER EXTERNAL EXCEPTION EQUAL EOF END CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND AMPERSAND
follow(signed_constant) = error WHEN UNDERSCORE UIDENT TRUE TILDE STRING SHARP SEMI RPAREN RBRACKET RBRACE QUESTION PLUS OPTLABEL NATIVEINT MINUSGREATER MINUS LPAREN LIDENT LBRACKETPERCENT LBRACKETBAR LBRACKETAT LBRACKET LBRACE LABEL INT64 INT32 INT FLOAT FALSE EQUAL EOF DOTDOT COMMA COLONGREATER COLONCOLON COLON CHAR BARRBRACKET BAR BACKQUOTE AS
follow(signature_item) = error VAL TYPE SEMISEMI OPEN MODULE LBRACKETPERCENTPERCENT LBRACKETATATAT INCLUDE EXTERNAL EXCEPTION EOF END CLASS
follow(signature) = error EOF END
follow(sig_type_extension) = error VAL TYPE SEMISEMI OPEN MODULE LBRACKETPERCENTPERCENT LBRACKETATATAT INCLUDE EXTERNAL EXCEPTION EOF END CLASS
follow(sig_include_statement) = error VAL TYPE SEMISEMI OPEN MODULE LBRACKETPERCENTPERCENT LBRACKETATATAT INCLUDE EXTERNAL EXCEPTION EOF END CLASS
follow(sig_extension_constructors) = error VAL TYPE SEMISEMI OPEN MODULE LBRACKETPERCENTPERCENT LBRACKETATATAT LBRACKETATAT INCLUDE EXTERNAL EXCEPTION EOF END CLASS BAR
follow(sig_exception_declaration) = error VAL TYPE SHARP SEMISEMI RBRACKET OPEN MODULE LET LBRACKETPERCENTPERCENT LBRACKETATATAT INCLUDE EXTERNAL EXCEPTION EOF END CLASS
follow(seq_expr) = error WITH VAL TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUSEQ PLUSDOT PLUS PERCENT OR OPEN MODULE MINUSGREATER MINUSDOT MINUS METHOD LET LESS LBRACKETPERCENTPERCENT LBRACKETATATAT LBRACKETATAT LBRACKETAT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DONE DO CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER
follow(row_field_list) = RBRACKET GREATER BAR
follow(row_field) = RBRACKET GREATER BAR
follow(record_expr) = error RBRACE
follow(rec_module_declarations) = error VAL TYPE SEMISEMI OPEN MODULE LBRACKETPERCENTPERCENT LBRACKETATATAT INCLUDE EXTERNAL EXCEPTION EOF END CLASS AND
follow(rec_module_declaration) = error VAL TYPE SEMISEMI OPEN MODULE LBRACKETPERCENTPERCENT LBRACKETATATAT INCLUDE EXTERNAL EXCEPTION EOF END CLASS AND
follow(rec_module_bindings) = error VAL TYPE SHARP SEMISEMI RBRACKET OPEN MODULE LET LBRACKETPERCENTPERCENT LBRACKETATATAT INCLUDE EXTERNAL EXCEPTION EOF END CLASS AND
follow(rec_module_binding) = error VAL TYPE SHARP SEMISEMI RBRACKET OPEN MODULE LET LBRACKETPERCENTPERCENT LBRACKETATATAT INCLUDE EXTERNAL EXCEPTION EOF END CLASS AND
follow(rec_flag) = UNDERSCORE UIDENT TRUE STRING SHARP PLUS NATIVEINT MINUS LPAREN LIDENT LBRACKETPERCENT LBRACKETBAR LBRACKET LBRACE LAZY INT64 INT32 INT FLOAT FALSE EXCEPTION CHAR BACKQUOTE
follow(private_virtual_flags) = LIDENT
follow(private_flag) = UIDENT TRUE LPAREN LIDENT LBRACE FALSE COLONCOLON BAR
follow(primitive_declaration_body) = error VAL TYPE SHARP SEMISEMI RBRACKET OPEN MODULE LET LBRACKETPERCENTPERCENT LBRACKETATATAT LBRACKETATAT INCLUDE EXTERNAL EXCEPTION EOF END CLASS
follow(primitive_declaration) = error VAL TYPE SHARP SEMISEMI RBRACKET OPEN MODULE LET LBRACKETPERCENTPERCENT LBRACKETATATAT INCLUDE EXTERNAL EXCEPTION EOF END CLASS
follow(post_item_attributes) = error VAL TYPE SHARP SEMISEMI RBRACKET OPEN MODULE METHOD LET LBRACKETPERCENTPERCENT LBRACKETATATAT INITIALIZER INHERIT INCLUDE IN EXTERNAL EXCEPTION EOF END CONSTRAINT CLASS AND
follow(post_item_attribute) = error VAL TYPE SHARP SEMISEMI RBRACKET OPEN MODULE METHOD LET LBRACKETPERCENTPERCENT LBRACKETATATAT LBRACKETATAT INITIALIZER INHERIT INCLUDE IN EXTERNAL EXCEPTION EOF END CONSTRAINT CLASS AND
follow(poly_type_no_attr) = SEMI RBRACE LBRACKETAT GREATER
follow(poly_type) = error VAL METHOD LBRACKETPERCENTPERCENT LBRACKETATATAT LBRACKETATAT INITIALIZER INHERIT EQUAL END CONSTRAINT
follow(payload) = RBRACKET
follow(pattern_var) = UNDERSCORE UIDENT TRUE TILDE STRING SHARP QUESTION PLUS OPTLABEL NATIVEINT MINUSGREATER MINUS LPAREN LIDENT LBRACKETPERCENT LBRACKETBAR LBRACKET LBRACE LABEL INT64 INT32 INT FLOAT FALSE EQUAL COLONGREATER COLON CHAR BACKQUOTE
follow(pattern_semi_list) = error SEMI RBRACKET BARRBRACKET
follow(pattern_comma_list) = error WHEN SEMI RPAREN RBRACKET RBRACE MINUSGREATER LBRACKETAT EQUAL EOF COMMA COLONCOLON COLON BARRBRACKET BAR AS
follow(pattern) = error WHEN SEMI RPAREN RBRACKET RBRACE MINUSGREATER LBRACKETAT EQUAL EOF COMMA COLONCOLON COLON BARRBRACKET BAR AS
follow(parse_pattern) = #
follow(parse_expression) = #
follow(parse_core_type) = #
follow(parent_binder) = error VAL METHOD LBRACKETPERCENTPERCENT LBRACKETATATAT LBRACKETATAT INITIALIZER INHERIT END CONSTRAINT
follow(package_type_cstrs) = error RPAREN COLONGREATER
follow(package_type_cstr) = error RPAREN COLONGREATER AND
follow(package_type) = error RPAREN COLONGREATER
follow(override_flag) = VIRTUAL UIDENT PRIVATE PERCENT OBJECT MUTABLE LPAREN LIDENT LET LBRACKETPERCENT LBRACKETAT LBRACKET FUN
follow(optional_type_variable) = UIDENT RPAREN LIDENT COMMA
follow(optional_type_parameters) = UIDENT LIDENT
follow(optional_type_parameter_list) = RPAREN COMMA
follow(optional_type_parameter) = UIDENT RPAREN LIDENT COMMA
follow(opt_type_constraint) = error SEMI RBRACE EQUAL
follow(opt_semi) = error RBRACKET RBRACE GREATERRBRACE GREATER BARRBRACKET
follow(opt_pattern_type_constraint) = error SEMI RBRACE EQUAL
follow(opt_default) = RPAREN
follow(opt_bar) = UNDERSCORE UIDENT TRUE STRING SHARP QUOTE PLUS NATIVEINT MINUS LPAREN LIDENT LESS LBRACKETPERCENT LBRACKETLESS LBRACKETGREATER LBRACKETBAR LBRACKET LBRACE LAZY INT64 INT32 INT FLOAT FALSE EXCEPTION CHAR BACKQUOTE
follow(opt_assign_arrow) = error RPAREN
follow(opt_ampersand) = UNDERSCORE UIDENT SHARP QUOTE QUESTION OPTLABEL LPAREN LIDENT LESS LBRACKETPERCENT LBRACKETLESS LBRACKETGREATER LBRACKET
follow(operator) = error RPAREN
follow(open_statement) = error VAL TYPE SHARP SEMISEMI RBRACKET OPEN MODULE LET LBRACKETPERCENTPERCENT LBRACKETATATAT INCLUDE EXTERNAL EXCEPTION EOF END CLASS
follow(nonrec_flag) = UNDERSCORE UIDENT QUOTE PLUS MINUS LPAREN LIDENT
follow(name_tag_list) = RBRACKET BACKQUOTE
follow(name_tag) = error WITH WHEN VAL UNDERSCORE UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARPOP SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUSEQ PLUSDOT PLUS PERCENT OR OPTLABEL OPEN OF NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETPERCENTPERCENT LBRACKETPERCENT LBRACKETBAR LBRACKETATATAT LBRACKETATAT LBRACKETAT LBRACKET LBRACELESS LBRACE LAZY LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DONE DO CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BANG BACKQUOTE AS AND AMPERSAND AMPERAMPER
follow(mutable_flag) = LIDENT
follow(mty_longident) = error WITH VAL TYPE SHARP SEMISEMI RPAREN RBRACKET OPEN MODULE MINUSGREATER LET LBRACKETPERCENTPERCENT LBRACKETATATAT LBRACKETATAT LBRACKETAT INCLUDE EXTERNAL EXCEPTION EQUAL EOF END COLONGREATER CLASS AND
follow(module_type_declaration_body) = error VAL TYPE SHARP SEMISEMI RBRACKET OPEN MODULE LET LBRACKETPERCENTPERCENT LBRACKETATATAT LBRACKETATAT INCLUDE EXTERNAL EXCEPTION EOF END CLASS
follow(module_type_declaration) = error VAL TYPE SHARP SEMISEMI RBRACKET OPEN MODULE LET LBRACKETPERCENTPERCENT LBRACKETATATAT INCLUDE EXTERNAL EXCEPTION EOF END CLASS
follow(module_type) = error WITH VAL TYPE SHARP SEMISEMI RPAREN RBRACKET OPEN MODULE MINUSGREATER LET LBRACKETPERCENTPERCENT LBRACKETATATAT LBRACKETATAT LBRACKETAT INCLUDE EXTERNAL EXCEPTION EQUAL EOF END CLASS AND
follow(module_expr) = error WITH VAL TYPE SHARP SEMISEMI RPAREN RBRACKET OPEN MODULE MINUSGREATER LPAREN LET LBRACKETPERCENTPERCENT LBRACKETATATAT LBRACKETATAT LBRACKETAT INCLUDE IN EXTERNAL EXCEPTION EQUAL EOF END COLON CLASS AND
follow(module_declaration_body) = error VAL TYPE SEMISEMI OPEN MODULE LBRACKETPERCENTPERCENT LBRACKETATATAT LBRACKETATAT INCLUDE EXTERNAL EXCEPTION EOF END CLASS
follow(module_declaration) = error VAL TYPE SEMISEMI OPEN MODULE LBRACKETPERCENTPERCENT LBRACKETATATAT INCLUDE EXTERNAL EXCEPTION EOF END CLASS
follow(module_binding_body) = error VAL TYPE SHARP SEMISEMI RBRACKET OPEN MODULE LET LBRACKETPERCENTPERCENT LBRACKETATATAT LBRACKETATAT INCLUDE IN EXTERNAL EXCEPTION EOF END CLASS AND
follow(module_binding) = error VAL TYPE SHARP SEMISEMI RBRACKET OPEN MODULE LET LBRACKETPERCENTPERCENT LBRACKETATATAT INCLUDE EXTERNAL EXCEPTION EOF END CLASS
follow(module_alias) = error VAL TYPE SEMISEMI OPEN MODULE LBRACKETPERCENTPERCENT LBRACKETATATAT INCLUDE EXTERNAL EXCEPTION EOF END CLASS
follow(mod_longident) = error WITH WHEN VAL UNDERSCORE UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARPOP SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUSEQ PLUSDOT PLUS PERCENT OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETPERCENTPERCENT LBRACKETPERCENT LBRACKETBAR LBRACKETATATAT LBRACKETATAT LBRACKETAT LBRACKET LBRACELESS LBRACE LAZY LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DONE DO CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BANG BACKQUOTE AS AND AMPERSAND AMPERAMPER
follow(mod_ext_longident) = error WITH VAL TYPE SHARP SEMISEMI RPAREN RBRACKET OPEN MODULE MINUSGREATER LPAREN LET LBRACKETPERCENTPERCENT LBRACKETATATAT LBRACKETATAT LBRACKETAT INCLUDE EXTERNAL EXCEPTION EQUAL EOF END DOT CLASS AND
follow(method_) = error VAL METHOD LBRACKETPERCENTPERCENT LBRACKETATATAT LBRACKETATAT INITIALIZER INHERIT END CONSTRAINT
follow(meth_list) = GREATER
follow(match_cases) = error WITH VAL TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUSEQ PLUSDOT PLUS PERCENT OR OPEN MODULE MINUSGREATER MINUSDOT MINUS METHOD LET LESS LBRACKETPERCENTPERCENT LBRACKETATATAT LBRACKETATAT LBRACKETAT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DONE DO CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER
follow(match_case) = error WITH VAL TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUSEQ PLUSDOT PLUS PERCENT OR OPEN MODULE MINUSGREATER MINUSDOT MINUS METHOD LET LESS LBRACKETPERCENTPERCENT LBRACKETATATAT LBRACKETATAT LBRACKETAT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DONE DO CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER
follow(lident_list) = RPAREN DOT
follow(let_pattern) = RPAREN EQUAL
follow(let_bindings) = error VAL TYPE SHARP SEMISEMI RBRACKET OPEN MODULE LET LBRACKETPERCENTPERCENT LBRACKETATATAT INCLUDE IN EXTERNAL EXCEPTION EOF END CLASS AND
follow(let_binding_body) = error VAL TYPE SHARP SEMISEMI RBRACKET OPEN MODULE LET LBRACKETPERCENTPERCENT LBRACKETATATAT LBRACKETATAT INCLUDE IN EXTERNAL EXCEPTION EOF END CLASS AND
follow(let_binding) = error VAL TYPE SHARP SEMISEMI RBRACKET OPEN MODULE LET LBRACKETPERCENTPERCENT LBRACKETATATAT INCLUDE IN EXTERNAL EXCEPTION EOF END CLASS AND
follow(lbl_pattern_list) = error RBRACE
follow(lbl_pattern) = error SEMI RBRACE
follow(lbl_expr_list) = error RBRACE
follow(lbl_expr) = error SEMI RBRACE
follow(labeled_simple_pattern) = UNDERSCORE UIDENT TRUE TILDE STRING SHARP QUESTION PLUS OPTLABEL NATIVEINT MINUSGREATER MINUS LPAREN LIDENT LBRACKETPERCENT LBRACKETBAR LBRACKET LBRACE LABEL INT64 INT32 INT FLOAT FALSE EQUAL COLONGREATER COLON CHAR BACKQUOTE
follow(labeled_simple_expr) = error WITH VAL UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUSEQ PLUSDOT PLUS PERCENT OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETPERCENTPERCENT LBRACKETPERCENT LBRACKETBAR LBRACKETATATAT LBRACKETATAT LBRACKETAT LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DONE DO CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BANG BACKQUOTE AS AND AMPERSAND AMPERAMPER
follow(label_var) = UNDERSCORE UIDENT TRUE TILDE STRING SHARP RPAREN QUESTION PLUS OPTLABEL NATIVEINT MINUSGREATER MINUS LPAREN LIDENT LBRACKETPERCENT LBRACKETBAR LBRACKET LBRACE LABEL INT64 INT32 INT FLOAT FALSE EQUAL COLONGREATER COLON CHAR BACKQUOTE
follow(label_longident) = error WITH VAL UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARPOP SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUSEQ PLUSDOT PLUS PERCENT OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS METHOD LPAREN LIDENT LET LESSMINUS LESS LBRACKETPERCENTPERCENT LBRACKETPERCENT LBRACKETBAR LBRACKETATATAT LBRACKETATAT LBRACKETAT LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DONE DO CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BANG BACKQUOTE AS AND AMPERSAND AMPERAMPER
follow(label_let_pattern) = RPAREN EQUAL
follow(label_ident) = error WITH VAL UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUSEQ PLUSDOT PLUS PERCENT OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETPERCENTPERCENT LBRACKETPERCENT LBRACKETBAR LBRACKETATATAT LBRACKETATAT LBRACKETAT LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DONE DO CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BANG BACKQUOTE AS AND AMPERSAND AMPERAMPER
follow(label_expr) = error WITH VAL UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUSEQ PLUSDOT PLUS PERCENT OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETPERCENTPERCENT LBRACKETPERCENT LBRACKETBAR LBRACKETATATAT LBRACKETATAT LBRACKETAT LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DONE DO CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BANG BACKQUOTE AS AND AMPERSAND AMPERAMPER
follow(label_declarations) = RBRACE
follow(label_declaration_semi) = RBRACE MUTABLE LIDENT
follow(label_declaration) = RBRACE
follow(label) = error WITH VAL UNDERSCORE UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARPOP SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUSEQ PLUSDOT PLUS PERCENT OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS METHOD LPAREN LIDENT LET LESSMINUS LESS LBRACKETPERCENTPERCENT LBRACKETPERCENT LBRACKETBAR LBRACKETATATAT LBRACKETATAT LBRACKETAT LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DONE DO CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BANG BACKQUOTE AS AND AMPERSAND AMPERAMPER
follow(item_extension) = error VAL TYPE SHARP SEMISEMI RBRACKET OPEN MODULE METHOD LET LBRACKETPERCENTPERCENT LBRACKETATATAT LBRACKETATAT INITIALIZER INHERIT INCLUDE EXTERNAL EXCEPTION EOF END CONSTRAINT CLASS
follow(interface) = #
follow(index_operator_core) = error RPAREN LESSMINUS
follow(index_operator) = error RPAREN
follow(implementation) = #
follow(ident) = error WITH WHEN VAL UNDERSCORE UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARPOP SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUOTE QUESTION PREFIXOP PLUSEQ PLUSDOT PLUS PERCENT OR OPTLABEL OPEN OF NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETPERCENTPERCENT LBRACKETPERCENT LBRACKETBAR LBRACKETATATAT LBRACKETATAT LBRACKETAT LBRACKET LBRACELESS LBRACE LAZY LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DONE DO CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BANG BACKQUOTE AS AND AMPERSAND AMPERAMPER
follow(generalized_constructor_arguments) = error VAL TYPE SHARP SEMISEMI RBRACKET OPEN MODULE LET LBRACKETPERCENTPERCENT LBRACKETATATAT LBRACKETATAT LBRACKETAT INCLUDE EXTERNAL EXCEPTION EOF END CONSTRAINT CLASS BAR AND
follow(functor_args) = MINUSGREATER LPAREN
follow(functor_arg_name) = COLON
follow(functor_arg) = MINUSGREATER LPAREN EQUAL COLON
follow(fun_def) = error WITH VAL TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUSEQ PLUSDOT PLUS PERCENT OR OPEN MODULE MINUSGREATER MINUSDOT MINUS METHOD LET LESS LBRACKETPERCENTPERCENT LBRACKETATATAT LBRACKETATAT LBRACKETAT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DONE DO CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER
follow(fun_binding) = error VAL TYPE SHARP SEMISEMI RBRACKET OPEN MODULE METHOD LET LBRACKETPERCENTPERCENT LBRACKETATATAT LBRACKETATAT INITIALIZER INHERIT INCLUDE IN EXTERNAL EXCEPTION EOF END CONSTRAINT CLASS AND
follow(floating_attribute) = error VAL TYPE SHARP SEMISEMI RBRACKET OPEN MODULE METHOD LET LBRACKETPERCENTPERCENT LBRACKETATATAT INITIALIZER INHERIT INCLUDE EXTERNAL EXCEPTION EOF END CONSTRAINT CLASS
follow(field_expr_list) = error GREATERRBRACE
follow(field_expr) = error SEMI GREATERRBRACE
follow(field) = SEMI GREATER
follow(extension_constructor_rebind) = error VAL TYPE SHARP SEMISEMI RBRACKET OPEN MODULE LET LBRACKETPERCENTPERCENT LBRACKETATATAT LBRACKETATAT INCLUDE EXTERNAL EXCEPTION EOF END CLASS BAR
follow(extension_constructor_declaration) = error VAL TYPE SHARP SEMISEMI RBRACKET OPEN MODULE LET LBRACKETPERCENTPERCENT LBRACKETATATAT LBRACKETATAT INCLUDE EXTERNAL EXCEPTION EOF END CLASS BAR
follow(extension) = error WITH WHEN VAL UNDERSCORE UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARPOP SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUSEQ PLUSDOT PLUS PERCENT OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETPERCENTPERCENT LBRACKETPERCENT LBRACKETBAR LBRACKETATATAT LBRACKETATAT LBRACKETAT LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DONE DO CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BANG BACKQUOTE AS AND AMPERSAND AMPERAMPER
follow(ext_attributes) = error WHILE VAL UNDERSCORE UIDENT TRY TRUE TILDE STRING SHARP REC QUESTION PREFIXOP PLUSDOT PLUS OPTLABEL OBJECT NEW NATIVEINT MINUSDOT MINUS METHOD MATCH LPAREN LIDENT LET LBRACKETPERCENTPERCENT LBRACKETPERCENT LBRACKETBAR LBRACKETATATAT LBRACKET LBRACELESS LBRACE LAZY LABEL INT64 INT32 INT INITIALIZER INHERIT IF FUNCTION FUN FOR FLOAT FALSE EXCEPTION END CONSTRAINT CHAR BEGIN BAR BANG BACKQUOTE ASSERT
follow(expr_semi_list) = error SEMI RBRACKET BARRBRACKET
follow(expr_comma_list) = error WITH VAL TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUSEQ PLUSDOT PLUS PERCENT OR OPEN MODULE MINUSGREATER MINUSDOT MINUS METHOD LET LESS LBRACKETPERCENTPERCENT LBRACKETATATAT LBRACKETATAT LBRACKETAT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DONE DO CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER
follow(expr) = error WITH VAL TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUSEQ PLUSDOT PLUS PERCENT OR OPEN MODULE MINUSGREATER MINUSDOT MINUS METHOD LET LESS LBRACKETPERCENTPERCENT LBRACKETATATAT LBRACKETATAT LBRACKETAT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DONE DO CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER
follow(direction_flag) = WHILE UIDENT TRY TRUE STRING PREFIXOP PLUSDOT PLUS OBJECT NEW NATIVEINT MINUSDOT MINUS MATCH LPAREN LIDENT LET LBRACKETPERCENT LBRACKETBAR LBRACKET LBRACELESS LBRACE LAZY INT64 INT32 INT IF FUNCTION FUN FOR FLOAT FALSE CHAR BEGIN BANG BACKQUOTE ASSERT
follow(core_type_no_attr) = error WITH VAL TYPE SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OPEN MODULE MINUSGREATER METHOD LET LBRACKETPERCENTPERCENT LBRACKETATATAT LBRACKETATAT LBRACKETAT INITIALIZER INHERIT INCLUDE GREATER EXTERNAL EXCEPTION EQUAL EOF END CONSTRAINT COMMA COLONGREATER CLASS BAR AND AMPERSAND
follow(core_type_list) = error WITH VAL TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OPEN MODULE MINUSGREATER METHOD LET LBRACKETPERCENTPERCENT LBRACKETATATAT LBRACKETATAT LBRACKETAT INITIALIZER INHERIT INCLUDE GREATER EXTERNAL EXCEPTION EQUAL EOF END CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND AMPERSAND
follow(core_type_comma_list) = RPAREN RBRACKET COMMA
follow(core_type2) = error WITH VAL TYPE SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OPEN MODULE MINUSGREATER METHOD LET LBRACKETPERCENTPERCENT LBRACKETATATAT LBRACKETATAT LBRACKETAT INITIALIZER INHERIT INCLUDE GREATER EXTERNAL EXCEPTION EQUAL EOF END CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND AMPERSAND
follow(core_type) = error WITH VAL TYPE SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OPEN MODULE MINUSGREATER METHOD LET LBRACKETPERCENTPERCENT LBRACKETATATAT LBRACKETATAT LBRACKETAT INITIALIZER INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL EOF END CONSTRAINT COMMA COLONGREATER CLASS AND
follow(constructor_declarations) = error VAL TYPE SHARP SEMISEMI RBRACKET OPEN MODULE LET LBRACKETPERCENTPERCENT LBRACKETATATAT LBRACKETATAT INCLUDE EXTERNAL EXCEPTION EOF END CONSTRAINT CLASS BAR AND
follow(constructor_declaration) = error VAL TYPE SHARP SEMISEMI RBRACKET OPEN MODULE LET LBRACKETPERCENTPERCENT LBRACKETATATAT LBRACKETATAT INCLUDE EXTERNAL EXCEPTION EOF END CONSTRAINT CLASS BAR AND
follow(constructor_arguments) = error VAL TYPE SHARP SEMISEMI RBRACKET OPEN MODULE MINUSGREATER LET LBRACKETPERCENTPERCENT LBRACKETATATAT LBRACKETATAT LBRACKETAT INCLUDE EXTERNAL EXCEPTION EOF END CONSTRAINT CLASS BAR AND
follow(constraints) = error WITH VAL TYPE SHARP SEMISEMI RPAREN RBRACKET OPEN MODULE MINUSGREATER LET LBRACKETPERCENTPERCENT LBRACKETATATAT LBRACKETATAT LBRACKETAT INCLUDE EXTERNAL EXCEPTION EQUAL EOF END CONSTRAINT CLASS AND
follow(constrain_field) = error VAL METHOD LBRACKETPERCENTPERCENT LBRACKETATATAT LBRACKETATAT INITIALIZER INHERIT END CONSTRAINT
follow(constrain) = error WITH VAL TYPE SHARP SEMISEMI RPAREN RBRACKET OPEN MODULE MINUSGREATER LET LBRACKETPERCENTPERCENT LBRACKETATATAT LBRACKETATAT LBRACKETAT INCLUDE EXTERNAL EXCEPTION EQUAL EOF END CONSTRAINT CLASS AND
follow(constr_longident) = error WITH WHEN VAL UNDERSCORE UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARPOP SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUSEQ PLUSDOT PLUS PERCENT OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETPERCENTPERCENT LBRACKETPERCENT LBRACKETBAR LBRACKETATATAT LBRACKETATAT LBRACKETAT LBRACKET LBRACELESS LBRACE LAZY LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DONE DO CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BANG BACKQUOTE AS AND AMPERSAND AMPERAMPER
follow(constr_ident) = error VAL TYPE SHARP SEMISEMI RBRACKET OPEN OF MODULE LET LBRACKETPERCENTPERCENT LBRACKETATATAT LBRACKETATAT LBRACKETAT INCLUDE EXTERNAL EXCEPTION EQUAL EOF END CONSTRAINT COLON CLASS BAR AND
follow(constant) = error WITH WHEN VAL UNDERSCORE UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARPOP SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUSEQ PLUSDOT PLUS PERCENT OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETPERCENTPERCENT LBRACKETPERCENT LBRACKETBAR LBRACKETATATAT LBRACKETATAT LBRACKETAT LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOTDOT DOT DONE DO CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BANG BACKQUOTE AS AND AMPERSAND AMPERAMPER
follow(clty_longident) = error VAL TYPE SHARP SEMISEMI RPAREN RBRACKET OPEN MODULE METHOD LET LBRACKETPERCENTPERCENT LBRACKETATATAT LBRACKETATAT LBRACKETAT INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL EOF END CONSTRAINT CLASS AND
follow(class_type_parameters) = LIDENT
follow(class_type_declarations) = error VAL TYPE SHARP SEMISEMI RBRACKET OPEN MODULE LET LBRACKETPERCENTPERCENT LBRACKETATATAT INCLUDE EXTERNAL EXCEPTION EOF END CLASS AND
follow(class_type_declaration) = error VAL TYPE SHARP SEMISEMI RBRACKET OPEN MODULE LET LBRACKETPERCENTPERCENT LBRACKETATATAT INCLUDE EXTERNAL EXCEPTION EOF END CLASS AND
follow(class_type) = error VAL TYPE SEMISEMI RPAREN OPEN MODULE LBRACKETPERCENTPERCENT LBRACKETATATAT LBRACKETATAT INCLUDE EXTERNAL EXCEPTION EQUAL EOF END CLASS AND
follow(class_structure) = error END
follow(class_simple_expr) = error VAL UIDENT TYPE TRUE TILDE STRING SHARP SEMISEMI RPAREN RBRACKET QUESTION PREFIXOP OPTLABEL OPEN NEW NATIVEINT MODULE METHOD LPAREN LIDENT LET LBRACKETPERCENTPERCENT LBRACKETPERCENT LBRACKETBAR LBRACKETATATAT LBRACKETATAT LBRACKETAT LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INCLUDE FLOAT FALSE EXTERNAL EXCEPTION EOF END CONSTRAINT COLON CLASS CHAR BEGIN BANG BACKQUOTE AS AND
follow(class_signature) = error VAL TYPE SHARP SEMISEMI RPAREN RBRACKET OPEN MODULE METHOD LET LBRACKETPERCENTPERCENT LBRACKETATATAT LBRACKETATAT LBRACKETAT INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL EOF END CONSTRAINT CLASS AND
follow(class_sig_fields) = error VAL METHOD LBRACKETPERCENTPERCENT LBRACKETATATAT INHERIT END CONSTRAINT
follow(class_sig_field) = error VAL METHOD LBRACKETPERCENTPERCENT LBRACKETATATAT INHERIT END CONSTRAINT
follow(class_sig_body) = error END
follow(class_self_type) = error VAL METHOD LBRACKETPERCENTPERCENT LBRACKETATATAT INHERIT END CONSTRAINT
follow(class_self_pattern) = error VAL METHOD LBRACKETPERCENTPERCENT LBRACKETATATAT INITIALIZER INHERIT END CONSTRAINT
follow(class_longident) = error WITH VAL UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARPOP SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUSEQ PLUSDOT PLUS PERCENT OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETPERCENTPERCENT LBRACKETPERCENT LBRACKETBAR LBRACKETATATAT LBRACKETATAT LBRACKETAT LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DONE DO CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BANG BACKQUOTE AS AND AMPERSAND AMPERAMPER
follow(class_fun_def) = error VAL TYPE SHARP SEMISEMI RPAREN RBRACKET OPEN MODULE METHOD LET LBRACKETPERCENTPERCENT LBRACKETATATAT LBRACKETATAT LBRACKETAT INITIALIZER INHERIT INCLUDE EXTERNAL EXCEPTION EOF END CONSTRAINT COLON CLASS AS AND
follow(class_fun_binding) = error VAL TYPE SHARP SEMISEMI RBRACKET OPEN MODULE LET LBRACKETPERCENTPERCENT LBRACKETATATAT LBRACKETATAT INCLUDE EXTERNAL EXCEPTION EOF END CLASS AND
follow(class_fields) = error VAL METHOD LBRACKETPERCENTPERCENT LBRACKETATATAT INITIALIZER INHERIT END CONSTRAINT
follow(class_field) = error VAL METHOD LBRACKETPERCENTPERCENT LBRACKETATATAT INITIALIZER INHERIT END CONSTRAINT
follow(class_expr) = error VAL TYPE SHARP SEMISEMI RPAREN RBRACKET OPEN MODULE METHOD LET LBRACKETPERCENTPERCENT LBRACKETATATAT LBRACKETATAT LBRACKETAT INITIALIZER INHERIT INCLUDE EXTERNAL EXCEPTION EOF END CONSTRAINT COLON CLASS AS AND
follow(class_descriptions) = error VAL TYPE SEMISEMI OPEN MODULE LBRACKETPERCENTPERCENT LBRACKETATATAT INCLUDE EXTERNAL EXCEPTION EOF END CLASS AND
follow(class_description) = error VAL TYPE SEMISEMI OPEN MODULE LBRACKETPERCENTPERCENT LBRACKETATATAT INCLUDE EXTERNAL EXCEPTION EOF END CLASS AND
follow(class_declarations) = error VAL TYPE SHARP SEMISEMI RBRACKET OPEN MODULE LET LBRACKETPERCENTPERCENT LBRACKETATATAT INCLUDE EXTERNAL EXCEPTION EOF END CLASS AND
follow(class_declaration) = error VAL TYPE SHARP SEMISEMI RBRACKET OPEN MODULE LET LBRACKETPERCENTPERCENT LBRACKETATATAT INCLUDE EXTERNAL EXCEPTION EOF END CLASS AND
follow(bar_extension_constructor_rebind) = error VAL TYPE SHARP SEMISEMI RBRACKET OPEN MODULE LET LBRACKETPERCENTPERCENT LBRACKETATATAT LBRACKETATAT INCLUDE EXTERNAL EXCEPTION EOF END CLASS BAR
follow(bar_extension_constructor_declaration) = error VAL TYPE SHARP SEMISEMI RBRACKET OPEN MODULE LET LBRACKETPERCENTPERCENT LBRACKETATATAT LBRACKETATAT INCLUDE EXTERNAL EXCEPTION EOF END CLASS BAR
follow(bar_constructor_declaration) = error VAL TYPE SHARP SEMISEMI RBRACKET OPEN MODULE LET LBRACKETPERCENTPERCENT LBRACKETATATAT LBRACKETATAT INCLUDE EXTERNAL EXCEPTION EOF END CONSTRAINT CLASS BAR AND
follow(attributes) = error WHILE VAL UNDERSCORE UIDENT TYPE TRY TRUE TILDE STRING SHARP SEMISEMI SEMI REC RBRACKET RBRACE QUESTION PREFIXOP PLUSDOT PLUS OPTLABEL OPEN OBJECT NEW NATIVEINT MUTABLE MODULE MINUSDOT MINUS METHOD MATCH LPAREN LIDENT LET LBRACKETPERCENTPERCENT LBRACKETPERCENT LBRACKETBAR LBRACKETATATAT LBRACKETATAT LBRACKET LBRACELESS LBRACE LAZY LABEL INT64 INT32 INT INITIALIZER INHERIT INCLUDE IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EOF END CONSTRAINT CLASS CHAR BEGIN BAR BANG BACKQUOTE ASSERT AND
follow(attribute) = error WITH WHILE WHEN VAL UNDERSCORE UIDENT TYPE TRY TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN REC RBRACKET RBRACE QUESTION PREFIXOP PLUSEQ PLUSDOT PLUS PERCENT OR OPTLABEL OPEN OBJECT NEW NATIVEINT MUTABLE MODULE MINUSGREATER MINUSDOT MINUS METHOD MATCH LPAREN LIDENT LET LESS LBRACKETPERCENTPERCENT LBRACKETPERCENT LBRACKETBAR LBRACKETATATAT LBRACKETATAT LBRACKETAT LBRACKET LBRACELESS LBRACE LAZY LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN IF GREATERRBRACE GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DONE DO CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BANG BACKQUOTE ASSERT AS AND AMPERSAND AMPERAMPER
follow(attr_id) = error WHILE VAL UNDERSCORE UIDENT TYPE TRY TRUE TILDE STRING SHARP SEMISEMI REC RBRACKET QUESTION PREFIXOP PLUSDOT PLUS OPTLABEL OPEN OBJECT NEW NATIVEINT MODULE MINUSDOT MINUS METHOD MATCH LPAREN LIDENT LET LBRACKETPERCENTPERCENT LBRACKETPERCENT LBRACKETBAR LBRACKETATATAT LBRACKETAT LBRACKET LBRACELESS LBRACE LAZY LABEL INT64 INT32 INT INITIALIZER INHERIT INCLUDE IF FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION END CONSTRAINT COLON CLASS CHAR BEGIN BAR BANG BACKQUOTE ASSERT
follow(and_type_declaration) = error VAL TYPE SHARP SEMISEMI RBRACKET OPEN MODULE LET LBRACKETPERCENTPERCENT LBRACKETATATAT INCLUDE EXTERNAL EXCEPTION EOF END CLASS AND
follow(and_module_declaration) = error VAL TYPE SEMISEMI OPEN MODULE LBRACKETPERCENTPERCENT LBRACKETATATAT INCLUDE EXTERNAL EXCEPTION EOF END CLASS AND
follow(and_module_binding) = error VAL TYPE SHARP SEMISEMI RBRACKET OPEN MODULE LET LBRACKETPERCENTPERCENT LBRACKETATATAT INCLUDE EXTERNAL EXCEPTION EOF END CLASS AND
follow(and_let_binding) = error VAL TYPE SHARP SEMISEMI RBRACKET OPEN MODULE LET LBRACKETPERCENTPERCENT LBRACKETATATAT INCLUDE IN EXTERNAL EXCEPTION EOF END CLASS AND
follow(and_class_type_declaration) = error VAL TYPE SHARP SEMISEMI RBRACKET OPEN MODULE LET LBRACKETPERCENTPERCENT LBRACKETATATAT INCLUDE EXTERNAL EXCEPTION EOF END CLASS AND
follow(and_class_description) = error VAL TYPE SEMISEMI OPEN MODULE LBRACKETPERCENTPERCENT LBRACKETATATAT INCLUDE EXTERNAL EXCEPTION EOF END CLASS AND
follow(and_class_declaration) = error VAL TYPE SHARP SEMISEMI RBRACKET OPEN MODULE LET LBRACKETPERCENTPERCENT LBRACKETATATAT INCLUDE EXTERNAL EXCEPTION EOF END CLASS AND
follow(amper_type_list) = RBRACKET LBRACKETAT GREATER BAR AMPERSAND
follow(additive) = WHILE UIDENT TRY TRUE STRING PREFIXOP PLUSDOT PLUS OBJECT NEW NATIVEINT MINUSDOT MINUS MATCH LPAREN LIDENT LET LBRACKETPERCENT LBRACKETBAR LBRACKET LBRACELESS LBRACE LAZY INT64 INT32 INT IF FUNCTION FUN FOR FLOAT FALSE CHAR BEGIN BANG BACKQUOTE ASSERT
Built an LR(0) automaton with 1538 states.
The grammar is not SLR(1) -- 105 states have a conflict.
Built an LR(1) automaton with 1538 states.
922 shift/reduce conflicts were silently solved.
File "ocaml.mly", line 580, characters 0-9:
Warning: the precedence level assigned to LBRACKETATAT is never useful.
File "ocaml.mly", line 594, characters 0-9:
Warning: the precedence level assigned to LBRACKETPERCENTPERCENT is never useful.
File "ocaml.mly", line 900, characters 51-61:
Warning: this %prec declaration is never useful.
740 out of 1538 states are represented.
0 out of 341 symbols keep track of their start position.
0 out of 341 symbols keep track of their end position.
599 out of 1538 states have a default reduction.
398 out of 776 productions exploit shiftreduce optimization.
381 out of 1538 states can peek at an error.
4075 functions before inlining, 812 functions after inlining.
