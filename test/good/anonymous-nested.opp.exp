Warning: you are using the standard library and/or the %inline keyword. We
recommend switching on --infer in order to avoid obscure type error messages.
%start phrase
%token <int> A
%token <int> B
%token <int> C
%token <int> D
%token <int> EOF
%type <int> phrase
%%

foo:
  _1 = A _2 = B
    {      ( 1 )}

bar:
  _1 = C _2 = D
    {      ( 2 )}

phrase:
  x000 = foo x00 = foo _3 = EOF
    {let t =
  let x0 = x00 in
  let x =
    let x = x0 in
                     ( x )
  in
          ( x )
in
let y =
  let x00 = x000 in
  let x =
    let x0 = x00 in
    let x =
      let x = x0 in
                          ( x )
    in
            ( x )
  in
          ( x )
in
    ( y + t )}
| x000 = foo z0000 = bar _3 = EOF
    {let t =
  let z000 = z0000 in
  let x =
    let z00 = z000 in
    let _1 =
      let z0 = z00 in
      let x =
        let z = z0 in
                                            ( z )
      in
              ( x )
    in
                                               ( 2 )
  in
          ( x )
in
let y =
  let x00 = x000 in
  let x =
    let x0 = x00 in
    let x =
      let x = x0 in
                          ( x )
    in
            ( x )
  in
          ( x )
in
    ( y + t )}
| z000 = bar x00 = foo _3 = EOF
    {let t =
  let x0 = x00 in
  let x =
    let x = x0 in
                     ( x )
  in
          ( x )
in
let y =
  let z00 = z000 in
  let x =
    let z0 = z00 in
    let x =
      let z = z0 in
                                          ( z )
    in
            ( x )
  in
          ( x )
in
    ( y + t )}
| z000 = bar z0000 = bar _3 = EOF
    {let t =
  let z000 = z0000 in
  let x =
    let z00 = z000 in
    let _1 =
      let z0 = z00 in
      let x =
        let z = z0 in
                                            ( z )
      in
              ( x )
    in
                                               ( 2 )
  in
          ( x )
in
let y =
  let z00 = z000 in
  let x =
    let z0 = z00 in
    let x =
      let z = z0 in
                                          ( z )
    in
            ( x )
  in
          ( x )
in
    ( y + t )}

%%


