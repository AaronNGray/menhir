File "why-clparser.mly", line 65, characters 58-62:
Warning: the token ENUM is unused.
File "why-clparser.mly", line 54, characters 27-41:
Warning: the token STRING_LITERAL is unused.
File "why-clparser.mly", line 65, characters 51-57:
Warning: the token STRUCT is unused.
File "why-clparser.mly", line 65, characters 63-68:
Warning: the token UNION is unused.
Grammar has 35 nonterminal symbols, among which 1 start symbols.
Grammar has 85 terminal symbols.
Grammar has 147 productions.
nullable(variant) = false
nullable(type_specifier) = false
nullable(stars) = false
nullable(spec) = true
nullable(relation) = false
nullable(pre_condition) = true
nullable(post_condition) = true
nullable(parameters) = true
nullable(parameter) = false
nullable(ne_parameters) = false
nullable(ne_loop_effects) = false
nullable(ne_lexpr_list) = false
nullable(loop_effects) = true
nullable(loop_annot) = false
nullable(logic_type_not_id) = false
nullable(logic_type) = false
nullable(locations) = false
nullable(location) = false
nullable(lexpr_option) = true
nullable(lexpr_list) = true
nullable(lexpr) = false
nullable(invariant) = false
nullable(init_declarator_list) = false
nullable(init_declarator) = false
nullable(ghost_lvalue) = false
nullable(ghost_decl) = false
nullable(effects) = true
nullable(direct_declarator) = false
nullable(decreases) = true
nullable(declarator) = false
nullable(decl) = false
nullable(c_initializer_list) = false
nullable(c_initializer) = false
nullable(annotation) = true
nullable(annot) = false
first(variant) = VARIANT
first(type_specifier) = INT FLOAT DOUBLE CHAR
first(stars) = STAR
first(spec) = REQUIRES ENSURES DECREASES ASSIGNS
first(relation) = NE LT LE GT GE EQ
first(pre_condition) = REQUIRES
first(post_condition) = ENSURES
first(parameters) = VOID UNSIGNED TYPENAME SIGNED SHORT LONG INT IDENTIFIER FLOAT DOUBLE CHAR
first(parameter) = VOID UNSIGNED TYPENAME SIGNED SHORT LONG INT IDENTIFIER FLOAT DOUBLE CHAR
first(ne_parameters) = VOID UNSIGNED TYPENAME SIGNED SHORT LONG INT IDENTIFIER FLOAT DOUBLE CHAR
first(ne_loop_effects) = LOOP_ASSIGNS
first(ne_lexpr_list) = VALID_RANGE VALID_INDEX VALID TRUE STAR SEPARATED RESULT PLUS OLD NULL NOT MINUS LPAR IF IDENTIFIER FULLSEPARATED FRESH FORALL FALSE EXISTS CONSTANT BLOCK_LENGTH BASE_ADDR AT AMP
first(loop_effects) = LOOP_ASSIGNS
first(loop_annot) = VARIANT LOOP_ASSIGNS INVARIANT
first(logic_type_not_id) = VOID UNSIGNED TYPENAME SIGNED SHORT LONG INT FLOAT DOUBLE CHAR
first(logic_type) = VOID UNSIGNED TYPENAME SIGNED SHORT LONG INT IDENTIFIER FLOAT DOUBLE CHAR
first(locations) = VALID_RANGE VALID_INDEX VALID TRUE STAR SEPARATED RESULT PLUS OLD NULL NOT MINUS LPAR IF IDENTIFIER FULLSEPARATED FRESH FORALL FALSE EXISTS CONSTANT BLOCK_LENGTH BASE_ADDR AT AMP
first(location) = VALID_RANGE VALID_INDEX VALID TRUE STAR SEPARATED RESULT PLUS OLD NULL NOT MINUS LPAR IF IDENTIFIER FULLSEPARATED FRESH FORALL FALSE EXISTS CONSTANT BLOCK_LENGTH BASE_ADDR AT AMP
first(lexpr_option) = VALID_RANGE VALID_INDEX VALID TRUE STAR SEPARATED RESULT PLUS OLD NULL NOT MINUS LPAR IF IDENTIFIER FULLSEPARATED FRESH FORALL FALSE EXISTS CONSTANT BLOCK_LENGTH BASE_ADDR AT AMP
first(lexpr_list) = VALID_RANGE VALID_INDEX VALID TRUE STAR SEPARATED RESULT PLUS OLD NULL NOT MINUS LPAR IF IDENTIFIER FULLSEPARATED FRESH FORALL FALSE EXISTS CONSTANT BLOCK_LENGTH BASE_ADDR AT AMP
first(lexpr) = VALID_RANGE VALID_INDEX VALID TRUE STAR SEPARATED RESULT PLUS OLD NULL NOT MINUS LPAR IF IDENTIFIER FULLSEPARATED FRESH FORALL FALSE EXISTS CONSTANT BLOCK_LENGTH BASE_ADDR AT AMP
first(invariant) = INVARIANT
first(init_declarator_list) = IDENTIFIER
first(init_declarator) = IDENTIFIER
first(ghost_lvalue) = VALID_RANGE VALID_INDEX VALID TRUE STAR SEPARATED RESULT PLUS OLD NULL NOT MINUS LPAR IF IDENTIFIER FULLSEPARATED FRESH FORALL FALSE EXISTS CONSTANT BLOCK_LENGTH BASE_ADDR AT AMP
first(ghost_decl) = GHOST
first(effects) = ASSIGNS
first(direct_declarator) = IDENTIFIER
first(decreases) = DECREASES
first(declarator) = IDENTIFIER
first(decl) = PREDICATE LOGIC INVARIANT AXIOM
first(c_initializer_list) = VALID_RANGE VALID_INDEX VALID TRUE STAR SEPARATED RESULT PLUS OLD NULL NOT MINUS LPAR LBRACE IF IDENTIFIER FULLSEPARATED FRESH FORALL FALSE EXISTS CONSTANT BLOCK_LENGTH BASE_ADDR AT AMP
first(c_initializer) = VALID_RANGE VALID_INDEX VALID TRUE STAR SEPARATED RESULT PLUS OLD NULL NOT MINUS LPAR LBRACE IF IDENTIFIER FULLSEPARATED FRESH FORALL FALSE EXISTS CONSTANT BLOCK_LENGTH BASE_ADDR AT AMP
first(annotation) = VARIANT SET REQUIRES PREDICATE LOOP_ASSIGNS LOGIC LABEL INVARIANT GHOST ENSURES DECREASES AXIOM ASSIGNS ASSERT
first(annot) = VARIANT SET REQUIRES PREDICATE LOOP_ASSIGNS LOGIC LABEL INVARIANT GHOST EOF ENSURES DECREASES AXIOM ASSIGNS ASSERT
follow(variant) = EOF
follow(type_specifier) = IDENTIFIER
follow(stars) = STAR IDENTIFIER
follow(spec) = EOF
follow(relation) = VALID_RANGE VALID_INDEX VALID TRUE STAR SEPARATED RESULT PLUS OLD NULL NOT MINUS LPAR IF IDENTIFIER FULLSEPARATED FRESH FORALL FALSE EXISTS CONSTANT BLOCK_LENGTH BASE_ADDR AT AMP
follow(pre_condition) = EOF ENSURES DECREASES ASSIGNS
follow(post_condition) = EOF DECREASES
follow(parameters) = RPAR
follow(parameter) = SEMICOLON RPAR COMMA
follow(ne_parameters) = SEMICOLON RPAR
follow(ne_loop_effects) = VARIANT EOF
follow(ne_lexpr_list) = RPAR
follow(loop_effects) = VARIANT EOF
follow(loop_annot) = EOF
follow(logic_type_not_id) = STAR RPAR IDENTIFIER
follow(logic_type) = IDENTIFIER
follow(locations) = VARIANT EOF ENSURES DECREASES
follow(location) = VARIANT EOF ENSURES DECREASES COMMA
follow(lexpr_option) = RSQUARE DOTDOT
follow(lexpr_list) = RPAR
follow(lexpr) = VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND
follow(invariant) = VARIANT LOOP_ASSIGNS EOF
follow(init_declarator_list) = EOF COMMA
follow(init_declarator) = EOF COMMA
follow(ghost_lvalue) = EQUAL
follow(ghost_decl) = EOF
follow(effects) = EOF ENSURES DECREASES
follow(direct_declarator) = LSQUARE EQUAL EOF COMMA
follow(decreases) = EOF
follow(declarator) = EQUAL EOF COMMA
follow(decl) = EOF
follow(c_initializer_list) = RBRACE COMMA
follow(c_initializer) = RBRACE EOF COMMA
follow(annotation) = EOF
follow(annot) = #
Built an LR(0) automaton with 281 states.
The grammar is not SLR(1) -- 27 states have a conflict.
Built an LR(1) automaton with 281 states.
421 shift/reduce conflicts were silently solved.
78 out of 281 states are represented.
0 out of 123 symbols keep track of their start position.
0 out of 123 symbols keep track of their end position.
87 out of 281 states have a default reduction.
84 out of 148 productions exploit shiftreduce optimization.
0 out of 281 states can peek at an error.
751 functions before inlining, 100 functions after inlining.
