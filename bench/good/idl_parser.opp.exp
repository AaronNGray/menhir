Warning: you are using the standard library and/or the %inline keyword. We
recommend switching on --infer in order to avoid obscure type error messages.
%{

open Full_idl_syntax

let find_attr attr attrs =
  let at = AttrNoArgs (Id.id_of_string attr) in
  List.exists (fun a -> a == at) attrs
let ifaceMemWithAttrs mem attrs = match mem with
  | Attribute(p, _, ro, s, t, id) -> Attribute(p, attrs, ro, s, t, id)
  | Operation(p, _, s, q, ret, id, args) -> 
    let q' = if (find_attr "getter" attrs) then {q with getter = true} else q in
    let q' = if (find_attr "setter" attrs) then {q' with setter = true} else q' in
    Operation(p, attrs, s, q', ret, id, args)
  | ConstMember(p, _, t, id, value) -> ConstMember(p, attrs, t, id, value)
  | Stringifier(p, _) -> Stringifier(p, attrs)
let defWithAttrs def attrs = match def with
  | Module(p, _, id, defs) -> Module(p, attrs, id, defs)
  | Typedef(p, _, typ, id) -> Typedef(p, attrs, typ, id)
  | Interface(p, _, id, parent, mems, callback) -> Interface(p, attrs, id, parent, mems, callback)
  | ForwardInterface(p, _, id) -> ForwardInterface(p, attrs, id)
  | Exception(p, _, id, parent, mems) -> Exception(p, attrs, id, parent, mems)
  | Implements(p, _, id, impl) -> Implements(p, attrs, id, impl)
  | Const(p, _, typ, id, value) -> Const(p, attrs, typ, id, value)
  | Dictionary(p, _, id, parent, mems) -> Dictionary(p, attrs, id, parent, mems)
  | PartialInterface(p, _, id, mems) -> PartialInterface(p, attrs, id, mems)
  | Include(p, _, file) -> Include(p, attrs, file)
  | Callback(p, _, id, args, ret) -> Callback(p, attrs, id, args, ret)
  | Enum(p, _, id, items) -> Enum(p, attrs, id, items)
let noQualifiers = {static=false;getter=false;setter=false;
                    creator=false;deleter=false;legacyCaller=false}
%}
%start idlFile
%token VOID
%token <string> UUID
%token UNSIGNED
%token UNSAFE
%token UNFORGEABLE
%token TYPEDEF
%token TRUE
%token TREATNULLAS
%token TILDE
%token STRINGIFIER
%token <string> STRING
%token STATIC
%token SIZE_IS
%token SHORT
%token SETTER
%token SEQUENCE
%token SEMI
%token SCRIPTABLE
%token RPAREN
%token RETVAL
%token REPLACEABLENAMEDPROPERTIES
%token REPLACEABLE
%token READONLY
%token RBRACK
%token RBRACE
%token RANGLE
%token RAISES
%token QUES
%token QUERYINTERFACETYPE
%token QUERYELEMENTATTYPE
%token PUTFORWARDS
%token PRIVATEBROWSINGCHECK
%token PARTIAL
%token OVERRIDEBUILTINS
%token OUT
%token OPTIONAL_ARGC
%token OPTIONAL
%token OCTET
%token NOTXPCOM
%token NOSCRIPT
%token NOINTERFACEOBJECT
%token <string * string> NATIVE
%token NAMEDCONSTRUCTOR
%token MODULE
%token LRBRACK
%token LPAREN
%token LONG
%token LEGACYCALLER
%token LBRACK
%token LBRACE
%token LANGLE
%token <int64> INTLIT
%token INTERFACE
%token INOUT
%token INHERIT
%token INCLUDE
%token IN
%token IMPLICIT_JSCONTEXT
%token IMPLEMENTS
%token <Id.t> ID
%token GETTER
%token FUNCTIONONLY
%token <float> FLOATLIT
%token FLOAT
%token FALSE
%token EXCEPTION
%token EQUALS
%token EOF
%token ENUM
%token DOUBLE
%token DOTDOTDOT
%token DICTIONARY
%token DELETER
%token CREATOR
%token CONSTRUCTOR
%token CONST
%token COMMA
%token COLONCOLON
%token COLON
%token CLAMP
%token CALLBACK
%token BYTE
%token BOOLEAN
%token ATTRIBUTE
%token ANY
%token ALLOWANY
%token BAR
%token XOR
%token AND
%token SHRIGHT
%token SHLEFT
%token PLUS
%token MINUS
%token TIMES
%token MOD
%token DIVIDE
%left BAR 
%left XOR 
%left AND 
%nonassoc SHRIGHT SHLEFT 
%left PLUS MINUS 
%left TIMES MOD DIVIDE 
%type <Full_idl_syntax.definition list> idlFile
%%

partialInterface:
| _1 = PARTIAL _2 = INTERFACE name = ID _10 = LBRACE x0 = interfaceMembers _30 = RBRACE _5 = SEMI
    {let mems =
  let _3 = _30 in
  let x = x0 in
  let _1 = _10 in
      ( x )
in
let _startpos = _startpos__1_ in
      ( PartialInterface(_startpos, [], name, mems) )}

typedef:
| _1 = TYPEDEF attrs = extendedAttributeList ty = typeDecl id = ID _5 = SEMI
    {let _startpos = _startpos__1_ in
      ( Typedef (_startpos, [], ty, id) )}
| nat = NATIVE _2 = SEMI
    {let _startpos = _startpos_nat_ in
      ( let (id, natid) = nat in Typedef (_startpos, [], Native natid, Id.id_of_string id) )}

loption_separated_nonempty_list_COMMA_expr__:
| 
    {    ( [] )}
| x = separated_nonempty_list_COMMA_expr_
    {    ( x )}

loption_separated_nonempty_list_COMMA_argument__:
| 
    {    ( [] )}
| x = separated_nonempty_list_COMMA_argument_
    {    ( x )}

loption_separated_nonempty_list_COMMA_ID__:
| 
    {    ( [] )}
| x = separated_nonempty_list_COMMA_ID_
    {    ( x )}

ilist_extAttrIfaceMemList_interfaceMember__:
| 
    {    ( [] )}
| x = extAttrIfaceMemList_interfaceMember_ xs = ilist_extAttrIfaceMemList_interfaceMember__
    {    ( x :: xs )}

ilist_extAttrExnMemList_exceptionMember__:
| 
    {    ( [] )}
| x = extAttrExnMemList_exceptionMember_ xs = ilist_extAttrExnMemList_exceptionMember__
    {    ( x :: xs )}

ilist_extAttrDictList_dictionaryMember__:
| 
    {    ( [] )}
| x = extAttrDictList_dictionaryMember_ xs = ilist_extAttrDictList_dictionaryMember__
    {    ( x :: xs )}

ilist_extAttrDefList_definition__:
| 
    {    ( [] )}
| x = extAttrDefList_definition_ xs = ilist_extAttrDefList_definition__
    {    ( x :: xs )}

ilist_definition_:
| 
    {    ( [] )}
| x = definition xs = ilist_definition_
    {    ( x :: xs )}

iseparated_nonempty_list_COMMA_extendedAttribute_:
| x = extendedAttribute
    {    ( [ x ] )}
| x = extendedAttribute _2 = COMMA xs = iseparated_nonempty_list_COMMA_extendedAttribute_
    {    ( x :: xs )}

iseparated_nonempty_list_COMMA_STRING_:
| x = STRING
    {    ( [ x ] )}
| x = STRING _2 = COMMA xs = iseparated_nonempty_list_COMMA_STRING_
    {    ( x :: xs )}

extAttrIfaceMemList_interfaceMember_:
| attrs = extendedAttributeList x = interfaceMember
    {                                    ( ifaceMemWithAttrs x attrs )}

extAttrExnMemList_exceptionMember_:
| attrs = extendedAttributeList x = exceptionMember
    {                                    ( ifaceMemWithAttrs x attrs )}

extAttrArgList_optionalOrRequiredArgument_:
| attrs = extendedAttributeList x = optionalOrRequiredArgument
    {                                    ( (attrs, x) )}

extAttrDefList_definition_:
| attrs = extendedAttributeList x = definition
    {                                    ( defWithAttrs x attrs )}

extAttrDictList_dictionaryMember_:
| attrs = extendedAttributeList x = dictionaryMember
    {                                    ( ifaceMemWithAttrs x attrs )}

definitions:
| defs = ilist_extAttrDefList_definition__
    {                                           ( defs )}

definition:
| _1 = callbackOrInterface
    {                        ( _1 )}
| _1 = partialInterface
    {                     ( _1 )}
| _1 = dictionary
    {               ( _1 )}
| _1 = exceptionDef
    {                 ( _1 )}
| _1 = enum
    {         ( _1 )}
| _1 = typedef
    {            ( _1 )}
| _1 = implementsStatement
    {                        ( _1 )}
| _1 = INCLUDE _2 = STRING
    {let _startpos = _startpos__1_ in
                   ( Include(_startpos, [], _2) )}
| _1 = MODULE name = ID _10 = LBRACE x0 = ilist_definition_ _30 = RBRACE _4 = SEMI
    {let defs =
  let _3 = _30 in
  let x = x0 in
  let _1 = _10 in
      ( x )
in
let _startpos = _startpos__1_ in
    ( Module (_startpos, [], name, defs) )}
| _1 = INTERFACE _2 = ID _3 = SEMI
    {let _startpos = _startpos__1_ in
                      ( ForwardInterface (_startpos, [], _2) )}
| c = const
    {            ( let (p, m, t, id, e) = c in Const(p,m,t,id,e) )}

callbackOrInterface:
| _1 = CALLBACK _2 = callbackRestOrInterface
    {                                     ( _2 )}
| _1 = interface
    {              ( _1 )}

callbackRestOrInterface:
| _1 = callbackRest
    {                 ( _1 )}
| _1 = interface
    {let _startpos = _startpos__1_ in
              ( 
    match _1 with
    | Interface(_, id, nameOpt, members, metas, _) -> 
      Interface(_startpos, id, nameOpt, members, metas, IsCallbackInterface)
    | _ -> failwith "Impossible"
  )}

callbackRest:
| _10 = CONSTRUCTOR _2 = EQUALS ret = returnType _11 = LPAREN x0 = argumentList _30 = RPAREN _5 = SEMI
    {let args =
  let _3 = _30 in
  let x = x0 in
  let _1 = _11 in
      ( x )
in
let name =
  let _1 = _10 in
                  ( Id.id_of_string "Constructor" )
in
let _startpos_name_ = _startpos__10_ in
let _startpos = _startpos_name_ in
      ( Callback(_startpos, [], name, args, ret) )}
| _10 = NOTXPCOM _2 = EQUALS ret = returnType _11 = LPAREN x0 = argumentList _30 = RPAREN _5 = SEMI
    {let args =
  let _3 = _30 in
  let x = x0 in
  let _1 = _11 in
      ( x )
in
let name =
  let _1 = _10 in
               ( Id.id_of_string "notxpcom" )
in
let _startpos_name_ = _startpos__10_ in
let _startpos = _startpos_name_ in
      ( Callback(_startpos, [], name, args, ret) )}
| _10 = RETVAL _2 = EQUALS ret = returnType _11 = LPAREN x0 = argumentList _30 = RPAREN _5 = SEMI
    {let args =
  let _3 = _30 in
  let x = x0 in
  let _1 = _11 in
      ( x )
in
let name =
  let _1 = _10 in
             ( Id.id_of_string "retval" )
in
let _startpos_name_ = _startpos__10_ in
let _startpos = _startpos_name_ in
      ( Callback(_startpos, [], name, args, ret) )}
| _10 = UNSAFE _2 = EQUALS ret = returnType _11 = LPAREN x0 = argumentList _30 = RPAREN _5 = SEMI
    {let args =
  let _3 = _30 in
  let x = x0 in
  let _1 = _11 in
      ( x )
in
let name =
  let _1 = _10 in
             ( Id.id_of_string "unsafe" )
in
let _startpos_name_ = _startpos__10_ in
let _startpos = _startpos_name_ in
      ( Callback(_startpos, [], name, args, ret) )}
| _10 = PRIVATEBROWSINGCHECK _2 = EQUALS ret = returnType _11 = LPAREN x0 = argumentList _30 = RPAREN _5 = SEMI
    {let args =
  let _3 = _30 in
  let x = x0 in
  let _1 = _11 in
      ( x )
in
let name =
  let _1 = _10 in
                           ( Id.id_of_string "PrivateBrowsingCheck" )
in
let _startpos_name_ = _startpos__10_ in
let _startpos = _startpos_name_ in
      ( Callback(_startpos, [], name, args, ret) )}
| _10 = QUERYINTERFACETYPE _2 = EQUALS ret = returnType _11 = LPAREN x0 = argumentList _30 = RPAREN _5 = SEMI
    {let args =
  let _3 = _30 in
  let x = x0 in
  let _1 = _11 in
      ( x )
in
let name =
  let _1 = _10 in
                         ( Id.id_of_string "QueryInterfaceType" )
in
let _startpos_name_ = _startpos__10_ in
let _startpos = _startpos_name_ in
      ( Callback(_startpos, [], name, args, ret) )}
| _1000 = CREATOR _2 = EQUALS ret = returnType _10 = LPAREN x0 = argumentList _30 = RPAREN _5 = SEMI
    {let args =
  let _3 = _30 in
  let x = x0 in
  let _1 = _10 in
      ( x )
in
let name =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                  ( Id.id_of_string "creator" )
    in
                             ( id )
  in
                                      ( id )
in
let _startpos_name_ = _startpos__1000_ in
let _startpos = _startpos_name_ in
      ( Callback(_startpos, [], name, args, ret) )}
| _1000 = GETTER _2 = EQUALS ret = returnType _10 = LPAREN x0 = argumentList _30 = RPAREN _5 = SEMI
    {let args =
  let _3 = _30 in
  let x = x0 in
  let _1 = _10 in
      ( x )
in
let name =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                 ( Id.id_of_string "getter" )
    in
                             ( id )
  in
                                      ( id )
in
let _startpos_name_ = _startpos__1000_ in
let _startpos = _startpos_name_ in
      ( Callback(_startpos, [], name, args, ret) )}
| _1000 = SETTER _2 = EQUALS ret = returnType _10 = LPAREN x0 = argumentList _30 = RPAREN _5 = SEMI
    {let args =
  let _3 = _30 in
  let x = x0 in
  let _1 = _10 in
      ( x )
in
let name =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                 ( Id.id_of_string "setter" )
    in
                             ( id )
  in
                                      ( id )
in
let _startpos_name_ = _startpos__1000_ in
let _startpos = _startpos_name_ in
      ( Callback(_startpos, [], name, args, ret) )}
| id000 = ID _2 = EQUALS ret = returnType _10 = LPAREN x0 = argumentList _30 = RPAREN _5 = SEMI
    {let args =
  let _3 = _30 in
  let x = x0 in
  let _1 = _10 in
      ( x )
in
let name =
  let id00 = id000 in
  let id =
    let id0 = id00 in
    let id =
      let id = id0 in
                ( id )
    in
                                                 ( id )
  in
                                      ( id )
in
let _startpos_name_ = _startpos_id000_ in
let _startpos = _startpos_name_ in
      ( Callback(_startpos, [], name, args, ret) )}
| _1000 = DICTIONARY _2 = EQUALS ret = returnType _10 = LPAREN x0 = argumentList _30 = RPAREN _5 = SEMI
    {let args =
  let _3 = _30 in
  let x = x0 in
  let _1 = _10 in
      ( x )
in
let name =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                     ( Id.id_of_string "dictionary" )
    in
                                                 ( id )
  in
                                      ( id )
in
let _startpos_name_ = _startpos__1000_ in
let _startpos = _startpos_name_ in
      ( Callback(_startpos, [], name, args, ret) )}
| _1000 = PARTIAL _2 = EQUALS ret = returnType _10 = LPAREN x0 = argumentList _30 = RPAREN _5 = SEMI
    {let args =
  let _3 = _30 in
  let x = x0 in
  let _1 = _10 in
      ( x )
in
let name =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                  ( Id.id_of_string "partial" )
    in
                                                 ( id )
  in
                                      ( id )
in
let _startpos_name_ = _startpos__1000_ in
let _startpos = _startpos_name_ in
      ( Callback(_startpos, [], name, args, ret) )}

interface:
| _1 = INTERFACE name = ID inherits = inheritance _10 = LBRACE x0 = interfaceMembers _30 = RBRACE _5 = SEMI
    {let mems =
  let _3 = _30 in
  let x = x0 in
  let _1 = _10 in
      ( x )
in
let _startpos = _startpos__1_ in
      ( Interface(_startpos, [], name, inherits, mems, IsNormalInterface) )}

interfaceMembers:
| mems = ilist_extAttrIfaceMemList_interfaceMember__
    {                                                     ( mems )}

interfaceMember:
| c = const
    {            ( let (p,m,t,id,c) = c in ConstMember(p,m,t,id,c) )}
| _1 = attributeOrOperation
    {                         ( _1 )}

dictionary:
| _1 = DICTIONARY name = ID inherits = inheritance _10 = LBRACE x0 = dictionaryMembers _30 = RBRACE _5 = SEMI
    {let defs =
  let _3 = _30 in
  let x = x0 in
  let _1 = _10 in
      ( x )
in
let _startpos = _startpos__1_ in
      ( Dictionary(_startpos, [], name, inherits, defs) )}

dictionaryMembers:
| mems = ilist_extAttrDictList_dictionaryMember__
    {                                                  ( mems )}

dictionaryMember:
| ty = typeDecl _10 = CONSTRUCTOR _4 = SEMI
    {let _3 =
      ( None )
in
let name =
  let _1 = _10 in
                  ( Id.id_of_string "Constructor" )
in
let _startpos = _startpos_ty_ in
      ( Attribute(_startpos, [], NoReadOnly, IsNormal, ty, name) )}
| ty = typeDecl _10 = CONSTRUCTOR x0 = default _4 = SEMI
    {let _3 =
  let x = x0 in
      ( Some x )
in
let name =
  let _1 = _10 in
                  ( Id.id_of_string "Constructor" )
in
let _startpos = _startpos_ty_ in
      ( Attribute(_startpos, [], NoReadOnly, IsNormal, ty, name) )}
| ty = typeDecl _10 = NOTXPCOM _4 = SEMI
    {let _3 =
      ( None )
in
let name =
  let _1 = _10 in
               ( Id.id_of_string "notxpcom" )
in
let _startpos = _startpos_ty_ in
      ( Attribute(_startpos, [], NoReadOnly, IsNormal, ty, name) )}
| ty = typeDecl _10 = NOTXPCOM x0 = default _4 = SEMI
    {let _3 =
  let x = x0 in
      ( Some x )
in
let name =
  let _1 = _10 in
               ( Id.id_of_string "notxpcom" )
in
let _startpos = _startpos_ty_ in
      ( Attribute(_startpos, [], NoReadOnly, IsNormal, ty, name) )}
| ty = typeDecl _10 = RETVAL _4 = SEMI
    {let _3 =
      ( None )
in
let name =
  let _1 = _10 in
             ( Id.id_of_string "retval" )
in
let _startpos = _startpos_ty_ in
      ( Attribute(_startpos, [], NoReadOnly, IsNormal, ty, name) )}
| ty = typeDecl _10 = RETVAL x0 = default _4 = SEMI
    {let _3 =
  let x = x0 in
      ( Some x )
in
let name =
  let _1 = _10 in
             ( Id.id_of_string "retval" )
in
let _startpos = _startpos_ty_ in
      ( Attribute(_startpos, [], NoReadOnly, IsNormal, ty, name) )}
| ty = typeDecl _10 = UNSAFE _4 = SEMI
    {let _3 =
      ( None )
in
let name =
  let _1 = _10 in
             ( Id.id_of_string "unsafe" )
in
let _startpos = _startpos_ty_ in
      ( Attribute(_startpos, [], NoReadOnly, IsNormal, ty, name) )}
| ty = typeDecl _10 = UNSAFE x0 = default _4 = SEMI
    {let _3 =
  let x = x0 in
      ( Some x )
in
let name =
  let _1 = _10 in
             ( Id.id_of_string "unsafe" )
in
let _startpos = _startpos_ty_ in
      ( Attribute(_startpos, [], NoReadOnly, IsNormal, ty, name) )}
| ty = typeDecl _10 = PRIVATEBROWSINGCHECK _4 = SEMI
    {let _3 =
      ( None )
in
let name =
  let _1 = _10 in
                           ( Id.id_of_string "PrivateBrowsingCheck" )
in
let _startpos = _startpos_ty_ in
      ( Attribute(_startpos, [], NoReadOnly, IsNormal, ty, name) )}
| ty = typeDecl _10 = PRIVATEBROWSINGCHECK x0 = default _4 = SEMI
    {let _3 =
  let x = x0 in
      ( Some x )
in
let name =
  let _1 = _10 in
                           ( Id.id_of_string "PrivateBrowsingCheck" )
in
let _startpos = _startpos_ty_ in
      ( Attribute(_startpos, [], NoReadOnly, IsNormal, ty, name) )}
| ty = typeDecl _10 = QUERYINTERFACETYPE _4 = SEMI
    {let _3 =
      ( None )
in
let name =
  let _1 = _10 in
                         ( Id.id_of_string "QueryInterfaceType" )
in
let _startpos = _startpos_ty_ in
      ( Attribute(_startpos, [], NoReadOnly, IsNormal, ty, name) )}
| ty = typeDecl _10 = QUERYINTERFACETYPE x0 = default _4 = SEMI
    {let _3 =
  let x = x0 in
      ( Some x )
in
let name =
  let _1 = _10 in
                         ( Id.id_of_string "QueryInterfaceType" )
in
let _startpos = _startpos_ty_ in
      ( Attribute(_startpos, [], NoReadOnly, IsNormal, ty, name) )}
| ty = typeDecl _1000 = CREATOR _4 = SEMI
    {let _3 =
      ( None )
in
let name =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                  ( Id.id_of_string "creator" )
    in
                             ( id )
  in
                                      ( id )
in
let _startpos = _startpos_ty_ in
      ( Attribute(_startpos, [], NoReadOnly, IsNormal, ty, name) )}
| ty = typeDecl _1000 = CREATOR x0 = default _4 = SEMI
    {let _3 =
  let x = x0 in
      ( Some x )
in
let name =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                  ( Id.id_of_string "creator" )
    in
                             ( id )
  in
                                      ( id )
in
let _startpos = _startpos_ty_ in
      ( Attribute(_startpos, [], NoReadOnly, IsNormal, ty, name) )}
| ty = typeDecl _1000 = GETTER _4 = SEMI
    {let _3 =
      ( None )
in
let name =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                 ( Id.id_of_string "getter" )
    in
                             ( id )
  in
                                      ( id )
in
let _startpos = _startpos_ty_ in
      ( Attribute(_startpos, [], NoReadOnly, IsNormal, ty, name) )}
| ty = typeDecl _1000 = GETTER x0 = default _4 = SEMI
    {let _3 =
  let x = x0 in
      ( Some x )
in
let name =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                 ( Id.id_of_string "getter" )
    in
                             ( id )
  in
                                      ( id )
in
let _startpos = _startpos_ty_ in
      ( Attribute(_startpos, [], NoReadOnly, IsNormal, ty, name) )}
| ty = typeDecl _1000 = SETTER _4 = SEMI
    {let _3 =
      ( None )
in
let name =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                 ( Id.id_of_string "setter" )
    in
                             ( id )
  in
                                      ( id )
in
let _startpos = _startpos_ty_ in
      ( Attribute(_startpos, [], NoReadOnly, IsNormal, ty, name) )}
| ty = typeDecl _1000 = SETTER x0 = default _4 = SEMI
    {let _3 =
  let x = x0 in
      ( Some x )
in
let name =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                 ( Id.id_of_string "setter" )
    in
                             ( id )
  in
                                      ( id )
in
let _startpos = _startpos_ty_ in
      ( Attribute(_startpos, [], NoReadOnly, IsNormal, ty, name) )}
| ty = typeDecl id000 = ID _4 = SEMI
    {let _3 =
      ( None )
in
let name =
  let id00 = id000 in
  let id =
    let id0 = id00 in
    let id =
      let id = id0 in
                ( id )
    in
                                                 ( id )
  in
                                      ( id )
in
let _startpos = _startpos_ty_ in
      ( Attribute(_startpos, [], NoReadOnly, IsNormal, ty, name) )}
| ty = typeDecl id000 = ID x0 = default _4 = SEMI
    {let _3 =
  let x = x0 in
      ( Some x )
in
let name =
  let id00 = id000 in
  let id =
    let id0 = id00 in
    let id =
      let id = id0 in
                ( id )
    in
                                                 ( id )
  in
                                      ( id )
in
let _startpos = _startpos_ty_ in
      ( Attribute(_startpos, [], NoReadOnly, IsNormal, ty, name) )}
| ty = typeDecl _1000 = DICTIONARY _4 = SEMI
    {let _3 =
      ( None )
in
let name =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                     ( Id.id_of_string "dictionary" )
    in
                                                 ( id )
  in
                                      ( id )
in
let _startpos = _startpos_ty_ in
      ( Attribute(_startpos, [], NoReadOnly, IsNormal, ty, name) )}
| ty = typeDecl _1000 = DICTIONARY x0 = default _4 = SEMI
    {let _3 =
  let x = x0 in
      ( Some x )
in
let name =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                     ( Id.id_of_string "dictionary" )
    in
                                                 ( id )
  in
                                      ( id )
in
let _startpos = _startpos_ty_ in
      ( Attribute(_startpos, [], NoReadOnly, IsNormal, ty, name) )}
| ty = typeDecl _1000 = PARTIAL _4 = SEMI
    {let _3 =
      ( None )
in
let name =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                  ( Id.id_of_string "partial" )
    in
                                                 ( id )
  in
                                      ( id )
in
let _startpos = _startpos_ty_ in
      ( Attribute(_startpos, [], NoReadOnly, IsNormal, ty, name) )}
| ty = typeDecl _1000 = PARTIAL x0 = default _4 = SEMI
    {let _3 =
  let x = x0 in
      ( Some x )
in
let name =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                  ( Id.id_of_string "partial" )
    in
                                                 ( id )
  in
                                      ( id )
in
let _startpos = _startpos_ty_ in
      ( Attribute(_startpos, [], NoReadOnly, IsNormal, ty, name) )}

default:
| _1 = EQUALS _2 = constValue
    {                      ( _2 )}

exceptionDef:
| _1 = EXCEPTION name = ID inherits = inheritance _10 = LBRACE x0 = exceptionMembers _30 = RBRACE _5 = SEMI
    {let mems =
  let _3 = _30 in
  let x = x0 in
  let _1 = _10 in
      ( x )
in
let _startpos = _startpos__1_ in
      ( Exception(_startpos, [], name, inherits, mems) )}

exceptionMembers:
| mems = ilist_extAttrExnMemList_exceptionMember__
    {                                                   ( mems )}

inheritance:
| _1 = COLON _2 = scopedName
    {                     ( Some (_2) )}
| 
    {    ( None )}

implementsStatement:
| _1 = ID _2 = IMPLEMENTS _3 = ID _4 = SEMI
    {let _startpos = _startpos__1_ in
      ( Implements(_startpos, [], _1, _3) )}

stringifierAttributeOrOperation:
| _1 = attribute
    {let _startpos = _startpos__1_ in
              ( 
    match _1 with
    | Attribute(_, meta, readonly, _, ty, id) -> Attribute(_startpos, meta, readonly, IsStringifier, ty, id)
    | _ -> failwith "Impossible"
  )}
| _1 = operation
    {let _startpos = _startpos__1_ in
              ( 
    match _1 with
    | Operation(_, meta, _, quals, ret, id, args) -> Operation(_startpos, meta, IsStringifier, quals, ret, id, args)
    | _ -> failwith "Impossible"
  )}
| _1 = SEMI
    {let _startpos = _startpos__1_ in
         ( Stringifier(_startpos, []) )}

operation:
| _10 = STATIC op = operationRest
    {let q =
  let _1 = _10 in
             ( {noQualifiers with static=true} )
in
let _startpos_q_ = _startpos__10_ in
let _startpos = _startpos_q_ in
                                  ( op _startpos q )}
| _20 = GETTER op = operationRest
    {let q =
  let _2 = _20 in
  let legacy =
        ( false )
  in
                                           ( {noQualifiers with legacyCaller=legacy; getter=true} )
in
let _startpos_q_ = _startpos__20_ in
let _startpos = _startpos_q_ in
                                  ( op _startpos q )}
| _100 = LEGACYCALLER _20 = GETTER op = operationRest
    {let q =
  let _2 = _20 in
  let _10 = _100 in
  let legacy =
    let _1 = _10 in
        ( true )
  in
                                           ( {noQualifiers with legacyCaller=legacy; getter=true} )
in
let _startpos_q_ = _startpos__100_ in
let _startpos = _startpos_q_ in
                                  ( op _startpos q )}
| _10 = SETTER op = operationRest
    {let q =
  let _1 = _10 in
  let creator =
        ( false )
  in
                                       ( {noQualifiers with setter=true; creator=creator} )
in
let _startpos_q_ = _startpos__10_ in
let _startpos = _startpos_q_ in
                                  ( op _startpos q )}
| _11 = SETTER _100 = CREATOR op = operationRest
    {let q =
  let _10 = _100 in
  let _1 = _11 in
  let creator =
    let _1 = _10 in
        ( true )
  in
                                       ( {noQualifiers with setter=true; creator=creator} )
in
let _startpos_q_ = _startpos__11_ in
let _startpos = _startpos_q_ in
                                  ( op _startpos q )}
| _10 = CREATOR op = operationRest
    {let q =
  let _1 = _10 in
              ( {noQualifiers with creator=true} )
in
let _startpos_q_ = _startpos__10_ in
let _startpos = _startpos_q_ in
                                  ( op _startpos q )}
| _10 = DELETER op = operationRest
    {let q =
  let _1 = _10 in
              ( {noQualifiers with deleter=true} )
in
let _startpos_q_ = _startpos__10_ in
let _startpos = _startpos_q_ in
                                  ( op _startpos q )}
| op = operationRest
    {let q =
      ( noQualifiers )
in
let _startpos_q_ = _endpos__0_ in
let _startpos = _startpos_q_ in
                                  ( op _startpos q )}

raisesClause:
| _1 = RAISES _10 = LPAREN xs00 = loption_separated_nonempty_list_COMMA_ID__ _30 = RPAREN
    {let _2 =
  let _3 = _30 in
  let xs0 = xs00 in
  let _1 = _10 in
  let x =
    let xs = xs0 in
        ( xs )
  in
      ( x )
in
                                                                ( () )}

operationRest:
| ret = returnType name = option_identOrKeyword_ _10 = LPAREN x0 = argumentList _30 = RPAREN _4 = option_raisesClause_ _5 = SEMI
    {let args =
  let _3 = _30 in
  let x = x0 in
  let _1 = _10 in
      ( x )
in
      ( (fun start quals -> Operation(start, [], IsNormal, quals, ret, name, args)) )}

typeDecl:
| _1 = singleType
    {               ( _1 )}

singleType:
| _1 = nonAnyType
    {               ( _1 )}
| _1 = ANY _2 = typeSuffixStartingWithArray
    {                                    ( _2 Any )}

unsignedIntegerType:
| ty = integerType
    {let unsigned =
      ( false )
in
                                               ( ty (if unsigned then Unsigned else NoUnsigned) )}
| _10 = UNSIGNED ty = integerType
    {let unsigned =
  let _1 = _10 in
      ( true )
in
                                               ( ty (if unsigned then Unsigned else NoUnsigned) )}

option_raisesClause_:
| 
    {    ( None )}
| x = raisesClause
    {    ( Some x )}

option_default_:
| 
    {    ( None )}
| x = default
    {    ( Some x )}

option_INHERIT_:
| 
    {    ( None )}
| x = INHERIT
    {    ( Some x )}

separated_nonempty_list_COMMA_expr_:
| x = expr
    {    ( [ x ] )}
| x = expr _2 = COMMA xs = separated_nonempty_list_COMMA_expr_
    {    ( x :: xs )}

separated_nonempty_list_COMMA_argument_:
| x = argument
    {    ( [ x ] )}
| x = argument _2 = COMMA xs = separated_nonempty_list_COMMA_argument_
    {    ( x :: xs )}

separated_nonempty_list_COMMA_ID_:
| x = ID
    {    ( [ x ] )}
| x = ID _2 = COMMA xs = separated_nonempty_list_COMMA_ID_
    {    ( x :: xs )}

scopedName:
| n = absoluteScopedName
    {                         ( n )}
| n = relativeScopedName
    {                         ( n )}

absoluteScopedName:
| _1 = COLONCOLON _10 = CONSTRUCTOR parts = scopedNameParts
    {let id =
  let _1 = _10 in
                  ( Id.id_of_string "Constructor" )
in
                                                       ( AbsoluteName (id::parts) )}
| _1 = COLONCOLON _10 = NOTXPCOM parts = scopedNameParts
    {let id =
  let _1 = _10 in
               ( Id.id_of_string "notxpcom" )
in
                                                       ( AbsoluteName (id::parts) )}
| _1 = COLONCOLON _10 = RETVAL parts = scopedNameParts
    {let id =
  let _1 = _10 in
             ( Id.id_of_string "retval" )
in
                                                       ( AbsoluteName (id::parts) )}
| _1 = COLONCOLON _10 = UNSAFE parts = scopedNameParts
    {let id =
  let _1 = _10 in
             ( Id.id_of_string "unsafe" )
in
                                                       ( AbsoluteName (id::parts) )}
| _1 = COLONCOLON _10 = PRIVATEBROWSINGCHECK parts = scopedNameParts
    {let id =
  let _1 = _10 in
                           ( Id.id_of_string "PrivateBrowsingCheck" )
in
                                                       ( AbsoluteName (id::parts) )}
| _1 = COLONCOLON _10 = QUERYINTERFACETYPE parts = scopedNameParts
    {let id =
  let _1 = _10 in
                         ( Id.id_of_string "QueryInterfaceType" )
in
                                                       ( AbsoluteName (id::parts) )}
| _1 = COLONCOLON _1000 = CREATOR parts = scopedNameParts
    {let id =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                  ( Id.id_of_string "creator" )
    in
                             ( id )
  in
                                      ( id )
in
                                                       ( AbsoluteName (id::parts) )}
| _1 = COLONCOLON _1000 = GETTER parts = scopedNameParts
    {let id =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                 ( Id.id_of_string "getter" )
    in
                             ( id )
  in
                                      ( id )
in
                                                       ( AbsoluteName (id::parts) )}
| _1 = COLONCOLON _1000 = SETTER parts = scopedNameParts
    {let id =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                 ( Id.id_of_string "setter" )
    in
                             ( id )
  in
                                      ( id )
in
                                                       ( AbsoluteName (id::parts) )}
| _1 = COLONCOLON id000 = ID parts = scopedNameParts
    {let id =
  let id00 = id000 in
  let id =
    let id0 = id00 in
    let id =
      let id = id0 in
                ( id )
    in
                                                 ( id )
  in
                                      ( id )
in
                                                       ( AbsoluteName (id::parts) )}
| _1 = COLONCOLON _1000 = DICTIONARY parts = scopedNameParts
    {let id =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                     ( Id.id_of_string "dictionary" )
    in
                                                 ( id )
  in
                                      ( id )
in
                                                       ( AbsoluteName (id::parts) )}
| _1 = COLONCOLON _1000 = PARTIAL parts = scopedNameParts
    {let id =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                  ( Id.id_of_string "partial" )
    in
                                                 ( id )
  in
                                      ( id )
in
                                                       ( AbsoluteName (id::parts) )}

relativeScopedName:
| _10 = CONSTRUCTOR parts = scopedNameParts
    {let id =
  let _1 = _10 in
                  ( Id.id_of_string "Constructor" )
in
                                            ( RelativeName (id::parts) )}
| _10 = NOTXPCOM parts = scopedNameParts
    {let id =
  let _1 = _10 in
               ( Id.id_of_string "notxpcom" )
in
                                            ( RelativeName (id::parts) )}
| _10 = RETVAL parts = scopedNameParts
    {let id =
  let _1 = _10 in
             ( Id.id_of_string "retval" )
in
                                            ( RelativeName (id::parts) )}
| _10 = UNSAFE parts = scopedNameParts
    {let id =
  let _1 = _10 in
             ( Id.id_of_string "unsafe" )
in
                                            ( RelativeName (id::parts) )}
| _10 = PRIVATEBROWSINGCHECK parts = scopedNameParts
    {let id =
  let _1 = _10 in
                           ( Id.id_of_string "PrivateBrowsingCheck" )
in
                                            ( RelativeName (id::parts) )}
| _10 = QUERYINTERFACETYPE parts = scopedNameParts
    {let id =
  let _1 = _10 in
                         ( Id.id_of_string "QueryInterfaceType" )
in
                                            ( RelativeName (id::parts) )}
| _1000 = CREATOR parts = scopedNameParts
    {let id =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                  ( Id.id_of_string "creator" )
    in
                             ( id )
  in
                                      ( id )
in
                                            ( RelativeName (id::parts) )}
| _1000 = GETTER parts = scopedNameParts
    {let id =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                 ( Id.id_of_string "getter" )
    in
                             ( id )
  in
                                      ( id )
in
                                            ( RelativeName (id::parts) )}
| _1000 = SETTER parts = scopedNameParts
    {let id =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                 ( Id.id_of_string "setter" )
    in
                             ( id )
  in
                                      ( id )
in
                                            ( RelativeName (id::parts) )}
| id000 = ID parts = scopedNameParts
    {let id =
  let id00 = id000 in
  let id =
    let id0 = id00 in
    let id =
      let id = id0 in
                ( id )
    in
                                                 ( id )
  in
                                      ( id )
in
                                            ( RelativeName (id::parts) )}
| _1000 = DICTIONARY parts = scopedNameParts
    {let id =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                     ( Id.id_of_string "dictionary" )
    in
                                                 ( id )
  in
                                      ( id )
in
                                            ( RelativeName (id::parts) )}
| _1000 = PARTIAL parts = scopedNameParts
    {let id =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                  ( Id.id_of_string "partial" )
    in
                                                 ( id )
  in
                                      ( id )
in
                                            ( RelativeName (id::parts) )}

scopedNameParts:
| _1 = COLONCOLON _10 = CONSTRUCTOR parts = scopedNameParts
    {let id =
  let _1 = _10 in
                  ( Id.id_of_string "Constructor" )
in
                                                       ( id::parts )}
| _1 = COLONCOLON _10 = NOTXPCOM parts = scopedNameParts
    {let id =
  let _1 = _10 in
               ( Id.id_of_string "notxpcom" )
in
                                                       ( id::parts )}
| _1 = COLONCOLON _10 = RETVAL parts = scopedNameParts
    {let id =
  let _1 = _10 in
             ( Id.id_of_string "retval" )
in
                                                       ( id::parts )}
| _1 = COLONCOLON _10 = UNSAFE parts = scopedNameParts
    {let id =
  let _1 = _10 in
             ( Id.id_of_string "unsafe" )
in
                                                       ( id::parts )}
| _1 = COLONCOLON _10 = PRIVATEBROWSINGCHECK parts = scopedNameParts
    {let id =
  let _1 = _10 in
                           ( Id.id_of_string "PrivateBrowsingCheck" )
in
                                                       ( id::parts )}
| _1 = COLONCOLON _10 = QUERYINTERFACETYPE parts = scopedNameParts
    {let id =
  let _1 = _10 in
                         ( Id.id_of_string "QueryInterfaceType" )
in
                                                       ( id::parts )}
| _1 = COLONCOLON _1000 = CREATOR parts = scopedNameParts
    {let id =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                  ( Id.id_of_string "creator" )
    in
                             ( id )
  in
                                      ( id )
in
                                                       ( id::parts )}
| _1 = COLONCOLON _1000 = GETTER parts = scopedNameParts
    {let id =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                 ( Id.id_of_string "getter" )
    in
                             ( id )
  in
                                      ( id )
in
                                                       ( id::parts )}
| _1 = COLONCOLON _1000 = SETTER parts = scopedNameParts
    {let id =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                 ( Id.id_of_string "setter" )
    in
                             ( id )
  in
                                      ( id )
in
                                                       ( id::parts )}
| _1 = COLONCOLON id000 = ID parts = scopedNameParts
    {let id =
  let id00 = id000 in
  let id =
    let id0 = id00 in
    let id =
      let id = id0 in
                ( id )
    in
                                                 ( id )
  in
                                      ( id )
in
                                                       ( id::parts )}
| _1 = COLONCOLON _1000 = DICTIONARY parts = scopedNameParts
    {let id =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                     ( Id.id_of_string "dictionary" )
    in
                                                 ( id )
  in
                                      ( id )
in
                                                       ( id::parts )}
| _1 = COLONCOLON _1000 = PARTIAL parts = scopedNameParts
    {let id =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                  ( Id.id_of_string "partial" )
    in
                                                 ( id )
  in
                                      ( id )
in
                                                       ( id::parts )}
| 
    {    ( [] )}

enum:
| _1 = ENUM name = ID _10 = LBRACE x0 = iseparated_nonempty_list_COMMA_STRING_ _30 = RBRACE _4 = SEMI
    {let mems =
  let _3 = _30 in
  let x = x0 in
  let _1 = _10 in
      ( x )
in
let _startpos = _startpos__1_ in
      ( Enum(_startpos, [], name, mems) )}

const:
| _1 = CONST cty = constType id = ID _4 = EQUALS cval = constValue _6 = SEMI
    {let _startpos = _startpos__1_ in
      ( (_startpos, [], cty, id, cval) )}

constValue:
| _1 = expr
    {         ( _1 )}

expr:
| _1 = exprUn
    {           ( _1 )}
| _1 = expr _2 = MOD _3 = expr
    {                  ( BinOp(_1, Mod, _3) )}
| _1 = expr _2 = DIVIDE _3 = expr
    {                     ( BinOp(_1, Divide, _3) )}
| _1 = expr _2 = TIMES _3 = expr
    {                    ( BinOp(_1, Times, _3) )}
| _1 = expr _2 = MINUS _3 = expr
    {                    ( BinOp(_1, Minus, _3) )}
| _1 = expr _2 = PLUS _3 = expr
    {                   ( BinOp(_1, Plus, _3) )}
| _1 = expr _2 = SHRIGHT _3 = expr
    {                      ( BinOp(_1, ShRight, _3) )}
| _1 = expr _2 = SHLEFT _3 = expr
    {                     ( BinOp(_1, ShLeft, _3) )}
| _1 = expr _2 = AND _3 = expr
    {                  ( BinOp(_1, And, _3) )}
| _1 = expr _2 = XOR _3 = expr
    {                  ( BinOp(_1, Xor, _3) )}
| _1 = expr _2 = BAR _3 = expr
    {                  ( BinOp(_1, Or, _3) )}

exprUn:
| name0 = scopedName
    {let atom =
  let name = name0 in
                      ( Ident name )
in
                  ( atom )}
| lit00 = INTLIT
    {let atom =
  let lit0 = lit00 in
  let lit =
    let lit = lit0 in
                   ( IntLit lit )
  in
                  ( lit )
in
                  ( atom )}
| lit00 = FLOATLIT
    {let atom =
  let lit0 = lit00 in
  let lit =
    let lit = lit0 in
                     ( FloatLit lit )
  in
                  ( lit )
in
                  ( atom )}
| lit00 = STRING
    {let atom =
  let lit0 = lit00 in
  let lit =
    let lit = lit0 in
                   ( String lit )
  in
                  ( lit )
in
                  ( atom )}
| _100 = TRUE
    {let atom =
  let _10 = _100 in
  let lit =
    let _1 = _10 in
             ( Bool true )
  in
                  ( lit )
in
                  ( atom )}
| _100 = FALSE
    {let atom =
  let _10 = _100 in
  let lit =
    let _1 = _10 in
              ( Bool false )
  in
                  ( lit )
in
                  ( atom )}
| _100 = LPAREN x00 = expr _300 = RPAREN
    {let atom =
  let _30 = _300 in
  let x0 = x00 in
  let _10 = _100 in
  let exp =
    let _3 = _30 in
    let x = x0 in
    let _1 = _10 in
        ( x )
  in
                                          ( exp )
in
                  ( atom )}
| _1 = TILDE name0 = scopedName
    {let atom =
  let name = name0 in
                      ( Ident name )
in
                        ( UnOp(UTilde, atom) )}
| _1 = TILDE lit00 = INTLIT
    {let atom =
  let lit0 = lit00 in
  let lit =
    let lit = lit0 in
                   ( IntLit lit )
  in
                  ( lit )
in
                        ( UnOp(UTilde, atom) )}
| _1 = TILDE lit00 = FLOATLIT
    {let atom =
  let lit0 = lit00 in
  let lit =
    let lit = lit0 in
                     ( FloatLit lit )
  in
                  ( lit )
in
                        ( UnOp(UTilde, atom) )}
| _1 = TILDE lit00 = STRING
    {let atom =
  let lit0 = lit00 in
  let lit =
    let lit = lit0 in
                   ( String lit )
  in
                  ( lit )
in
                        ( UnOp(UTilde, atom) )}
| _1 = TILDE _100 = TRUE
    {let atom =
  let _10 = _100 in
  let lit =
    let _1 = _10 in
             ( Bool true )
  in
                  ( lit )
in
                        ( UnOp(UTilde, atom) )}
| _1 = TILDE _100 = FALSE
    {let atom =
  let _10 = _100 in
  let lit =
    let _1 = _10 in
              ( Bool false )
  in
                  ( lit )
in
                        ( UnOp(UTilde, atom) )}
| _1 = TILDE _100 = LPAREN x00 = expr _300 = RPAREN
    {let atom =
  let _30 = _300 in
  let x0 = x00 in
  let _10 = _100 in
  let exp =
    let _3 = _30 in
    let x = x0 in
    let _1 = _10 in
        ( x )
  in
                                          ( exp )
in
                        ( UnOp(UTilde, atom) )}
| _1 = PLUS name0 = scopedName
    {let atom =
  let name = name0 in
                      ( Ident name )
in
                       ( UnOp(UPlus, atom) )}
| _1 = PLUS lit00 = INTLIT
    {let atom =
  let lit0 = lit00 in
  let lit =
    let lit = lit0 in
                   ( IntLit lit )
  in
                  ( lit )
in
                       ( UnOp(UPlus, atom) )}
| _1 = PLUS lit00 = FLOATLIT
    {let atom =
  let lit0 = lit00 in
  let lit =
    let lit = lit0 in
                     ( FloatLit lit )
  in
                  ( lit )
in
                       ( UnOp(UPlus, atom) )}
| _1 = PLUS lit00 = STRING
    {let atom =
  let lit0 = lit00 in
  let lit =
    let lit = lit0 in
                   ( String lit )
  in
                  ( lit )
in
                       ( UnOp(UPlus, atom) )}
| _1 = PLUS _100 = TRUE
    {let atom =
  let _10 = _100 in
  let lit =
    let _1 = _10 in
             ( Bool true )
  in
                  ( lit )
in
                       ( UnOp(UPlus, atom) )}
| _1 = PLUS _100 = FALSE
    {let atom =
  let _10 = _100 in
  let lit =
    let _1 = _10 in
              ( Bool false )
  in
                  ( lit )
in
                       ( UnOp(UPlus, atom) )}
| _1 = PLUS _100 = LPAREN x00 = expr _300 = RPAREN
    {let atom =
  let _30 = _300 in
  let x0 = x00 in
  let _10 = _100 in
  let exp =
    let _3 = _30 in
    let x = x0 in
    let _1 = _10 in
        ( x )
  in
                                          ( exp )
in
                       ( UnOp(UPlus, atom) )}
| _1 = MINUS name0 = scopedName
    {let atom =
  let name = name0 in
                      ( Ident name )
in
                        ( UnOp(UMinus, atom) )}
| _1 = MINUS lit00 = INTLIT
    {let atom =
  let lit0 = lit00 in
  let lit =
    let lit = lit0 in
                   ( IntLit lit )
  in
                  ( lit )
in
                        ( UnOp(UMinus, atom) )}
| _1 = MINUS lit00 = FLOATLIT
    {let atom =
  let lit0 = lit00 in
  let lit =
    let lit = lit0 in
                     ( FloatLit lit )
  in
                  ( lit )
in
                        ( UnOp(UMinus, atom) )}
| _1 = MINUS lit00 = STRING
    {let atom =
  let lit0 = lit00 in
  let lit =
    let lit = lit0 in
                   ( String lit )
  in
                  ( lit )
in
                        ( UnOp(UMinus, atom) )}
| _1 = MINUS _100 = TRUE
    {let atom =
  let _10 = _100 in
  let lit =
    let _1 = _10 in
             ( Bool true )
  in
                  ( lit )
in
                        ( UnOp(UMinus, atom) )}
| _1 = MINUS _100 = FALSE
    {let atom =
  let _10 = _100 in
  let lit =
    let _1 = _10 in
              ( Bool false )
  in
                  ( lit )
in
                        ( UnOp(UMinus, atom) )}
| _1 = MINUS _100 = LPAREN x00 = expr _300 = RPAREN
    {let atom =
  let _30 = _300 in
  let x0 = x00 in
  let _10 = _100 in
  let exp =
    let _3 = _30 in
    let x = x0 in
    let _1 = _10 in
        ( x )
  in
                                          ( exp )
in
                        ( UnOp(UMinus, atom) )}

attributeOrOperation:
| _1 = STRINGIFIER _2 = stringifierAttributeOrOperation
    {                                                ( _2 )}
| _1 = attribute
    {              ( _1 )}
| _1 = operation
    {              ( _1 )}

attribute:
| _1 = option_INHERIT_ _3 = ATTRIBUTE ty = typeDecl _10 = CONSTRUCTOR _6 = SEMI
    {let name =
  let _1 = _10 in
                  ( Id.id_of_string "Constructor" )
in
let readonly =
      ( false )
in
let _startpos = _startpos__1_ in
      ( Attribute(_startpos, [], (if readonly then ReadOnly else NoReadOnly), IsNormal, ty, name) )}
| _1 = option_INHERIT_ _3 = ATTRIBUTE ty = typeDecl _10 = NOTXPCOM _6 = SEMI
    {let name =
  let _1 = _10 in
               ( Id.id_of_string "notxpcom" )
in
let readonly =
      ( false )
in
let _startpos = _startpos__1_ in
      ( Attribute(_startpos, [], (if readonly then ReadOnly else NoReadOnly), IsNormal, ty, name) )}
| _1 = option_INHERIT_ _3 = ATTRIBUTE ty = typeDecl _10 = RETVAL _6 = SEMI
    {let name =
  let _1 = _10 in
             ( Id.id_of_string "retval" )
in
let readonly =
      ( false )
in
let _startpos = _startpos__1_ in
      ( Attribute(_startpos, [], (if readonly then ReadOnly else NoReadOnly), IsNormal, ty, name) )}
| _1 = option_INHERIT_ _3 = ATTRIBUTE ty = typeDecl _10 = UNSAFE _6 = SEMI
    {let name =
  let _1 = _10 in
             ( Id.id_of_string "unsafe" )
in
let readonly =
      ( false )
in
let _startpos = _startpos__1_ in
      ( Attribute(_startpos, [], (if readonly then ReadOnly else NoReadOnly), IsNormal, ty, name) )}
| _1 = option_INHERIT_ _3 = ATTRIBUTE ty = typeDecl _10 = PRIVATEBROWSINGCHECK _6 = SEMI
    {let name =
  let _1 = _10 in
                           ( Id.id_of_string "PrivateBrowsingCheck" )
in
let readonly =
      ( false )
in
let _startpos = _startpos__1_ in
      ( Attribute(_startpos, [], (if readonly then ReadOnly else NoReadOnly), IsNormal, ty, name) )}
| _1 = option_INHERIT_ _3 = ATTRIBUTE ty = typeDecl _10 = QUERYINTERFACETYPE _6 = SEMI
    {let name =
  let _1 = _10 in
                         ( Id.id_of_string "QueryInterfaceType" )
in
let readonly =
      ( false )
in
let _startpos = _startpos__1_ in
      ( Attribute(_startpos, [], (if readonly then ReadOnly else NoReadOnly), IsNormal, ty, name) )}
| _1 = option_INHERIT_ _3 = ATTRIBUTE ty = typeDecl _1000 = CREATOR _6 = SEMI
    {let name =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                  ( Id.id_of_string "creator" )
    in
                             ( id )
  in
                                      ( id )
in
let readonly =
      ( false )
in
let _startpos = _startpos__1_ in
      ( Attribute(_startpos, [], (if readonly then ReadOnly else NoReadOnly), IsNormal, ty, name) )}
| _1 = option_INHERIT_ _3 = ATTRIBUTE ty = typeDecl _1000 = GETTER _6 = SEMI
    {let name =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                 ( Id.id_of_string "getter" )
    in
                             ( id )
  in
                                      ( id )
in
let readonly =
      ( false )
in
let _startpos = _startpos__1_ in
      ( Attribute(_startpos, [], (if readonly then ReadOnly else NoReadOnly), IsNormal, ty, name) )}
| _1 = option_INHERIT_ _3 = ATTRIBUTE ty = typeDecl _1000 = SETTER _6 = SEMI
    {let name =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                 ( Id.id_of_string "setter" )
    in
                             ( id )
  in
                                      ( id )
in
let readonly =
      ( false )
in
let _startpos = _startpos__1_ in
      ( Attribute(_startpos, [], (if readonly then ReadOnly else NoReadOnly), IsNormal, ty, name) )}
| _1 = option_INHERIT_ _3 = ATTRIBUTE ty = typeDecl id000 = ID _6 = SEMI
    {let name =
  let id00 = id000 in
  let id =
    let id0 = id00 in
    let id =
      let id = id0 in
                ( id )
    in
                                                 ( id )
  in
                                      ( id )
in
let readonly =
      ( false )
in
let _startpos = _startpos__1_ in
      ( Attribute(_startpos, [], (if readonly then ReadOnly else NoReadOnly), IsNormal, ty, name) )}
| _1 = option_INHERIT_ _3 = ATTRIBUTE ty = typeDecl _1000 = DICTIONARY _6 = SEMI
    {let name =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                     ( Id.id_of_string "dictionary" )
    in
                                                 ( id )
  in
                                      ( id )
in
let readonly =
      ( false )
in
let _startpos = _startpos__1_ in
      ( Attribute(_startpos, [], (if readonly then ReadOnly else NoReadOnly), IsNormal, ty, name) )}
| _1 = option_INHERIT_ _3 = ATTRIBUTE ty = typeDecl _1000 = PARTIAL _6 = SEMI
    {let name =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                  ( Id.id_of_string "partial" )
    in
                                                 ( id )
  in
                                      ( id )
in
let readonly =
      ( false )
in
let _startpos = _startpos__1_ in
      ( Attribute(_startpos, [], (if readonly then ReadOnly else NoReadOnly), IsNormal, ty, name) )}
| _1 = option_INHERIT_ _10 = READONLY _3 = ATTRIBUTE ty = typeDecl _11 = CONSTRUCTOR _6 = SEMI
    {let name =
  let _1 = _11 in
                  ( Id.id_of_string "Constructor" )
in
let readonly =
  let _1 = _10 in
      ( true )
in
let _startpos = _startpos__1_ in
      ( Attribute(_startpos, [], (if readonly then ReadOnly else NoReadOnly), IsNormal, ty, name) )}
| _1 = option_INHERIT_ _10 = READONLY _3 = ATTRIBUTE ty = typeDecl _11 = NOTXPCOM _6 = SEMI
    {let name =
  let _1 = _11 in
               ( Id.id_of_string "notxpcom" )
in
let readonly =
  let _1 = _10 in
      ( true )
in
let _startpos = _startpos__1_ in
      ( Attribute(_startpos, [], (if readonly then ReadOnly else NoReadOnly), IsNormal, ty, name) )}
| _1 = option_INHERIT_ _10 = READONLY _3 = ATTRIBUTE ty = typeDecl _11 = RETVAL _6 = SEMI
    {let name =
  let _1 = _11 in
             ( Id.id_of_string "retval" )
in
let readonly =
  let _1 = _10 in
      ( true )
in
let _startpos = _startpos__1_ in
      ( Attribute(_startpos, [], (if readonly then ReadOnly else NoReadOnly), IsNormal, ty, name) )}
| _1 = option_INHERIT_ _10 = READONLY _3 = ATTRIBUTE ty = typeDecl _11 = UNSAFE _6 = SEMI
    {let name =
  let _1 = _11 in
             ( Id.id_of_string "unsafe" )
in
let readonly =
  let _1 = _10 in
      ( true )
in
let _startpos = _startpos__1_ in
      ( Attribute(_startpos, [], (if readonly then ReadOnly else NoReadOnly), IsNormal, ty, name) )}
| _1 = option_INHERIT_ _10 = READONLY _3 = ATTRIBUTE ty = typeDecl _11 = PRIVATEBROWSINGCHECK _6 = SEMI
    {let name =
  let _1 = _11 in
                           ( Id.id_of_string "PrivateBrowsingCheck" )
in
let readonly =
  let _1 = _10 in
      ( true )
in
let _startpos = _startpos__1_ in
      ( Attribute(_startpos, [], (if readonly then ReadOnly else NoReadOnly), IsNormal, ty, name) )}
| _1 = option_INHERIT_ _10 = READONLY _3 = ATTRIBUTE ty = typeDecl _11 = QUERYINTERFACETYPE _6 = SEMI
    {let name =
  let _1 = _11 in
                         ( Id.id_of_string "QueryInterfaceType" )
in
let readonly =
  let _1 = _10 in
      ( true )
in
let _startpos = _startpos__1_ in
      ( Attribute(_startpos, [], (if readonly then ReadOnly else NoReadOnly), IsNormal, ty, name) )}
| _1 = option_INHERIT_ _10 = READONLY _3 = ATTRIBUTE ty = typeDecl _1000 = CREATOR _6 = SEMI
    {let name =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                  ( Id.id_of_string "creator" )
    in
                             ( id )
  in
                                      ( id )
in
let readonly =
  let _1 = _10 in
      ( true )
in
let _startpos = _startpos__1_ in
      ( Attribute(_startpos, [], (if readonly then ReadOnly else NoReadOnly), IsNormal, ty, name) )}
| _1 = option_INHERIT_ _10 = READONLY _3 = ATTRIBUTE ty = typeDecl _1000 = GETTER _6 = SEMI
    {let name =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                 ( Id.id_of_string "getter" )
    in
                             ( id )
  in
                                      ( id )
in
let readonly =
  let _1 = _10 in
      ( true )
in
let _startpos = _startpos__1_ in
      ( Attribute(_startpos, [], (if readonly then ReadOnly else NoReadOnly), IsNormal, ty, name) )}
| _1 = option_INHERIT_ _10 = READONLY _3 = ATTRIBUTE ty = typeDecl _1000 = SETTER _6 = SEMI
    {let name =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                 ( Id.id_of_string "setter" )
    in
                             ( id )
  in
                                      ( id )
in
let readonly =
  let _1 = _10 in
      ( true )
in
let _startpos = _startpos__1_ in
      ( Attribute(_startpos, [], (if readonly then ReadOnly else NoReadOnly), IsNormal, ty, name) )}
| _1 = option_INHERIT_ _10 = READONLY _3 = ATTRIBUTE ty = typeDecl id000 = ID _6 = SEMI
    {let name =
  let id00 = id000 in
  let id =
    let id0 = id00 in
    let id =
      let id = id0 in
                ( id )
    in
                                                 ( id )
  in
                                      ( id )
in
let readonly =
  let _1 = _10 in
      ( true )
in
let _startpos = _startpos__1_ in
      ( Attribute(_startpos, [], (if readonly then ReadOnly else NoReadOnly), IsNormal, ty, name) )}
| _1 = option_INHERIT_ _10 = READONLY _3 = ATTRIBUTE ty = typeDecl _1000 = DICTIONARY _6 = SEMI
    {let name =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                     ( Id.id_of_string "dictionary" )
    in
                                                 ( id )
  in
                                      ( id )
in
let readonly =
  let _1 = _10 in
      ( true )
in
let _startpos = _startpos__1_ in
      ( Attribute(_startpos, [], (if readonly then ReadOnly else NoReadOnly), IsNormal, ty, name) )}
| _1 = option_INHERIT_ _10 = READONLY _3 = ATTRIBUTE ty = typeDecl _1000 = PARTIAL _6 = SEMI
    {let name =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                  ( Id.id_of_string "partial" )
    in
                                                 ( id )
  in
                                      ( id )
in
let readonly =
  let _1 = _10 in
      ( true )
in
let _startpos = _startpos__1_ in
      ( Attribute(_startpos, [], (if readonly then ReadOnly else NoReadOnly), IsNormal, ty, name) )}

argumentList:
| xs0 = loption_separated_nonempty_list_COMMA_argument__
    {let args =
  let xs = xs0 in
      ( xs )
in
                                        ( args )}

argument:
| arg = extAttrArgList_optionalOrRequiredArgument_
    {                                                   ( 
    let (m, (io, opt, ty, dots, id, def)) = arg in 
    if opt then (io, Optional::m, ty, dots, id, def)
    else (io, m, ty, dots, id, def) )}

optionalOrRequiredArgument:
| io = inout _2 = OPTIONAL ty = typeDecl _10 = CONSTRUCTOR def = option_default_
    {let id =
  let _1 = _10 in
                  ( Id.id_of_string "Constructor" )
in
                                                                 ( (io, true, ty, Single, id, def) )}
| io = inout _2 = OPTIONAL ty = typeDecl _10 = NOTXPCOM def = option_default_
    {let id =
  let _1 = _10 in
               ( Id.id_of_string "notxpcom" )
in
                                                                 ( (io, true, ty, Single, id, def) )}
| io = inout _2 = OPTIONAL ty = typeDecl _10 = RETVAL def = option_default_
    {let id =
  let _1 = _10 in
             ( Id.id_of_string "retval" )
in
                                                                 ( (io, true, ty, Single, id, def) )}
| io = inout _2 = OPTIONAL ty = typeDecl _10 = UNSAFE def = option_default_
    {let id =
  let _1 = _10 in
             ( Id.id_of_string "unsafe" )
in
                                                                 ( (io, true, ty, Single, id, def) )}
| io = inout _2 = OPTIONAL ty = typeDecl _10 = PRIVATEBROWSINGCHECK def = option_default_
    {let id =
  let _1 = _10 in
                           ( Id.id_of_string "PrivateBrowsingCheck" )
in
                                                                 ( (io, true, ty, Single, id, def) )}
| io = inout _2 = OPTIONAL ty = typeDecl _10 = QUERYINTERFACETYPE def = option_default_
    {let id =
  let _1 = _10 in
                         ( Id.id_of_string "QueryInterfaceType" )
in
                                                                 ( (io, true, ty, Single, id, def) )}
| io = inout _2 = OPTIONAL ty = typeDecl _1000 = CREATOR def = option_default_
    {let id =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                  ( Id.id_of_string "creator" )
    in
                             ( id )
  in
                                      ( id )
in
                                                                 ( (io, true, ty, Single, id, def) )}
| io = inout _2 = OPTIONAL ty = typeDecl _1000 = GETTER def = option_default_
    {let id =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                 ( Id.id_of_string "getter" )
    in
                             ( id )
  in
                                      ( id )
in
                                                                 ( (io, true, ty, Single, id, def) )}
| io = inout _2 = OPTIONAL ty = typeDecl _1000 = SETTER def = option_default_
    {let id =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                 ( Id.id_of_string "setter" )
    in
                             ( id )
  in
                                      ( id )
in
                                                                 ( (io, true, ty, Single, id, def) )}
| io = inout _2 = OPTIONAL ty = typeDecl id000 = ID def = option_default_
    {let id =
  let id00 = id000 in
  let id =
    let id0 = id00 in
    let id =
      let id = id0 in
                ( id )
    in
                                                 ( id )
  in
                                      ( id )
in
                                                                 ( (io, true, ty, Single, id, def) )}
| io = inout _2 = OPTIONAL ty = typeDecl _1000 = DICTIONARY def = option_default_
    {let id =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                     ( Id.id_of_string "dictionary" )
    in
                                                 ( id )
  in
                                      ( id )
in
                                                                 ( (io, true, ty, Single, id, def) )}
| io = inout _2 = OPTIONAL ty = typeDecl _1000 = PARTIAL def = option_default_
    {let id =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                  ( Id.id_of_string "partial" )
    in
                                                 ( id )
  in
                                      ( id )
in
                                                                 ( (io, true, ty, Single, id, def) )}
| io = inout ty = typeDecl _10 = DOTDOTDOT _11 = CONSTRUCTOR
    {let id =
  let _1 = _11 in
                  ( Id.id_of_string "Constructor" )
in
let dots =
  let _1 = _10 in
                ( Variadic )
in
                                                     ( (io, false, ty, dots, id, None) )}
| io = inout ty = typeDecl _10 = DOTDOTDOT _11 = NOTXPCOM
    {let id =
  let _1 = _11 in
               ( Id.id_of_string "notxpcom" )
in
let dots =
  let _1 = _10 in
                ( Variadic )
in
                                                     ( (io, false, ty, dots, id, None) )}
| io = inout ty = typeDecl _10 = DOTDOTDOT _11 = RETVAL
    {let id =
  let _1 = _11 in
             ( Id.id_of_string "retval" )
in
let dots =
  let _1 = _10 in
                ( Variadic )
in
                                                     ( (io, false, ty, dots, id, None) )}
| io = inout ty = typeDecl _10 = DOTDOTDOT _11 = UNSAFE
    {let id =
  let _1 = _11 in
             ( Id.id_of_string "unsafe" )
in
let dots =
  let _1 = _10 in
                ( Variadic )
in
                                                     ( (io, false, ty, dots, id, None) )}
| io = inout ty = typeDecl _10 = DOTDOTDOT _11 = PRIVATEBROWSINGCHECK
    {let id =
  let _1 = _11 in
                           ( Id.id_of_string "PrivateBrowsingCheck" )
in
let dots =
  let _1 = _10 in
                ( Variadic )
in
                                                     ( (io, false, ty, dots, id, None) )}
| io = inout ty = typeDecl _10 = DOTDOTDOT _11 = QUERYINTERFACETYPE
    {let id =
  let _1 = _11 in
                         ( Id.id_of_string "QueryInterfaceType" )
in
let dots =
  let _1 = _10 in
                ( Variadic )
in
                                                     ( (io, false, ty, dots, id, None) )}
| io = inout ty = typeDecl _10 = DOTDOTDOT _1000 = CREATOR
    {let id =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                  ( Id.id_of_string "creator" )
    in
                             ( id )
  in
                                      ( id )
in
let dots =
  let _1 = _10 in
                ( Variadic )
in
                                                     ( (io, false, ty, dots, id, None) )}
| io = inout ty = typeDecl _10 = DOTDOTDOT _1000 = GETTER
    {let id =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                 ( Id.id_of_string "getter" )
    in
                             ( id )
  in
                                      ( id )
in
let dots =
  let _1 = _10 in
                ( Variadic )
in
                                                     ( (io, false, ty, dots, id, None) )}
| io = inout ty = typeDecl _10 = DOTDOTDOT _1000 = SETTER
    {let id =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                 ( Id.id_of_string "setter" )
    in
                             ( id )
  in
                                      ( id )
in
let dots =
  let _1 = _10 in
                ( Variadic )
in
                                                     ( (io, false, ty, dots, id, None) )}
| io = inout ty = typeDecl _10 = DOTDOTDOT id000 = ID
    {let id =
  let id00 = id000 in
  let id =
    let id0 = id00 in
    let id =
      let id = id0 in
                ( id )
    in
                                                 ( id )
  in
                                      ( id )
in
let dots =
  let _1 = _10 in
                ( Variadic )
in
                                                     ( (io, false, ty, dots, id, None) )}
| io = inout ty = typeDecl _10 = DOTDOTDOT _1000 = DICTIONARY
    {let id =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                     ( Id.id_of_string "dictionary" )
    in
                                                 ( id )
  in
                                      ( id )
in
let dots =
  let _1 = _10 in
                ( Variadic )
in
                                                     ( (io, false, ty, dots, id, None) )}
| io = inout ty = typeDecl _10 = DOTDOTDOT _1000 = PARTIAL
    {let id =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                  ( Id.id_of_string "partial" )
    in
                                                 ( id )
  in
                                      ( id )
in
let dots =
  let _1 = _10 in
                ( Variadic )
in
                                                     ( (io, false, ty, dots, id, None) )}
| io = inout ty = typeDecl _10 = CONSTRUCTOR
    {let id =
  let _1 = _10 in
                  ( Id.id_of_string "Constructor" )
in
let dots =
      ( Single )
in
                                                     ( (io, false, ty, dots, id, None) )}
| io = inout ty = typeDecl _10 = NOTXPCOM
    {let id =
  let _1 = _10 in
               ( Id.id_of_string "notxpcom" )
in
let dots =
      ( Single )
in
                                                     ( (io, false, ty, dots, id, None) )}
| io = inout ty = typeDecl _10 = RETVAL
    {let id =
  let _1 = _10 in
             ( Id.id_of_string "retval" )
in
let dots =
      ( Single )
in
                                                     ( (io, false, ty, dots, id, None) )}
| io = inout ty = typeDecl _10 = UNSAFE
    {let id =
  let _1 = _10 in
             ( Id.id_of_string "unsafe" )
in
let dots =
      ( Single )
in
                                                     ( (io, false, ty, dots, id, None) )}
| io = inout ty = typeDecl _10 = PRIVATEBROWSINGCHECK
    {let id =
  let _1 = _10 in
                           ( Id.id_of_string "PrivateBrowsingCheck" )
in
let dots =
      ( Single )
in
                                                     ( (io, false, ty, dots, id, None) )}
| io = inout ty = typeDecl _10 = QUERYINTERFACETYPE
    {let id =
  let _1 = _10 in
                         ( Id.id_of_string "QueryInterfaceType" )
in
let dots =
      ( Single )
in
                                                     ( (io, false, ty, dots, id, None) )}
| io = inout ty = typeDecl _1000 = CREATOR
    {let id =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                  ( Id.id_of_string "creator" )
    in
                             ( id )
  in
                                      ( id )
in
let dots =
      ( Single )
in
                                                     ( (io, false, ty, dots, id, None) )}
| io = inout ty = typeDecl _1000 = GETTER
    {let id =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                 ( Id.id_of_string "getter" )
    in
                             ( id )
  in
                                      ( id )
in
let dots =
      ( Single )
in
                                                     ( (io, false, ty, dots, id, None) )}
| io = inout ty = typeDecl _1000 = SETTER
    {let id =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                 ( Id.id_of_string "setter" )
    in
                             ( id )
  in
                                      ( id )
in
let dots =
      ( Single )
in
                                                     ( (io, false, ty, dots, id, None) )}
| io = inout ty = typeDecl id000 = ID
    {let id =
  let id00 = id000 in
  let id =
    let id0 = id00 in
    let id =
      let id = id0 in
                ( id )
    in
                                                 ( id )
  in
                                      ( id )
in
let dots =
      ( Single )
in
                                                     ( (io, false, ty, dots, id, None) )}
| io = inout ty = typeDecl _1000 = DICTIONARY
    {let id =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                     ( Id.id_of_string "dictionary" )
    in
                                                 ( id )
  in
                                      ( id )
in
let dots =
      ( Single )
in
                                                     ( (io, false, ty, dots, id, None) )}
| io = inout ty = typeDecl _1000 = PARTIAL
    {let id =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                  ( Id.id_of_string "partial" )
    in
                                                 ( id )
  in
                                      ( id )
in
let dots =
      ( Single )
in
                                                     ( (io, false, ty, dots, id, None) )}

inout:
| _1 = IN
    {       ( InParam )}
| _1 = OUT
    {        ( OutParam )}
| _1 = INOUT
    {          ( InOutParam )}
| 
    {    ( InParam )}

exceptionMember:
| c = const
    {            ( let (p,m,t,id,e) = c in ConstMember(p,m,t,id,e) )}
| _1 = exceptionField
    {                   ( _1 )}

exceptionField:
| ty = typeDecl id = ID _3 = SEMI
    {let _startpos = _startpos_ty_ in
                           ( Attribute(_startpos, [], NoReadOnly, IsNormal, ty, id) )}

extendedAttributeList:
| _10 = LBRACK x0 = iseparated_nonempty_list_COMMA_extendedAttribute_ _30 = RBRACK
    {let attrs =
  let _3 = _30 in
  let x = x0 in
  let _1 = _10 in
      ( x )
in
                                                                                        ( attrs )}
| 
    {    ( [] )}

extendedAttribute:
| _1 = extendedAttributeNoArgs
    {                            ( _1 )}
| _1 = extendedAttributeArgList
    {                             ( _1 )}
| _1 = extendedAttributeNamedArgList
    {                                  ( _1 )}
| _1 = extendedAttributeIdent
    {                           ( _1 )}

nonAnyType:
| _1 = primitiveType _2 = typeSuffix
    {                             ( (_2 _1) )}
| _1 = SEQUENCE _2 = LANGLE t = typeDecl _4 = RANGLE
    {let q =
      ( false )
in
                                                       ( if q then Ques (Sequence t) else Sequence t )}
| _1 = SEQUENCE _2 = LANGLE t = typeDecl _4 = RANGLE _10 = QUES
    {let q =
  let _1 = _10 in
      ( true )
in
                                                       ( if q then Ques (Sequence t) else Sequence t )}

constType:
| ty = primitiveType
    {let readonly =
      ( false )
in
                                             ( if readonly then Ques ty else ty )}
| ty = primitiveType _10 = QUES
    {let readonly =
  let _1 = _10 in
      ( true )
in
                                             ( if readonly then Ques ty else ty )}

primitiveType:
| _1 = unsignedIntegerType
    {                        ( _1 )}
| _1 = BOOLEAN
    {            ( Boolean )}
| _1 = OCTET
    {          ( Octet )}
| _1 = FLOAT
    {          ( Float )}
| _1 = DOUBLE
    {           ( Double )}
| _10 = CONSTRUCTOR
    {let id =
  let _1 = _10 in
                  ( Id.id_of_string "Constructor" )
in
                                ( 
    match (Id.string_of_id id) with
    | "PRUnichar" -> Octet
    | "PRUint32" -> Long Unsigned
    | "PRInt32" -> Long NoUnsigned
    | "PRUint16" -> Short Unsigned
    | "PRInt16" -> Short NoUnsigned
    | "DOMString" -> DOMString
    | "object" -> Object
    | "Date" -> Date
    | _ -> Name (RelativeName[id])
  )}
| _10 = NOTXPCOM
    {let id =
  let _1 = _10 in
               ( Id.id_of_string "notxpcom" )
in
                                ( 
    match (Id.string_of_id id) with
    | "PRUnichar" -> Octet
    | "PRUint32" -> Long Unsigned
    | "PRInt32" -> Long NoUnsigned
    | "PRUint16" -> Short Unsigned
    | "PRInt16" -> Short NoUnsigned
    | "DOMString" -> DOMString
    | "object" -> Object
    | "Date" -> Date
    | _ -> Name (RelativeName[id])
  )}
| _10 = RETVAL
    {let id =
  let _1 = _10 in
             ( Id.id_of_string "retval" )
in
                                ( 
    match (Id.string_of_id id) with
    | "PRUnichar" -> Octet
    | "PRUint32" -> Long Unsigned
    | "PRInt32" -> Long NoUnsigned
    | "PRUint16" -> Short Unsigned
    | "PRInt16" -> Short NoUnsigned
    | "DOMString" -> DOMString
    | "object" -> Object
    | "Date" -> Date
    | _ -> Name (RelativeName[id])
  )}
| _10 = UNSAFE
    {let id =
  let _1 = _10 in
             ( Id.id_of_string "unsafe" )
in
                                ( 
    match (Id.string_of_id id) with
    | "PRUnichar" -> Octet
    | "PRUint32" -> Long Unsigned
    | "PRInt32" -> Long NoUnsigned
    | "PRUint16" -> Short Unsigned
    | "PRInt16" -> Short NoUnsigned
    | "DOMString" -> DOMString
    | "object" -> Object
    | "Date" -> Date
    | _ -> Name (RelativeName[id])
  )}
| _10 = PRIVATEBROWSINGCHECK
    {let id =
  let _1 = _10 in
                           ( Id.id_of_string "PrivateBrowsingCheck" )
in
                                ( 
    match (Id.string_of_id id) with
    | "PRUnichar" -> Octet
    | "PRUint32" -> Long Unsigned
    | "PRInt32" -> Long NoUnsigned
    | "PRUint16" -> Short Unsigned
    | "PRInt16" -> Short NoUnsigned
    | "DOMString" -> DOMString
    | "object" -> Object
    | "Date" -> Date
    | _ -> Name (RelativeName[id])
  )}
| _10 = QUERYINTERFACETYPE
    {let id =
  let _1 = _10 in
                         ( Id.id_of_string "QueryInterfaceType" )
in
                                ( 
    match (Id.string_of_id id) with
    | "PRUnichar" -> Octet
    | "PRUint32" -> Long Unsigned
    | "PRInt32" -> Long NoUnsigned
    | "PRUint16" -> Short Unsigned
    | "PRInt16" -> Short NoUnsigned
    | "DOMString" -> DOMString
    | "object" -> Object
    | "Date" -> Date
    | _ -> Name (RelativeName[id])
  )}
| id00 = ID
    {let id =
  let id0 = id00 in
  let id =
    let id = id0 in
              ( id )
  in
                                               ( id )
in
                                ( 
    match (Id.string_of_id id) with
    | "PRUnichar" -> Octet
    | "PRUint32" -> Long Unsigned
    | "PRInt32" -> Long NoUnsigned
    | "PRUint16" -> Short Unsigned
    | "PRInt16" -> Short NoUnsigned
    | "DOMString" -> DOMString
    | "object" -> Object
    | "Date" -> Date
    | _ -> Name (RelativeName[id])
  )}
| _100 = DICTIONARY
    {let id =
  let _10 = _100 in
  let id =
    let _1 = _10 in
                   ( Id.id_of_string "dictionary" )
  in
                                               ( id )
in
                                ( 
    match (Id.string_of_id id) with
    | "PRUnichar" -> Octet
    | "PRUint32" -> Long Unsigned
    | "PRInt32" -> Long NoUnsigned
    | "PRUint16" -> Short Unsigned
    | "PRInt16" -> Short NoUnsigned
    | "DOMString" -> DOMString
    | "object" -> Object
    | "Date" -> Date
    | _ -> Name (RelativeName[id])
  )}
| _100 = PARTIAL
    {let id =
  let _10 = _100 in
  let id =
    let _1 = _10 in
                ( Id.id_of_string "partial" )
  in
                                               ( id )
in
                                ( 
    match (Id.string_of_id id) with
    | "PRUnichar" -> Octet
    | "PRUint32" -> Long Unsigned
    | "PRInt32" -> Long NoUnsigned
    | "PRUint16" -> Short Unsigned
    | "PRInt16" -> Short NoUnsigned
    | "DOMString" -> DOMString
    | "object" -> Object
    | "Date" -> Date
    | _ -> Name (RelativeName[id])
  )}

integerType:
| _1 = BYTE
    {         ( (fun u -> match u with | Unsigned -> Octet | NoUnsigned -> Byte) )}
| _1 = SHORT
    {          ( (fun u -> Short u) )}
| _1 = LONG
    {let longopt =
      ( false )
in
                                ( if longopt then (fun u -> LongLong u) else (fun u -> Long u) )}
| _1 = LONG _10 = LONG
    {let longopt =
  let _1 = _10 in
      ( true )
in
                                ( if longopt then (fun u -> LongLong u) else (fun u -> Long u) )}

typeSuffix:
| _1 = LRBRACK _2 = typeSuffix
    {                       ( (fun t -> _2 (Array t)) )}
| _1 = QUES _2 = typeSuffixStartingWithArray
    {                                     ( (fun t -> _2 (Ques t)) )}
| 
    {    ( (fun t -> t) )}

typeSuffixStartingWithArray:
| _1 = LRBRACK _2 = typeSuffix
    {                       ( (fun t -> _2 (Array t)) )}
| 
    {    ( (fun t -> t) )}

returnType:
| _1 = typeDecl
    {             ( _1 )}
| _1 = VOID
    {         ( Void )}

extendedAttributeNoArgs:
| _1 = CONST
    {          ( AttrNoArgs (Id.id_of_string "const") )}
| _1 = NOINTERFACEOBJECT
    {                      ( NoInterfaceObject )}
| _1 = OVERRIDEBUILTINS
    {                     ( OverrideBuiltins )}
| _1 = REPLACEABLENAMEDPROPERTIES
    {                               ( ReplaceableNamedProperties )}
| _1 = REPLACEABLE
    {                ( Replaceable )}
| _1 = UNFORGEABLE
    {                ( Unforgeable )}
| _1 = CALLBACK
    {             ( MCallback )}
| _1 = ALLOWANY
    {             ( AllowAny )}
| _1 = CLAMP
    {          ( Clamp )}
| _1 = NOSCRIPT
    {             ( NoScript )}
| _1 = PRIVATEBROWSINGCHECK
    {                         ( PrivateBrowsingCheck )}
| _1 = QUERYINTERFACETYPE
    {                       ( QueryInterfaceType )}
| _1 = UNSAFE
    {           ( Unsafe )}
| _1 = OPTIONAL
    {             (Optional)}
| _1 = OPTIONAL_ARGC
    {                  ( OptionalArgc )}
| _1 = SCRIPTABLE
    {               ( Scriptable )}
| _1 = IMPLICIT_JSCONTEXT
    {                       ( ImplicitJSContext )}
| _1 = CONSTRUCTOR
    {                ( Constructor [] )}
| _1 = NOTXPCOM
    {             ( NotXPCOM )}
| _1 = RETVAL
    {           ( Retval )}
| _100 = CREATOR
    {let id =
  let _10 = _100 in
  let id =
    let _1 = _10 in
                ( Id.id_of_string "creator" )
  in
                           ( id )
in
                                    ( AttrNoArgs id )}
| _100 = GETTER
    {let id =
  let _10 = _100 in
  let id =
    let _1 = _10 in
               ( Id.id_of_string "getter" )
  in
                           ( id )
in
                                    ( AttrNoArgs id )}
| _100 = SETTER
    {let id =
  let _10 = _100 in
  let id =
    let _1 = _10 in
               ( Id.id_of_string "setter" )
  in
                           ( id )
in
                                    ( AttrNoArgs id )}
| id00 = ID
    {let id =
  let id0 = id00 in
  let id =
    let id = id0 in
              ( id )
  in
                                               ( id )
in
                                    ( AttrNoArgs id )}
| _100 = DICTIONARY
    {let id =
  let _10 = _100 in
  let id =
    let _1 = _10 in
                   ( Id.id_of_string "dictionary" )
  in
                                               ( id )
in
                                    ( AttrNoArgs id )}
| _100 = PARTIAL
    {let id =
  let _10 = _100 in
  let id =
    let _1 = _10 in
                ( Id.id_of_string "partial" )
  in
                                               ( id )
in
                                    ( AttrNoArgs id )}

extendedAttributeArgList:
| _1 = UUID
    {         ( Uuid (_1) )}
| _1 = CONSTRUCTOR _10 = LPAREN x0 = argumentList _30 = RPAREN
    {let args =
  let _3 = _30 in
  let x = x0 in
  let _1 = _10 in
      ( x )
in
                                                             ( Constructor args )}
| _1 = SIZE_IS _10 = LPAREN x0 = ID _30 = RPAREN
    {let arg =
  let _3 = _30 in
  let x = x0 in
  let _1 = _10 in
      ( x )
in
                                              ( SizeOf arg )}
| _1 = QUERYELEMENTATTYPE _10 = LPAREN x0 = INTLIT _30 = RPAREN
    {let arg =
  let _3 = _30 in
  let x = x0 in
  let _1 = _10 in
      ( x )
in
                                                               ( QueryElementAtType(Int64.to_int arg) )}
| _100 = CREATOR _10 = LPAREN xs00 = loption_separated_nonempty_list_COMMA_expr__ _30 = RPAREN
    {let args =
  let _3 = _30 in
  let xs0 = xs00 in
  let _1 = _10 in
  let x =
    let xs = xs0 in
        ( xs )
  in
      ( x )
in
let id =
  let _10 = _100 in
  let id =
    let _1 = _10 in
                ( Id.id_of_string "creator" )
  in
                           ( id )
in
                                                                                                ( AttrArgList (id, args) )}
| _100 = GETTER _10 = LPAREN xs00 = loption_separated_nonempty_list_COMMA_expr__ _30 = RPAREN
    {let args =
  let _3 = _30 in
  let xs0 = xs00 in
  let _1 = _10 in
  let x =
    let xs = xs0 in
        ( xs )
  in
      ( x )
in
let id =
  let _10 = _100 in
  let id =
    let _1 = _10 in
               ( Id.id_of_string "getter" )
  in
                           ( id )
in
                                                                                                ( AttrArgList (id, args) )}
| _100 = SETTER _10 = LPAREN xs00 = loption_separated_nonempty_list_COMMA_expr__ _30 = RPAREN
    {let args =
  let _3 = _30 in
  let xs0 = xs00 in
  let _1 = _10 in
  let x =
    let xs = xs0 in
        ( xs )
  in
      ( x )
in
let id =
  let _10 = _100 in
  let id =
    let _1 = _10 in
               ( Id.id_of_string "setter" )
  in
                           ( id )
in
                                                                                                ( AttrArgList (id, args) )}
| id00 = ID _10 = LPAREN xs00 = loption_separated_nonempty_list_COMMA_expr__ _30 = RPAREN
    {let args =
  let _3 = _30 in
  let xs0 = xs00 in
  let _1 = _10 in
  let x =
    let xs = xs0 in
        ( xs )
  in
      ( x )
in
let id =
  let id0 = id00 in
  let id =
    let id = id0 in
              ( id )
  in
                                               ( id )
in
                                                                                                ( AttrArgList (id, args) )}
| _100 = DICTIONARY _10 = LPAREN xs00 = loption_separated_nonempty_list_COMMA_expr__ _30 = RPAREN
    {let args =
  let _3 = _30 in
  let xs0 = xs00 in
  let _1 = _10 in
  let x =
    let xs = xs0 in
        ( xs )
  in
      ( x )
in
let id =
  let _10 = _100 in
  let id =
    let _1 = _10 in
                   ( Id.id_of_string "dictionary" )
  in
                                               ( id )
in
                                                                                                ( AttrArgList (id, args) )}
| _100 = PARTIAL _10 = LPAREN xs00 = loption_separated_nonempty_list_COMMA_expr__ _30 = RPAREN
    {let args =
  let _3 = _30 in
  let xs0 = xs00 in
  let _1 = _10 in
  let x =
    let xs = xs0 in
        ( xs )
  in
      ( x )
in
let id =
  let _10 = _100 in
  let id =
    let _1 = _10 in
                ( Id.id_of_string "partial" )
  in
                                               ( id )
in
                                                                                                ( AttrArgList (id, args) )}

extendedAttributeIdent:
| _1 = PUTFORWARDS _2 = EQUALS id = ID
    {                             ( PutForwards id )}
| _1 = TREATNULLAS _2 = EQUALS _3 = typeDecl
    {                                ( TreatNullAs _3 )}
| _1 = CALLBACK _2 = EQUALS _3 = FUNCTIONONLY
    {                                 ( MCallbackFunctionOnly )}
| _10 = CONSTRUCTOR _2 = EQUALS _11 = CONSTRUCTOR
    {let id =
  let _1 = _11 in
                  ( Id.id_of_string "Constructor" )
in
let name =
  let _1 = _10 in
                  ( Id.id_of_string "Constructor" )
in
                                                 ( AttrNamedIdent(name, id) )}
| _10 = CONSTRUCTOR _2 = EQUALS _11 = NOTXPCOM
    {let id =
  let _1 = _11 in
               ( Id.id_of_string "notxpcom" )
in
let name =
  let _1 = _10 in
                  ( Id.id_of_string "Constructor" )
in
                                                 ( AttrNamedIdent(name, id) )}
| _10 = CONSTRUCTOR _2 = EQUALS _11 = RETVAL
    {let id =
  let _1 = _11 in
             ( Id.id_of_string "retval" )
in
let name =
  let _1 = _10 in
                  ( Id.id_of_string "Constructor" )
in
                                                 ( AttrNamedIdent(name, id) )}
| _10 = CONSTRUCTOR _2 = EQUALS _11 = UNSAFE
    {let id =
  let _1 = _11 in
             ( Id.id_of_string "unsafe" )
in
let name =
  let _1 = _10 in
                  ( Id.id_of_string "Constructor" )
in
                                                 ( AttrNamedIdent(name, id) )}
| _10 = CONSTRUCTOR _2 = EQUALS _11 = PRIVATEBROWSINGCHECK
    {let id =
  let _1 = _11 in
                           ( Id.id_of_string "PrivateBrowsingCheck" )
in
let name =
  let _1 = _10 in
                  ( Id.id_of_string "Constructor" )
in
                                                 ( AttrNamedIdent(name, id) )}
| _10 = CONSTRUCTOR _2 = EQUALS _11 = QUERYINTERFACETYPE
    {let id =
  let _1 = _11 in
                         ( Id.id_of_string "QueryInterfaceType" )
in
let name =
  let _1 = _10 in
                  ( Id.id_of_string "Constructor" )
in
                                                 ( AttrNamedIdent(name, id) )}
| _10 = CONSTRUCTOR _2 = EQUALS _1000 = CREATOR
    {let id =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                  ( Id.id_of_string "creator" )
    in
                             ( id )
  in
                                      ( id )
in
let name =
  let _1 = _10 in
                  ( Id.id_of_string "Constructor" )
in
                                                 ( AttrNamedIdent(name, id) )}
| _10 = CONSTRUCTOR _2 = EQUALS _1000 = GETTER
    {let id =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                 ( Id.id_of_string "getter" )
    in
                             ( id )
  in
                                      ( id )
in
let name =
  let _1 = _10 in
                  ( Id.id_of_string "Constructor" )
in
                                                 ( AttrNamedIdent(name, id) )}
| _10 = CONSTRUCTOR _2 = EQUALS _1000 = SETTER
    {let id =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                 ( Id.id_of_string "setter" )
    in
                             ( id )
  in
                                      ( id )
in
let name =
  let _1 = _10 in
                  ( Id.id_of_string "Constructor" )
in
                                                 ( AttrNamedIdent(name, id) )}
| _10 = CONSTRUCTOR _2 = EQUALS id000 = ID
    {let id =
  let id00 = id000 in
  let id =
    let id0 = id00 in
    let id =
      let id = id0 in
                ( id )
    in
                                                 ( id )
  in
                                      ( id )
in
let name =
  let _1 = _10 in
                  ( Id.id_of_string "Constructor" )
in
                                                 ( AttrNamedIdent(name, id) )}
| _10 = CONSTRUCTOR _2 = EQUALS _1000 = DICTIONARY
    {let id =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                     ( Id.id_of_string "dictionary" )
    in
                                                 ( id )
  in
                                      ( id )
in
let name =
  let _1 = _10 in
                  ( Id.id_of_string "Constructor" )
in
                                                 ( AttrNamedIdent(name, id) )}
| _10 = CONSTRUCTOR _2 = EQUALS _1000 = PARTIAL
    {let id =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                  ( Id.id_of_string "partial" )
    in
                                                 ( id )
  in
                                      ( id )
in
let name =
  let _1 = _10 in
                  ( Id.id_of_string "Constructor" )
in
                                                 ( AttrNamedIdent(name, id) )}
| _10 = NOTXPCOM _2 = EQUALS _11 = CONSTRUCTOR
    {let id =
  let _1 = _11 in
                  ( Id.id_of_string "Constructor" )
in
let name =
  let _1 = _10 in
               ( Id.id_of_string "notxpcom" )
in
                                                 ( AttrNamedIdent(name, id) )}
| _10 = NOTXPCOM _2 = EQUALS _11 = NOTXPCOM
    {let id =
  let _1 = _11 in
               ( Id.id_of_string "notxpcom" )
in
let name =
  let _1 = _10 in
               ( Id.id_of_string "notxpcom" )
in
                                                 ( AttrNamedIdent(name, id) )}
| _10 = NOTXPCOM _2 = EQUALS _11 = RETVAL
    {let id =
  let _1 = _11 in
             ( Id.id_of_string "retval" )
in
let name =
  let _1 = _10 in
               ( Id.id_of_string "notxpcom" )
in
                                                 ( AttrNamedIdent(name, id) )}
| _10 = NOTXPCOM _2 = EQUALS _11 = UNSAFE
    {let id =
  let _1 = _11 in
             ( Id.id_of_string "unsafe" )
in
let name =
  let _1 = _10 in
               ( Id.id_of_string "notxpcom" )
in
                                                 ( AttrNamedIdent(name, id) )}
| _10 = NOTXPCOM _2 = EQUALS _11 = PRIVATEBROWSINGCHECK
    {let id =
  let _1 = _11 in
                           ( Id.id_of_string "PrivateBrowsingCheck" )
in
let name =
  let _1 = _10 in
               ( Id.id_of_string "notxpcom" )
in
                                                 ( AttrNamedIdent(name, id) )}
| _10 = NOTXPCOM _2 = EQUALS _11 = QUERYINTERFACETYPE
    {let id =
  let _1 = _11 in
                         ( Id.id_of_string "QueryInterfaceType" )
in
let name =
  let _1 = _10 in
               ( Id.id_of_string "notxpcom" )
in
                                                 ( AttrNamedIdent(name, id) )}
| _10 = NOTXPCOM _2 = EQUALS _1000 = CREATOR
    {let id =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                  ( Id.id_of_string "creator" )
    in
                             ( id )
  in
                                      ( id )
in
let name =
  let _1 = _10 in
               ( Id.id_of_string "notxpcom" )
in
                                                 ( AttrNamedIdent(name, id) )}
| _10 = NOTXPCOM _2 = EQUALS _1000 = GETTER
    {let id =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                 ( Id.id_of_string "getter" )
    in
                             ( id )
  in
                                      ( id )
in
let name =
  let _1 = _10 in
               ( Id.id_of_string "notxpcom" )
in
                                                 ( AttrNamedIdent(name, id) )}
| _10 = NOTXPCOM _2 = EQUALS _1000 = SETTER
    {let id =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                 ( Id.id_of_string "setter" )
    in
                             ( id )
  in
                                      ( id )
in
let name =
  let _1 = _10 in
               ( Id.id_of_string "notxpcom" )
in
                                                 ( AttrNamedIdent(name, id) )}
| _10 = NOTXPCOM _2 = EQUALS id000 = ID
    {let id =
  let id00 = id000 in
  let id =
    let id0 = id00 in
    let id =
      let id = id0 in
                ( id )
    in
                                                 ( id )
  in
                                      ( id )
in
let name =
  let _1 = _10 in
               ( Id.id_of_string "notxpcom" )
in
                                                 ( AttrNamedIdent(name, id) )}
| _10 = NOTXPCOM _2 = EQUALS _1000 = DICTIONARY
    {let id =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                     ( Id.id_of_string "dictionary" )
    in
                                                 ( id )
  in
                                      ( id )
in
let name =
  let _1 = _10 in
               ( Id.id_of_string "notxpcom" )
in
                                                 ( AttrNamedIdent(name, id) )}
| _10 = NOTXPCOM _2 = EQUALS _1000 = PARTIAL
    {let id =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                  ( Id.id_of_string "partial" )
    in
                                                 ( id )
  in
                                      ( id )
in
let name =
  let _1 = _10 in
               ( Id.id_of_string "notxpcom" )
in
                                                 ( AttrNamedIdent(name, id) )}
| _10 = RETVAL _2 = EQUALS _11 = CONSTRUCTOR
    {let id =
  let _1 = _11 in
                  ( Id.id_of_string "Constructor" )
in
let name =
  let _1 = _10 in
             ( Id.id_of_string "retval" )
in
                                                 ( AttrNamedIdent(name, id) )}
| _10 = RETVAL _2 = EQUALS _11 = NOTXPCOM
    {let id =
  let _1 = _11 in
               ( Id.id_of_string "notxpcom" )
in
let name =
  let _1 = _10 in
             ( Id.id_of_string "retval" )
in
                                                 ( AttrNamedIdent(name, id) )}
| _10 = RETVAL _2 = EQUALS _11 = RETVAL
    {let id =
  let _1 = _11 in
             ( Id.id_of_string "retval" )
in
let name =
  let _1 = _10 in
             ( Id.id_of_string "retval" )
in
                                                 ( AttrNamedIdent(name, id) )}
| _10 = RETVAL _2 = EQUALS _11 = UNSAFE
    {let id =
  let _1 = _11 in
             ( Id.id_of_string "unsafe" )
in
let name =
  let _1 = _10 in
             ( Id.id_of_string "retval" )
in
                                                 ( AttrNamedIdent(name, id) )}
| _10 = RETVAL _2 = EQUALS _11 = PRIVATEBROWSINGCHECK
    {let id =
  let _1 = _11 in
                           ( Id.id_of_string "PrivateBrowsingCheck" )
in
let name =
  let _1 = _10 in
             ( Id.id_of_string "retval" )
in
                                                 ( AttrNamedIdent(name, id) )}
| _10 = RETVAL _2 = EQUALS _11 = QUERYINTERFACETYPE
    {let id =
  let _1 = _11 in
                         ( Id.id_of_string "QueryInterfaceType" )
in
let name =
  let _1 = _10 in
             ( Id.id_of_string "retval" )
in
                                                 ( AttrNamedIdent(name, id) )}
| _10 = RETVAL _2 = EQUALS _1000 = CREATOR
    {let id =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                  ( Id.id_of_string "creator" )
    in
                             ( id )
  in
                                      ( id )
in
let name =
  let _1 = _10 in
             ( Id.id_of_string "retval" )
in
                                                 ( AttrNamedIdent(name, id) )}
| _10 = RETVAL _2 = EQUALS _1000 = GETTER
    {let id =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                 ( Id.id_of_string "getter" )
    in
                             ( id )
  in
                                      ( id )
in
let name =
  let _1 = _10 in
             ( Id.id_of_string "retval" )
in
                                                 ( AttrNamedIdent(name, id) )}
| _10 = RETVAL _2 = EQUALS _1000 = SETTER
    {let id =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                 ( Id.id_of_string "setter" )
    in
                             ( id )
  in
                                      ( id )
in
let name =
  let _1 = _10 in
             ( Id.id_of_string "retval" )
in
                                                 ( AttrNamedIdent(name, id) )}
| _10 = RETVAL _2 = EQUALS id000 = ID
    {let id =
  let id00 = id000 in
  let id =
    let id0 = id00 in
    let id =
      let id = id0 in
                ( id )
    in
                                                 ( id )
  in
                                      ( id )
in
let name =
  let _1 = _10 in
             ( Id.id_of_string "retval" )
in
                                                 ( AttrNamedIdent(name, id) )}
| _10 = RETVAL _2 = EQUALS _1000 = DICTIONARY
    {let id =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                     ( Id.id_of_string "dictionary" )
    in
                                                 ( id )
  in
                                      ( id )
in
let name =
  let _1 = _10 in
             ( Id.id_of_string "retval" )
in
                                                 ( AttrNamedIdent(name, id) )}
| _10 = RETVAL _2 = EQUALS _1000 = PARTIAL
    {let id =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                  ( Id.id_of_string "partial" )
    in
                                                 ( id )
  in
                                      ( id )
in
let name =
  let _1 = _10 in
             ( Id.id_of_string "retval" )
in
                                                 ( AttrNamedIdent(name, id) )}
| _10 = UNSAFE _2 = EQUALS _11 = CONSTRUCTOR
    {let id =
  let _1 = _11 in
                  ( Id.id_of_string "Constructor" )
in
let name =
  let _1 = _10 in
             ( Id.id_of_string "unsafe" )
in
                                                 ( AttrNamedIdent(name, id) )}
| _10 = UNSAFE _2 = EQUALS _11 = NOTXPCOM
    {let id =
  let _1 = _11 in
               ( Id.id_of_string "notxpcom" )
in
let name =
  let _1 = _10 in
             ( Id.id_of_string "unsafe" )
in
                                                 ( AttrNamedIdent(name, id) )}
| _10 = UNSAFE _2 = EQUALS _11 = RETVAL
    {let id =
  let _1 = _11 in
             ( Id.id_of_string "retval" )
in
let name =
  let _1 = _10 in
             ( Id.id_of_string "unsafe" )
in
                                                 ( AttrNamedIdent(name, id) )}
| _10 = UNSAFE _2 = EQUALS _11 = UNSAFE
    {let id =
  let _1 = _11 in
             ( Id.id_of_string "unsafe" )
in
let name =
  let _1 = _10 in
             ( Id.id_of_string "unsafe" )
in
                                                 ( AttrNamedIdent(name, id) )}
| _10 = UNSAFE _2 = EQUALS _11 = PRIVATEBROWSINGCHECK
    {let id =
  let _1 = _11 in
                           ( Id.id_of_string "PrivateBrowsingCheck" )
in
let name =
  let _1 = _10 in
             ( Id.id_of_string "unsafe" )
in
                                                 ( AttrNamedIdent(name, id) )}
| _10 = UNSAFE _2 = EQUALS _11 = QUERYINTERFACETYPE
    {let id =
  let _1 = _11 in
                         ( Id.id_of_string "QueryInterfaceType" )
in
let name =
  let _1 = _10 in
             ( Id.id_of_string "unsafe" )
in
                                                 ( AttrNamedIdent(name, id) )}
| _10 = UNSAFE _2 = EQUALS _1000 = CREATOR
    {let id =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                  ( Id.id_of_string "creator" )
    in
                             ( id )
  in
                                      ( id )
in
let name =
  let _1 = _10 in
             ( Id.id_of_string "unsafe" )
in
                                                 ( AttrNamedIdent(name, id) )}
| _10 = UNSAFE _2 = EQUALS _1000 = GETTER
    {let id =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                 ( Id.id_of_string "getter" )
    in
                             ( id )
  in
                                      ( id )
in
let name =
  let _1 = _10 in
             ( Id.id_of_string "unsafe" )
in
                                                 ( AttrNamedIdent(name, id) )}
| _10 = UNSAFE _2 = EQUALS _1000 = SETTER
    {let id =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                 ( Id.id_of_string "setter" )
    in
                             ( id )
  in
                                      ( id )
in
let name =
  let _1 = _10 in
             ( Id.id_of_string "unsafe" )
in
                                                 ( AttrNamedIdent(name, id) )}
| _10 = UNSAFE _2 = EQUALS id000 = ID
    {let id =
  let id00 = id000 in
  let id =
    let id0 = id00 in
    let id =
      let id = id0 in
                ( id )
    in
                                                 ( id )
  in
                                      ( id )
in
let name =
  let _1 = _10 in
             ( Id.id_of_string "unsafe" )
in
                                                 ( AttrNamedIdent(name, id) )}
| _10 = UNSAFE _2 = EQUALS _1000 = DICTIONARY
    {let id =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                     ( Id.id_of_string "dictionary" )
    in
                                                 ( id )
  in
                                      ( id )
in
let name =
  let _1 = _10 in
             ( Id.id_of_string "unsafe" )
in
                                                 ( AttrNamedIdent(name, id) )}
| _10 = UNSAFE _2 = EQUALS _1000 = PARTIAL
    {let id =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                  ( Id.id_of_string "partial" )
    in
                                                 ( id )
  in
                                      ( id )
in
let name =
  let _1 = _10 in
             ( Id.id_of_string "unsafe" )
in
                                                 ( AttrNamedIdent(name, id) )}
| _10 = PRIVATEBROWSINGCHECK _2 = EQUALS _11 = CONSTRUCTOR
    {let id =
  let _1 = _11 in
                  ( Id.id_of_string "Constructor" )
in
let name =
  let _1 = _10 in
                           ( Id.id_of_string "PrivateBrowsingCheck" )
in
                                                 ( AttrNamedIdent(name, id) )}
| _10 = PRIVATEBROWSINGCHECK _2 = EQUALS _11 = NOTXPCOM
    {let id =
  let _1 = _11 in
               ( Id.id_of_string "notxpcom" )
in
let name =
  let _1 = _10 in
                           ( Id.id_of_string "PrivateBrowsingCheck" )
in
                                                 ( AttrNamedIdent(name, id) )}
| _10 = PRIVATEBROWSINGCHECK _2 = EQUALS _11 = RETVAL
    {let id =
  let _1 = _11 in
             ( Id.id_of_string "retval" )
in
let name =
  let _1 = _10 in
                           ( Id.id_of_string "PrivateBrowsingCheck" )
in
                                                 ( AttrNamedIdent(name, id) )}
| _10 = PRIVATEBROWSINGCHECK _2 = EQUALS _11 = UNSAFE
    {let id =
  let _1 = _11 in
             ( Id.id_of_string "unsafe" )
in
let name =
  let _1 = _10 in
                           ( Id.id_of_string "PrivateBrowsingCheck" )
in
                                                 ( AttrNamedIdent(name, id) )}
| _10 = PRIVATEBROWSINGCHECK _2 = EQUALS _11 = PRIVATEBROWSINGCHECK
    {let id =
  let _1 = _11 in
                           ( Id.id_of_string "PrivateBrowsingCheck" )
in
let name =
  let _1 = _10 in
                           ( Id.id_of_string "PrivateBrowsingCheck" )
in
                                                 ( AttrNamedIdent(name, id) )}
| _10 = PRIVATEBROWSINGCHECK _2 = EQUALS _11 = QUERYINTERFACETYPE
    {let id =
  let _1 = _11 in
                         ( Id.id_of_string "QueryInterfaceType" )
in
let name =
  let _1 = _10 in
                           ( Id.id_of_string "PrivateBrowsingCheck" )
in
                                                 ( AttrNamedIdent(name, id) )}
| _10 = PRIVATEBROWSINGCHECK _2 = EQUALS _1000 = CREATOR
    {let id =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                  ( Id.id_of_string "creator" )
    in
                             ( id )
  in
                                      ( id )
in
let name =
  let _1 = _10 in
                           ( Id.id_of_string "PrivateBrowsingCheck" )
in
                                                 ( AttrNamedIdent(name, id) )}
| _10 = PRIVATEBROWSINGCHECK _2 = EQUALS _1000 = GETTER
    {let id =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                 ( Id.id_of_string "getter" )
    in
                             ( id )
  in
                                      ( id )
in
let name =
  let _1 = _10 in
                           ( Id.id_of_string "PrivateBrowsingCheck" )
in
                                                 ( AttrNamedIdent(name, id) )}
| _10 = PRIVATEBROWSINGCHECK _2 = EQUALS _1000 = SETTER
    {let id =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                 ( Id.id_of_string "setter" )
    in
                             ( id )
  in
                                      ( id )
in
let name =
  let _1 = _10 in
                           ( Id.id_of_string "PrivateBrowsingCheck" )
in
                                                 ( AttrNamedIdent(name, id) )}
| _10 = PRIVATEBROWSINGCHECK _2 = EQUALS id000 = ID
    {let id =
  let id00 = id000 in
  let id =
    let id0 = id00 in
    let id =
      let id = id0 in
                ( id )
    in
                                                 ( id )
  in
                                      ( id )
in
let name =
  let _1 = _10 in
                           ( Id.id_of_string "PrivateBrowsingCheck" )
in
                                                 ( AttrNamedIdent(name, id) )}
| _10 = PRIVATEBROWSINGCHECK _2 = EQUALS _1000 = DICTIONARY
    {let id =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                     ( Id.id_of_string "dictionary" )
    in
                                                 ( id )
  in
                                      ( id )
in
let name =
  let _1 = _10 in
                           ( Id.id_of_string "PrivateBrowsingCheck" )
in
                                                 ( AttrNamedIdent(name, id) )}
| _10 = PRIVATEBROWSINGCHECK _2 = EQUALS _1000 = PARTIAL
    {let id =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                  ( Id.id_of_string "partial" )
    in
                                                 ( id )
  in
                                      ( id )
in
let name =
  let _1 = _10 in
                           ( Id.id_of_string "PrivateBrowsingCheck" )
in
                                                 ( AttrNamedIdent(name, id) )}
| _10 = QUERYINTERFACETYPE _2 = EQUALS _11 = CONSTRUCTOR
    {let id =
  let _1 = _11 in
                  ( Id.id_of_string "Constructor" )
in
let name =
  let _1 = _10 in
                         ( Id.id_of_string "QueryInterfaceType" )
in
                                                 ( AttrNamedIdent(name, id) )}
| _10 = QUERYINTERFACETYPE _2 = EQUALS _11 = NOTXPCOM
    {let id =
  let _1 = _11 in
               ( Id.id_of_string "notxpcom" )
in
let name =
  let _1 = _10 in
                         ( Id.id_of_string "QueryInterfaceType" )
in
                                                 ( AttrNamedIdent(name, id) )}
| _10 = QUERYINTERFACETYPE _2 = EQUALS _11 = RETVAL
    {let id =
  let _1 = _11 in
             ( Id.id_of_string "retval" )
in
let name =
  let _1 = _10 in
                         ( Id.id_of_string "QueryInterfaceType" )
in
                                                 ( AttrNamedIdent(name, id) )}
| _10 = QUERYINTERFACETYPE _2 = EQUALS _11 = UNSAFE
    {let id =
  let _1 = _11 in
             ( Id.id_of_string "unsafe" )
in
let name =
  let _1 = _10 in
                         ( Id.id_of_string "QueryInterfaceType" )
in
                                                 ( AttrNamedIdent(name, id) )}
| _10 = QUERYINTERFACETYPE _2 = EQUALS _11 = PRIVATEBROWSINGCHECK
    {let id =
  let _1 = _11 in
                           ( Id.id_of_string "PrivateBrowsingCheck" )
in
let name =
  let _1 = _10 in
                         ( Id.id_of_string "QueryInterfaceType" )
in
                                                 ( AttrNamedIdent(name, id) )}
| _10 = QUERYINTERFACETYPE _2 = EQUALS _11 = QUERYINTERFACETYPE
    {let id =
  let _1 = _11 in
                         ( Id.id_of_string "QueryInterfaceType" )
in
let name =
  let _1 = _10 in
                         ( Id.id_of_string "QueryInterfaceType" )
in
                                                 ( AttrNamedIdent(name, id) )}
| _10 = QUERYINTERFACETYPE _2 = EQUALS _1000 = CREATOR
    {let id =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                  ( Id.id_of_string "creator" )
    in
                             ( id )
  in
                                      ( id )
in
let name =
  let _1 = _10 in
                         ( Id.id_of_string "QueryInterfaceType" )
in
                                                 ( AttrNamedIdent(name, id) )}
| _10 = QUERYINTERFACETYPE _2 = EQUALS _1000 = GETTER
    {let id =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                 ( Id.id_of_string "getter" )
    in
                             ( id )
  in
                                      ( id )
in
let name =
  let _1 = _10 in
                         ( Id.id_of_string "QueryInterfaceType" )
in
                                                 ( AttrNamedIdent(name, id) )}
| _10 = QUERYINTERFACETYPE _2 = EQUALS _1000 = SETTER
    {let id =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                 ( Id.id_of_string "setter" )
    in
                             ( id )
  in
                                      ( id )
in
let name =
  let _1 = _10 in
                         ( Id.id_of_string "QueryInterfaceType" )
in
                                                 ( AttrNamedIdent(name, id) )}
| _10 = QUERYINTERFACETYPE _2 = EQUALS id000 = ID
    {let id =
  let id00 = id000 in
  let id =
    let id0 = id00 in
    let id =
      let id = id0 in
                ( id )
    in
                                                 ( id )
  in
                                      ( id )
in
let name =
  let _1 = _10 in
                         ( Id.id_of_string "QueryInterfaceType" )
in
                                                 ( AttrNamedIdent(name, id) )}
| _10 = QUERYINTERFACETYPE _2 = EQUALS _1000 = DICTIONARY
    {let id =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                     ( Id.id_of_string "dictionary" )
    in
                                                 ( id )
  in
                                      ( id )
in
let name =
  let _1 = _10 in
                         ( Id.id_of_string "QueryInterfaceType" )
in
                                                 ( AttrNamedIdent(name, id) )}
| _10 = QUERYINTERFACETYPE _2 = EQUALS _1000 = PARTIAL
    {let id =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                  ( Id.id_of_string "partial" )
    in
                                                 ( id )
  in
                                      ( id )
in
let name =
  let _1 = _10 in
                         ( Id.id_of_string "QueryInterfaceType" )
in
                                                 ( AttrNamedIdent(name, id) )}
| _1000 = CREATOR _2 = EQUALS _10 = CONSTRUCTOR
    {let id =
  let _1 = _10 in
                  ( Id.id_of_string "Constructor" )
in
let name =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                  ( Id.id_of_string "creator" )
    in
                             ( id )
  in
                                      ( id )
in
                                                 ( AttrNamedIdent(name, id) )}
| _1000 = CREATOR _2 = EQUALS _10 = NOTXPCOM
    {let id =
  let _1 = _10 in
               ( Id.id_of_string "notxpcom" )
in
let name =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                  ( Id.id_of_string "creator" )
    in
                             ( id )
  in
                                      ( id )
in
                                                 ( AttrNamedIdent(name, id) )}
| _1000 = CREATOR _2 = EQUALS _10 = RETVAL
    {let id =
  let _1 = _10 in
             ( Id.id_of_string "retval" )
in
let name =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                  ( Id.id_of_string "creator" )
    in
                             ( id )
  in
                                      ( id )
in
                                                 ( AttrNamedIdent(name, id) )}
| _1000 = CREATOR _2 = EQUALS _10 = UNSAFE
    {let id =
  let _1 = _10 in
             ( Id.id_of_string "unsafe" )
in
let name =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                  ( Id.id_of_string "creator" )
    in
                             ( id )
  in
                                      ( id )
in
                                                 ( AttrNamedIdent(name, id) )}
| _1000 = CREATOR _2 = EQUALS _10 = PRIVATEBROWSINGCHECK
    {let id =
  let _1 = _10 in
                           ( Id.id_of_string "PrivateBrowsingCheck" )
in
let name =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                  ( Id.id_of_string "creator" )
    in
                             ( id )
  in
                                      ( id )
in
                                                 ( AttrNamedIdent(name, id) )}
| _1000 = CREATOR _2 = EQUALS _10 = QUERYINTERFACETYPE
    {let id =
  let _1 = _10 in
                         ( Id.id_of_string "QueryInterfaceType" )
in
let name =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                  ( Id.id_of_string "creator" )
    in
                             ( id )
  in
                                      ( id )
in
                                                 ( AttrNamedIdent(name, id) )}
| _1000 = CREATOR _2 = EQUALS _1001 = CREATOR
    {let id =
  let _100 = _1001 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                  ( Id.id_of_string "creator" )
    in
                             ( id )
  in
                                      ( id )
in
let name =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                  ( Id.id_of_string "creator" )
    in
                             ( id )
  in
                                      ( id )
in
                                                 ( AttrNamedIdent(name, id) )}
| _1000 = CREATOR _2 = EQUALS _1001 = GETTER
    {let id =
  let _100 = _1001 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                 ( Id.id_of_string "getter" )
    in
                             ( id )
  in
                                      ( id )
in
let name =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                  ( Id.id_of_string "creator" )
    in
                             ( id )
  in
                                      ( id )
in
                                                 ( AttrNamedIdent(name, id) )}
| _1000 = CREATOR _2 = EQUALS _1001 = SETTER
    {let id =
  let _100 = _1001 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                 ( Id.id_of_string "setter" )
    in
                             ( id )
  in
                                      ( id )
in
let name =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                  ( Id.id_of_string "creator" )
    in
                             ( id )
  in
                                      ( id )
in
                                                 ( AttrNamedIdent(name, id) )}
| _1000 = CREATOR _2 = EQUALS id000 = ID
    {let id =
  let id00 = id000 in
  let id =
    let id0 = id00 in
    let id =
      let id = id0 in
                ( id )
    in
                                                 ( id )
  in
                                      ( id )
in
let name =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                  ( Id.id_of_string "creator" )
    in
                             ( id )
  in
                                      ( id )
in
                                                 ( AttrNamedIdent(name, id) )}
| _1000 = CREATOR _2 = EQUALS _1001 = DICTIONARY
    {let id =
  let _100 = _1001 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                     ( Id.id_of_string "dictionary" )
    in
                                                 ( id )
  in
                                      ( id )
in
let name =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                  ( Id.id_of_string "creator" )
    in
                             ( id )
  in
                                      ( id )
in
                                                 ( AttrNamedIdent(name, id) )}
| _1000 = CREATOR _2 = EQUALS _1001 = PARTIAL
    {let id =
  let _100 = _1001 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                  ( Id.id_of_string "partial" )
    in
                                                 ( id )
  in
                                      ( id )
in
let name =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                  ( Id.id_of_string "creator" )
    in
                             ( id )
  in
                                      ( id )
in
                                                 ( AttrNamedIdent(name, id) )}
| _1000 = GETTER _2 = EQUALS _10 = CONSTRUCTOR
    {let id =
  let _1 = _10 in
                  ( Id.id_of_string "Constructor" )
in
let name =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                 ( Id.id_of_string "getter" )
    in
                             ( id )
  in
                                      ( id )
in
                                                 ( AttrNamedIdent(name, id) )}
| _1000 = GETTER _2 = EQUALS _10 = NOTXPCOM
    {let id =
  let _1 = _10 in
               ( Id.id_of_string "notxpcom" )
in
let name =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                 ( Id.id_of_string "getter" )
    in
                             ( id )
  in
                                      ( id )
in
                                                 ( AttrNamedIdent(name, id) )}
| _1000 = GETTER _2 = EQUALS _10 = RETVAL
    {let id =
  let _1 = _10 in
             ( Id.id_of_string "retval" )
in
let name =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                 ( Id.id_of_string "getter" )
    in
                             ( id )
  in
                                      ( id )
in
                                                 ( AttrNamedIdent(name, id) )}
| _1000 = GETTER _2 = EQUALS _10 = UNSAFE
    {let id =
  let _1 = _10 in
             ( Id.id_of_string "unsafe" )
in
let name =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                 ( Id.id_of_string "getter" )
    in
                             ( id )
  in
                                      ( id )
in
                                                 ( AttrNamedIdent(name, id) )}
| _1000 = GETTER _2 = EQUALS _10 = PRIVATEBROWSINGCHECK
    {let id =
  let _1 = _10 in
                           ( Id.id_of_string "PrivateBrowsingCheck" )
in
let name =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                 ( Id.id_of_string "getter" )
    in
                             ( id )
  in
                                      ( id )
in
                                                 ( AttrNamedIdent(name, id) )}
| _1000 = GETTER _2 = EQUALS _10 = QUERYINTERFACETYPE
    {let id =
  let _1 = _10 in
                         ( Id.id_of_string "QueryInterfaceType" )
in
let name =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                 ( Id.id_of_string "getter" )
    in
                             ( id )
  in
                                      ( id )
in
                                                 ( AttrNamedIdent(name, id) )}
| _1000 = GETTER _2 = EQUALS _1001 = CREATOR
    {let id =
  let _100 = _1001 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                  ( Id.id_of_string "creator" )
    in
                             ( id )
  in
                                      ( id )
in
let name =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                 ( Id.id_of_string "getter" )
    in
                             ( id )
  in
                                      ( id )
in
                                                 ( AttrNamedIdent(name, id) )}
| _1000 = GETTER _2 = EQUALS _1001 = GETTER
    {let id =
  let _100 = _1001 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                 ( Id.id_of_string "getter" )
    in
                             ( id )
  in
                                      ( id )
in
let name =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                 ( Id.id_of_string "getter" )
    in
                             ( id )
  in
                                      ( id )
in
                                                 ( AttrNamedIdent(name, id) )}
| _1000 = GETTER _2 = EQUALS _1001 = SETTER
    {let id =
  let _100 = _1001 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                 ( Id.id_of_string "setter" )
    in
                             ( id )
  in
                                      ( id )
in
let name =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                 ( Id.id_of_string "getter" )
    in
                             ( id )
  in
                                      ( id )
in
                                                 ( AttrNamedIdent(name, id) )}
| _1000 = GETTER _2 = EQUALS id000 = ID
    {let id =
  let id00 = id000 in
  let id =
    let id0 = id00 in
    let id =
      let id = id0 in
                ( id )
    in
                                                 ( id )
  in
                                      ( id )
in
let name =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                 ( Id.id_of_string "getter" )
    in
                             ( id )
  in
                                      ( id )
in
                                                 ( AttrNamedIdent(name, id) )}
| _1000 = GETTER _2 = EQUALS _1001 = DICTIONARY
    {let id =
  let _100 = _1001 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                     ( Id.id_of_string "dictionary" )
    in
                                                 ( id )
  in
                                      ( id )
in
let name =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                 ( Id.id_of_string "getter" )
    in
                             ( id )
  in
                                      ( id )
in
                                                 ( AttrNamedIdent(name, id) )}
| _1000 = GETTER _2 = EQUALS _1001 = PARTIAL
    {let id =
  let _100 = _1001 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                  ( Id.id_of_string "partial" )
    in
                                                 ( id )
  in
                                      ( id )
in
let name =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                 ( Id.id_of_string "getter" )
    in
                             ( id )
  in
                                      ( id )
in
                                                 ( AttrNamedIdent(name, id) )}
| _1000 = SETTER _2 = EQUALS _10 = CONSTRUCTOR
    {let id =
  let _1 = _10 in
                  ( Id.id_of_string "Constructor" )
in
let name =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                 ( Id.id_of_string "setter" )
    in
                             ( id )
  in
                                      ( id )
in
                                                 ( AttrNamedIdent(name, id) )}
| _1000 = SETTER _2 = EQUALS _10 = NOTXPCOM
    {let id =
  let _1 = _10 in
               ( Id.id_of_string "notxpcom" )
in
let name =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                 ( Id.id_of_string "setter" )
    in
                             ( id )
  in
                                      ( id )
in
                                                 ( AttrNamedIdent(name, id) )}
| _1000 = SETTER _2 = EQUALS _10 = RETVAL
    {let id =
  let _1 = _10 in
             ( Id.id_of_string "retval" )
in
let name =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                 ( Id.id_of_string "setter" )
    in
                             ( id )
  in
                                      ( id )
in
                                                 ( AttrNamedIdent(name, id) )}
| _1000 = SETTER _2 = EQUALS _10 = UNSAFE
    {let id =
  let _1 = _10 in
             ( Id.id_of_string "unsafe" )
in
let name =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                 ( Id.id_of_string "setter" )
    in
                             ( id )
  in
                                      ( id )
in
                                                 ( AttrNamedIdent(name, id) )}
| _1000 = SETTER _2 = EQUALS _10 = PRIVATEBROWSINGCHECK
    {let id =
  let _1 = _10 in
                           ( Id.id_of_string "PrivateBrowsingCheck" )
in
let name =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                 ( Id.id_of_string "setter" )
    in
                             ( id )
  in
                                      ( id )
in
                                                 ( AttrNamedIdent(name, id) )}
| _1000 = SETTER _2 = EQUALS _10 = QUERYINTERFACETYPE
    {let id =
  let _1 = _10 in
                         ( Id.id_of_string "QueryInterfaceType" )
in
let name =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                 ( Id.id_of_string "setter" )
    in
                             ( id )
  in
                                      ( id )
in
                                                 ( AttrNamedIdent(name, id) )}
| _1000 = SETTER _2 = EQUALS _1001 = CREATOR
    {let id =
  let _100 = _1001 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                  ( Id.id_of_string "creator" )
    in
                             ( id )
  in
                                      ( id )
in
let name =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                 ( Id.id_of_string "setter" )
    in
                             ( id )
  in
                                      ( id )
in
                                                 ( AttrNamedIdent(name, id) )}
| _1000 = SETTER _2 = EQUALS _1001 = GETTER
    {let id =
  let _100 = _1001 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                 ( Id.id_of_string "getter" )
    in
                             ( id )
  in
                                      ( id )
in
let name =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                 ( Id.id_of_string "setter" )
    in
                             ( id )
  in
                                      ( id )
in
                                                 ( AttrNamedIdent(name, id) )}
| _1000 = SETTER _2 = EQUALS _1001 = SETTER
    {let id =
  let _100 = _1001 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                 ( Id.id_of_string "setter" )
    in
                             ( id )
  in
                                      ( id )
in
let name =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                 ( Id.id_of_string "setter" )
    in
                             ( id )
  in
                                      ( id )
in
                                                 ( AttrNamedIdent(name, id) )}
| _1000 = SETTER _2 = EQUALS id000 = ID
    {let id =
  let id00 = id000 in
  let id =
    let id0 = id00 in
    let id =
      let id = id0 in
                ( id )
    in
                                                 ( id )
  in
                                      ( id )
in
let name =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                 ( Id.id_of_string "setter" )
    in
                             ( id )
  in
                                      ( id )
in
                                                 ( AttrNamedIdent(name, id) )}
| _1000 = SETTER _2 = EQUALS _1001 = DICTIONARY
    {let id =
  let _100 = _1001 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                     ( Id.id_of_string "dictionary" )
    in
                                                 ( id )
  in
                                      ( id )
in
let name =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                 ( Id.id_of_string "setter" )
    in
                             ( id )
  in
                                      ( id )
in
                                                 ( AttrNamedIdent(name, id) )}
| _1000 = SETTER _2 = EQUALS _1001 = PARTIAL
    {let id =
  let _100 = _1001 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                  ( Id.id_of_string "partial" )
    in
                                                 ( id )
  in
                                      ( id )
in
let name =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                 ( Id.id_of_string "setter" )
    in
                             ( id )
  in
                                      ( id )
in
                                                 ( AttrNamedIdent(name, id) )}
| id000 = ID _2 = EQUALS _10 = CONSTRUCTOR
    {let id =
  let _1 = _10 in
                  ( Id.id_of_string "Constructor" )
in
let name =
  let id00 = id000 in
  let id =
    let id0 = id00 in
    let id =
      let id = id0 in
                ( id )
    in
                                                 ( id )
  in
                                      ( id )
in
                                                 ( AttrNamedIdent(name, id) )}
| id000 = ID _2 = EQUALS _10 = NOTXPCOM
    {let id =
  let _1 = _10 in
               ( Id.id_of_string "notxpcom" )
in
let name =
  let id00 = id000 in
  let id =
    let id0 = id00 in
    let id =
      let id = id0 in
                ( id )
    in
                                                 ( id )
  in
                                      ( id )
in
                                                 ( AttrNamedIdent(name, id) )}
| id000 = ID _2 = EQUALS _10 = RETVAL
    {let id =
  let _1 = _10 in
             ( Id.id_of_string "retval" )
in
let name =
  let id00 = id000 in
  let id =
    let id0 = id00 in
    let id =
      let id = id0 in
                ( id )
    in
                                                 ( id )
  in
                                      ( id )
in
                                                 ( AttrNamedIdent(name, id) )}
| id000 = ID _2 = EQUALS _10 = UNSAFE
    {let id =
  let _1 = _10 in
             ( Id.id_of_string "unsafe" )
in
let name =
  let id00 = id000 in
  let id =
    let id0 = id00 in
    let id =
      let id = id0 in
                ( id )
    in
                                                 ( id )
  in
                                      ( id )
in
                                                 ( AttrNamedIdent(name, id) )}
| id000 = ID _2 = EQUALS _10 = PRIVATEBROWSINGCHECK
    {let id =
  let _1 = _10 in
                           ( Id.id_of_string "PrivateBrowsingCheck" )
in
let name =
  let id00 = id000 in
  let id =
    let id0 = id00 in
    let id =
      let id = id0 in
                ( id )
    in
                                                 ( id )
  in
                                      ( id )
in
                                                 ( AttrNamedIdent(name, id) )}
| id000 = ID _2 = EQUALS _10 = QUERYINTERFACETYPE
    {let id =
  let _1 = _10 in
                         ( Id.id_of_string "QueryInterfaceType" )
in
let name =
  let id00 = id000 in
  let id =
    let id0 = id00 in
    let id =
      let id = id0 in
                ( id )
    in
                                                 ( id )
  in
                                      ( id )
in
                                                 ( AttrNamedIdent(name, id) )}
| id000 = ID _2 = EQUALS _1000 = CREATOR
    {let id =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                  ( Id.id_of_string "creator" )
    in
                             ( id )
  in
                                      ( id )
in
let name =
  let id00 = id000 in
  let id =
    let id0 = id00 in
    let id =
      let id = id0 in
                ( id )
    in
                                                 ( id )
  in
                                      ( id )
in
                                                 ( AttrNamedIdent(name, id) )}
| id000 = ID _2 = EQUALS _1000 = GETTER
    {let id =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                 ( Id.id_of_string "getter" )
    in
                             ( id )
  in
                                      ( id )
in
let name =
  let id00 = id000 in
  let id =
    let id0 = id00 in
    let id =
      let id = id0 in
                ( id )
    in
                                                 ( id )
  in
                                      ( id )
in
                                                 ( AttrNamedIdent(name, id) )}
| id000 = ID _2 = EQUALS _1000 = SETTER
    {let id =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                 ( Id.id_of_string "setter" )
    in
                             ( id )
  in
                                      ( id )
in
let name =
  let id00 = id000 in
  let id =
    let id0 = id00 in
    let id =
      let id = id0 in
                ( id )
    in
                                                 ( id )
  in
                                      ( id )
in
                                                 ( AttrNamedIdent(name, id) )}
| id000 = ID _2 = EQUALS id001 = ID
    {let id =
  let id00 = id001 in
  let id =
    let id0 = id00 in
    let id =
      let id = id0 in
                ( id )
    in
                                                 ( id )
  in
                                      ( id )
in
let name =
  let id00 = id000 in
  let id =
    let id0 = id00 in
    let id =
      let id = id0 in
                ( id )
    in
                                                 ( id )
  in
                                      ( id )
in
                                                 ( AttrNamedIdent(name, id) )}
| id000 = ID _2 = EQUALS _1000 = DICTIONARY
    {let id =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                     ( Id.id_of_string "dictionary" )
    in
                                                 ( id )
  in
                                      ( id )
in
let name =
  let id00 = id000 in
  let id =
    let id0 = id00 in
    let id =
      let id = id0 in
                ( id )
    in
                                                 ( id )
  in
                                      ( id )
in
                                                 ( AttrNamedIdent(name, id) )}
| id000 = ID _2 = EQUALS _1000 = PARTIAL
    {let id =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                  ( Id.id_of_string "partial" )
    in
                                                 ( id )
  in
                                      ( id )
in
let name =
  let id00 = id000 in
  let id =
    let id0 = id00 in
    let id =
      let id = id0 in
                ( id )
    in
                                                 ( id )
  in
                                      ( id )
in
                                                 ( AttrNamedIdent(name, id) )}
| _1000 = DICTIONARY _2 = EQUALS _10 = CONSTRUCTOR
    {let id =
  let _1 = _10 in
                  ( Id.id_of_string "Constructor" )
in
let name =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                     ( Id.id_of_string "dictionary" )
    in
                                                 ( id )
  in
                                      ( id )
in
                                                 ( AttrNamedIdent(name, id) )}
| _1000 = DICTIONARY _2 = EQUALS _10 = NOTXPCOM
    {let id =
  let _1 = _10 in
               ( Id.id_of_string "notxpcom" )
in
let name =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                     ( Id.id_of_string "dictionary" )
    in
                                                 ( id )
  in
                                      ( id )
in
                                                 ( AttrNamedIdent(name, id) )}
| _1000 = DICTIONARY _2 = EQUALS _10 = RETVAL
    {let id =
  let _1 = _10 in
             ( Id.id_of_string "retval" )
in
let name =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                     ( Id.id_of_string "dictionary" )
    in
                                                 ( id )
  in
                                      ( id )
in
                                                 ( AttrNamedIdent(name, id) )}
| _1000 = DICTIONARY _2 = EQUALS _10 = UNSAFE
    {let id =
  let _1 = _10 in
             ( Id.id_of_string "unsafe" )
in
let name =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                     ( Id.id_of_string "dictionary" )
    in
                                                 ( id )
  in
                                      ( id )
in
                                                 ( AttrNamedIdent(name, id) )}
| _1000 = DICTIONARY _2 = EQUALS _10 = PRIVATEBROWSINGCHECK
    {let id =
  let _1 = _10 in
                           ( Id.id_of_string "PrivateBrowsingCheck" )
in
let name =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                     ( Id.id_of_string "dictionary" )
    in
                                                 ( id )
  in
                                      ( id )
in
                                                 ( AttrNamedIdent(name, id) )}
| _1000 = DICTIONARY _2 = EQUALS _10 = QUERYINTERFACETYPE
    {let id =
  let _1 = _10 in
                         ( Id.id_of_string "QueryInterfaceType" )
in
let name =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                     ( Id.id_of_string "dictionary" )
    in
                                                 ( id )
  in
                                      ( id )
in
                                                 ( AttrNamedIdent(name, id) )}
| _1000 = DICTIONARY _2 = EQUALS _1001 = CREATOR
    {let id =
  let _100 = _1001 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                  ( Id.id_of_string "creator" )
    in
                             ( id )
  in
                                      ( id )
in
let name =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                     ( Id.id_of_string "dictionary" )
    in
                                                 ( id )
  in
                                      ( id )
in
                                                 ( AttrNamedIdent(name, id) )}
| _1000 = DICTIONARY _2 = EQUALS _1001 = GETTER
    {let id =
  let _100 = _1001 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                 ( Id.id_of_string "getter" )
    in
                             ( id )
  in
                                      ( id )
in
let name =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                     ( Id.id_of_string "dictionary" )
    in
                                                 ( id )
  in
                                      ( id )
in
                                                 ( AttrNamedIdent(name, id) )}
| _1000 = DICTIONARY _2 = EQUALS _1001 = SETTER
    {let id =
  let _100 = _1001 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                 ( Id.id_of_string "setter" )
    in
                             ( id )
  in
                                      ( id )
in
let name =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                     ( Id.id_of_string "dictionary" )
    in
                                                 ( id )
  in
                                      ( id )
in
                                                 ( AttrNamedIdent(name, id) )}
| _1000 = DICTIONARY _2 = EQUALS id000 = ID
    {let id =
  let id00 = id000 in
  let id =
    let id0 = id00 in
    let id =
      let id = id0 in
                ( id )
    in
                                                 ( id )
  in
                                      ( id )
in
let name =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                     ( Id.id_of_string "dictionary" )
    in
                                                 ( id )
  in
                                      ( id )
in
                                                 ( AttrNamedIdent(name, id) )}
| _1000 = DICTIONARY _2 = EQUALS _1001 = DICTIONARY
    {let id =
  let _100 = _1001 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                     ( Id.id_of_string "dictionary" )
    in
                                                 ( id )
  in
                                      ( id )
in
let name =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                     ( Id.id_of_string "dictionary" )
    in
                                                 ( id )
  in
                                      ( id )
in
                                                 ( AttrNamedIdent(name, id) )}
| _1000 = DICTIONARY _2 = EQUALS _1001 = PARTIAL
    {let id =
  let _100 = _1001 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                  ( Id.id_of_string "partial" )
    in
                                                 ( id )
  in
                                      ( id )
in
let name =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                     ( Id.id_of_string "dictionary" )
    in
                                                 ( id )
  in
                                      ( id )
in
                                                 ( AttrNamedIdent(name, id) )}
| _1000 = PARTIAL _2 = EQUALS _10 = CONSTRUCTOR
    {let id =
  let _1 = _10 in
                  ( Id.id_of_string "Constructor" )
in
let name =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                  ( Id.id_of_string "partial" )
    in
                                                 ( id )
  in
                                      ( id )
in
                                                 ( AttrNamedIdent(name, id) )}
| _1000 = PARTIAL _2 = EQUALS _10 = NOTXPCOM
    {let id =
  let _1 = _10 in
               ( Id.id_of_string "notxpcom" )
in
let name =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                  ( Id.id_of_string "partial" )
    in
                                                 ( id )
  in
                                      ( id )
in
                                                 ( AttrNamedIdent(name, id) )}
| _1000 = PARTIAL _2 = EQUALS _10 = RETVAL
    {let id =
  let _1 = _10 in
             ( Id.id_of_string "retval" )
in
let name =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                  ( Id.id_of_string "partial" )
    in
                                                 ( id )
  in
                                      ( id )
in
                                                 ( AttrNamedIdent(name, id) )}
| _1000 = PARTIAL _2 = EQUALS _10 = UNSAFE
    {let id =
  let _1 = _10 in
             ( Id.id_of_string "unsafe" )
in
let name =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                  ( Id.id_of_string "partial" )
    in
                                                 ( id )
  in
                                      ( id )
in
                                                 ( AttrNamedIdent(name, id) )}
| _1000 = PARTIAL _2 = EQUALS _10 = PRIVATEBROWSINGCHECK
    {let id =
  let _1 = _10 in
                           ( Id.id_of_string "PrivateBrowsingCheck" )
in
let name =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                  ( Id.id_of_string "partial" )
    in
                                                 ( id )
  in
                                      ( id )
in
                                                 ( AttrNamedIdent(name, id) )}
| _1000 = PARTIAL _2 = EQUALS _10 = QUERYINTERFACETYPE
    {let id =
  let _1 = _10 in
                         ( Id.id_of_string "QueryInterfaceType" )
in
let name =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                  ( Id.id_of_string "partial" )
    in
                                                 ( id )
  in
                                      ( id )
in
                                                 ( AttrNamedIdent(name, id) )}
| _1000 = PARTIAL _2 = EQUALS _1001 = CREATOR
    {let id =
  let _100 = _1001 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                  ( Id.id_of_string "creator" )
    in
                             ( id )
  in
                                      ( id )
in
let name =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                  ( Id.id_of_string "partial" )
    in
                                                 ( id )
  in
                                      ( id )
in
                                                 ( AttrNamedIdent(name, id) )}
| _1000 = PARTIAL _2 = EQUALS _1001 = GETTER
    {let id =
  let _100 = _1001 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                 ( Id.id_of_string "getter" )
    in
                             ( id )
  in
                                      ( id )
in
let name =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                  ( Id.id_of_string "partial" )
    in
                                                 ( id )
  in
                                      ( id )
in
                                                 ( AttrNamedIdent(name, id) )}
| _1000 = PARTIAL _2 = EQUALS _1001 = SETTER
    {let id =
  let _100 = _1001 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                 ( Id.id_of_string "setter" )
    in
                             ( id )
  in
                                      ( id )
in
let name =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                  ( Id.id_of_string "partial" )
    in
                                                 ( id )
  in
                                      ( id )
in
                                                 ( AttrNamedIdent(name, id) )}
| _1000 = PARTIAL _2 = EQUALS id000 = ID
    {let id =
  let id00 = id000 in
  let id =
    let id0 = id00 in
    let id =
      let id = id0 in
                ( id )
    in
                                                 ( id )
  in
                                      ( id )
in
let name =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                  ( Id.id_of_string "partial" )
    in
                                                 ( id )
  in
                                      ( id )
in
                                                 ( AttrNamedIdent(name, id) )}
| _1000 = PARTIAL _2 = EQUALS _1001 = DICTIONARY
    {let id =
  let _100 = _1001 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                     ( Id.id_of_string "dictionary" )
    in
                                                 ( id )
  in
                                      ( id )
in
let name =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                  ( Id.id_of_string "partial" )
    in
                                                 ( id )
  in
                                      ( id )
in
                                                 ( AttrNamedIdent(name, id) )}
| _1000 = PARTIAL _2 = EQUALS _1001 = PARTIAL
    {let id =
  let _100 = _1001 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                  ( Id.id_of_string "partial" )
    in
                                                 ( id )
  in
                                      ( id )
in
let name =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                  ( Id.id_of_string "partial" )
    in
                                                 ( id )
  in
                                      ( id )
in
                                                 ( AttrNamedIdent(name, id) )}

extendedAttributeNamedArgList:
| _1 = NAMEDCONSTRUCTOR _2 = EQUALS name = ID _10 = LPAREN x0 = argumentList _30 = RPAREN
    {let args =
  let _3 = _30 in
  let x = x0 in
  let _1 = _10 in
      ( x )
in
                                                                                 ( NamedConstructor(name,args) )}
| _10 = CONSTRUCTOR _2 = EQUALS _11 = CONSTRUCTOR _12 = LPAREN xs00 = loption_separated_nonempty_list_COMMA_expr__ _30 = RPAREN
    {let args =
  let _3 = _30 in
  let xs0 = xs00 in
  let _1 = _12 in
  let x =
    let xs = xs0 in
        ( xs )
  in
      ( x )
in
let id =
  let _1 = _11 in
                  ( Id.id_of_string "Constructor" )
in
let name =
  let _1 = _10 in
                  ( Id.id_of_string "Constructor" )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _10 = CONSTRUCTOR _2 = EQUALS _11 = NOTXPCOM _12 = LPAREN xs00 = loption_separated_nonempty_list_COMMA_expr__ _30 = RPAREN
    {let args =
  let _3 = _30 in
  let xs0 = xs00 in
  let _1 = _12 in
  let x =
    let xs = xs0 in
        ( xs )
  in
      ( x )
in
let id =
  let _1 = _11 in
               ( Id.id_of_string "notxpcom" )
in
let name =
  let _1 = _10 in
                  ( Id.id_of_string "Constructor" )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _10 = CONSTRUCTOR _2 = EQUALS _11 = RETVAL _12 = LPAREN xs00 = loption_separated_nonempty_list_COMMA_expr__ _30 = RPAREN
    {let args =
  let _3 = _30 in
  let xs0 = xs00 in
  let _1 = _12 in
  let x =
    let xs = xs0 in
        ( xs )
  in
      ( x )
in
let id =
  let _1 = _11 in
             ( Id.id_of_string "retval" )
in
let name =
  let _1 = _10 in
                  ( Id.id_of_string "Constructor" )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _10 = CONSTRUCTOR _2 = EQUALS _11 = UNSAFE _12 = LPAREN xs00 = loption_separated_nonempty_list_COMMA_expr__ _30 = RPAREN
    {let args =
  let _3 = _30 in
  let xs0 = xs00 in
  let _1 = _12 in
  let x =
    let xs = xs0 in
        ( xs )
  in
      ( x )
in
let id =
  let _1 = _11 in
             ( Id.id_of_string "unsafe" )
in
let name =
  let _1 = _10 in
                  ( Id.id_of_string "Constructor" )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _10 = CONSTRUCTOR _2 = EQUALS _11 = PRIVATEBROWSINGCHECK _12 = LPAREN xs00 = loption_separated_nonempty_list_COMMA_expr__ _30 = RPAREN
    {let args =
  let _3 = _30 in
  let xs0 = xs00 in
  let _1 = _12 in
  let x =
    let xs = xs0 in
        ( xs )
  in
      ( x )
in
let id =
  let _1 = _11 in
                           ( Id.id_of_string "PrivateBrowsingCheck" )
in
let name =
  let _1 = _10 in
                  ( Id.id_of_string "Constructor" )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _10 = CONSTRUCTOR _2 = EQUALS _11 = QUERYINTERFACETYPE _12 = LPAREN xs00 = loption_separated_nonempty_list_COMMA_expr__ _30 = RPAREN
    {let args =
  let _3 = _30 in
  let xs0 = xs00 in
  let _1 = _12 in
  let x =
    let xs = xs0 in
        ( xs )
  in
      ( x )
in
let id =
  let _1 = _11 in
                         ( Id.id_of_string "QueryInterfaceType" )
in
let name =
  let _1 = _10 in
                  ( Id.id_of_string "Constructor" )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _10 = CONSTRUCTOR _2 = EQUALS _1000 = CREATOR _11 = LPAREN xs00 = loption_separated_nonempty_list_COMMA_expr__ _30 = RPAREN
    {let args =
  let _3 = _30 in
  let xs0 = xs00 in
  let _1 = _11 in
  let x =
    let xs = xs0 in
        ( xs )
  in
      ( x )
in
let id =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                  ( Id.id_of_string "creator" )
    in
                             ( id )
  in
                                      ( id )
in
let name =
  let _1 = _10 in
                  ( Id.id_of_string "Constructor" )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _10 = CONSTRUCTOR _2 = EQUALS _1000 = GETTER _11 = LPAREN xs00 = loption_separated_nonempty_list_COMMA_expr__ _30 = RPAREN
    {let args =
  let _3 = _30 in
  let xs0 = xs00 in
  let _1 = _11 in
  let x =
    let xs = xs0 in
        ( xs )
  in
      ( x )
in
let id =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                 ( Id.id_of_string "getter" )
    in
                             ( id )
  in
                                      ( id )
in
let name =
  let _1 = _10 in
                  ( Id.id_of_string "Constructor" )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _10 = CONSTRUCTOR _2 = EQUALS _1000 = SETTER _11 = LPAREN xs00 = loption_separated_nonempty_list_COMMA_expr__ _30 = RPAREN
    {let args =
  let _3 = _30 in
  let xs0 = xs00 in
  let _1 = _11 in
  let x =
    let xs = xs0 in
        ( xs )
  in
      ( x )
in
let id =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                 ( Id.id_of_string "setter" )
    in
                             ( id )
  in
                                      ( id )
in
let name =
  let _1 = _10 in
                  ( Id.id_of_string "Constructor" )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _10 = CONSTRUCTOR _2 = EQUALS id000 = ID _11 = LPAREN xs00 = loption_separated_nonempty_list_COMMA_expr__ _30 = RPAREN
    {let args =
  let _3 = _30 in
  let xs0 = xs00 in
  let _1 = _11 in
  let x =
    let xs = xs0 in
        ( xs )
  in
      ( x )
in
let id =
  let id00 = id000 in
  let id =
    let id0 = id00 in
    let id =
      let id = id0 in
                ( id )
    in
                                                 ( id )
  in
                                      ( id )
in
let name =
  let _1 = _10 in
                  ( Id.id_of_string "Constructor" )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _10 = CONSTRUCTOR _2 = EQUALS _1000 = DICTIONARY _11 = LPAREN xs00 = loption_separated_nonempty_list_COMMA_expr__ _30 = RPAREN
    {let args =
  let _3 = _30 in
  let xs0 = xs00 in
  let _1 = _11 in
  let x =
    let xs = xs0 in
        ( xs )
  in
      ( x )
in
let id =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                     ( Id.id_of_string "dictionary" )
    in
                                                 ( id )
  in
                                      ( id )
in
let name =
  let _1 = _10 in
                  ( Id.id_of_string "Constructor" )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _10 = CONSTRUCTOR _2 = EQUALS _1000 = PARTIAL _11 = LPAREN xs00 = loption_separated_nonempty_list_COMMA_expr__ _30 = RPAREN
    {let args =
  let _3 = _30 in
  let xs0 = xs00 in
  let _1 = _11 in
  let x =
    let xs = xs0 in
        ( xs )
  in
      ( x )
in
let id =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                  ( Id.id_of_string "partial" )
    in
                                                 ( id )
  in
                                      ( id )
in
let name =
  let _1 = _10 in
                  ( Id.id_of_string "Constructor" )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _10 = NOTXPCOM _2 = EQUALS _11 = CONSTRUCTOR _12 = LPAREN xs00 = loption_separated_nonempty_list_COMMA_expr__ _30 = RPAREN
    {let args =
  let _3 = _30 in
  let xs0 = xs00 in
  let _1 = _12 in
  let x =
    let xs = xs0 in
        ( xs )
  in
      ( x )
in
let id =
  let _1 = _11 in
                  ( Id.id_of_string "Constructor" )
in
let name =
  let _1 = _10 in
               ( Id.id_of_string "notxpcom" )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _10 = NOTXPCOM _2 = EQUALS _11 = NOTXPCOM _12 = LPAREN xs00 = loption_separated_nonempty_list_COMMA_expr__ _30 = RPAREN
    {let args =
  let _3 = _30 in
  let xs0 = xs00 in
  let _1 = _12 in
  let x =
    let xs = xs0 in
        ( xs )
  in
      ( x )
in
let id =
  let _1 = _11 in
               ( Id.id_of_string "notxpcom" )
in
let name =
  let _1 = _10 in
               ( Id.id_of_string "notxpcom" )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _10 = NOTXPCOM _2 = EQUALS _11 = RETVAL _12 = LPAREN xs00 = loption_separated_nonempty_list_COMMA_expr__ _30 = RPAREN
    {let args =
  let _3 = _30 in
  let xs0 = xs00 in
  let _1 = _12 in
  let x =
    let xs = xs0 in
        ( xs )
  in
      ( x )
in
let id =
  let _1 = _11 in
             ( Id.id_of_string "retval" )
in
let name =
  let _1 = _10 in
               ( Id.id_of_string "notxpcom" )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _10 = NOTXPCOM _2 = EQUALS _11 = UNSAFE _12 = LPAREN xs00 = loption_separated_nonempty_list_COMMA_expr__ _30 = RPAREN
    {let args =
  let _3 = _30 in
  let xs0 = xs00 in
  let _1 = _12 in
  let x =
    let xs = xs0 in
        ( xs )
  in
      ( x )
in
let id =
  let _1 = _11 in
             ( Id.id_of_string "unsafe" )
in
let name =
  let _1 = _10 in
               ( Id.id_of_string "notxpcom" )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _10 = NOTXPCOM _2 = EQUALS _11 = PRIVATEBROWSINGCHECK _12 = LPAREN xs00 = loption_separated_nonempty_list_COMMA_expr__ _30 = RPAREN
    {let args =
  let _3 = _30 in
  let xs0 = xs00 in
  let _1 = _12 in
  let x =
    let xs = xs0 in
        ( xs )
  in
      ( x )
in
let id =
  let _1 = _11 in
                           ( Id.id_of_string "PrivateBrowsingCheck" )
in
let name =
  let _1 = _10 in
               ( Id.id_of_string "notxpcom" )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _10 = NOTXPCOM _2 = EQUALS _11 = QUERYINTERFACETYPE _12 = LPAREN xs00 = loption_separated_nonempty_list_COMMA_expr__ _30 = RPAREN
    {let args =
  let _3 = _30 in
  let xs0 = xs00 in
  let _1 = _12 in
  let x =
    let xs = xs0 in
        ( xs )
  in
      ( x )
in
let id =
  let _1 = _11 in
                         ( Id.id_of_string "QueryInterfaceType" )
in
let name =
  let _1 = _10 in
               ( Id.id_of_string "notxpcom" )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _10 = NOTXPCOM _2 = EQUALS _1000 = CREATOR _11 = LPAREN xs00 = loption_separated_nonempty_list_COMMA_expr__ _30 = RPAREN
    {let args =
  let _3 = _30 in
  let xs0 = xs00 in
  let _1 = _11 in
  let x =
    let xs = xs0 in
        ( xs )
  in
      ( x )
in
let id =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                  ( Id.id_of_string "creator" )
    in
                             ( id )
  in
                                      ( id )
in
let name =
  let _1 = _10 in
               ( Id.id_of_string "notxpcom" )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _10 = NOTXPCOM _2 = EQUALS _1000 = GETTER _11 = LPAREN xs00 = loption_separated_nonempty_list_COMMA_expr__ _30 = RPAREN
    {let args =
  let _3 = _30 in
  let xs0 = xs00 in
  let _1 = _11 in
  let x =
    let xs = xs0 in
        ( xs )
  in
      ( x )
in
let id =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                 ( Id.id_of_string "getter" )
    in
                             ( id )
  in
                                      ( id )
in
let name =
  let _1 = _10 in
               ( Id.id_of_string "notxpcom" )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _10 = NOTXPCOM _2 = EQUALS _1000 = SETTER _11 = LPAREN xs00 = loption_separated_nonempty_list_COMMA_expr__ _30 = RPAREN
    {let args =
  let _3 = _30 in
  let xs0 = xs00 in
  let _1 = _11 in
  let x =
    let xs = xs0 in
        ( xs )
  in
      ( x )
in
let id =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                 ( Id.id_of_string "setter" )
    in
                             ( id )
  in
                                      ( id )
in
let name =
  let _1 = _10 in
               ( Id.id_of_string "notxpcom" )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _10 = NOTXPCOM _2 = EQUALS id000 = ID _11 = LPAREN xs00 = loption_separated_nonempty_list_COMMA_expr__ _30 = RPAREN
    {let args =
  let _3 = _30 in
  let xs0 = xs00 in
  let _1 = _11 in
  let x =
    let xs = xs0 in
        ( xs )
  in
      ( x )
in
let id =
  let id00 = id000 in
  let id =
    let id0 = id00 in
    let id =
      let id = id0 in
                ( id )
    in
                                                 ( id )
  in
                                      ( id )
in
let name =
  let _1 = _10 in
               ( Id.id_of_string "notxpcom" )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _10 = NOTXPCOM _2 = EQUALS _1000 = DICTIONARY _11 = LPAREN xs00 = loption_separated_nonempty_list_COMMA_expr__ _30 = RPAREN
    {let args =
  let _3 = _30 in
  let xs0 = xs00 in
  let _1 = _11 in
  let x =
    let xs = xs0 in
        ( xs )
  in
      ( x )
in
let id =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                     ( Id.id_of_string "dictionary" )
    in
                                                 ( id )
  in
                                      ( id )
in
let name =
  let _1 = _10 in
               ( Id.id_of_string "notxpcom" )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _10 = NOTXPCOM _2 = EQUALS _1000 = PARTIAL _11 = LPAREN xs00 = loption_separated_nonempty_list_COMMA_expr__ _30 = RPAREN
    {let args =
  let _3 = _30 in
  let xs0 = xs00 in
  let _1 = _11 in
  let x =
    let xs = xs0 in
        ( xs )
  in
      ( x )
in
let id =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                  ( Id.id_of_string "partial" )
    in
                                                 ( id )
  in
                                      ( id )
in
let name =
  let _1 = _10 in
               ( Id.id_of_string "notxpcom" )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _10 = RETVAL _2 = EQUALS _11 = CONSTRUCTOR _12 = LPAREN xs00 = loption_separated_nonempty_list_COMMA_expr__ _30 = RPAREN
    {let args =
  let _3 = _30 in
  let xs0 = xs00 in
  let _1 = _12 in
  let x =
    let xs = xs0 in
        ( xs )
  in
      ( x )
in
let id =
  let _1 = _11 in
                  ( Id.id_of_string "Constructor" )
in
let name =
  let _1 = _10 in
             ( Id.id_of_string "retval" )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _10 = RETVAL _2 = EQUALS _11 = NOTXPCOM _12 = LPAREN xs00 = loption_separated_nonempty_list_COMMA_expr__ _30 = RPAREN
    {let args =
  let _3 = _30 in
  let xs0 = xs00 in
  let _1 = _12 in
  let x =
    let xs = xs0 in
        ( xs )
  in
      ( x )
in
let id =
  let _1 = _11 in
               ( Id.id_of_string "notxpcom" )
in
let name =
  let _1 = _10 in
             ( Id.id_of_string "retval" )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _10 = RETVAL _2 = EQUALS _11 = RETVAL _12 = LPAREN xs00 = loption_separated_nonempty_list_COMMA_expr__ _30 = RPAREN
    {let args =
  let _3 = _30 in
  let xs0 = xs00 in
  let _1 = _12 in
  let x =
    let xs = xs0 in
        ( xs )
  in
      ( x )
in
let id =
  let _1 = _11 in
             ( Id.id_of_string "retval" )
in
let name =
  let _1 = _10 in
             ( Id.id_of_string "retval" )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _10 = RETVAL _2 = EQUALS _11 = UNSAFE _12 = LPAREN xs00 = loption_separated_nonempty_list_COMMA_expr__ _30 = RPAREN
    {let args =
  let _3 = _30 in
  let xs0 = xs00 in
  let _1 = _12 in
  let x =
    let xs = xs0 in
        ( xs )
  in
      ( x )
in
let id =
  let _1 = _11 in
             ( Id.id_of_string "unsafe" )
in
let name =
  let _1 = _10 in
             ( Id.id_of_string "retval" )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _10 = RETVAL _2 = EQUALS _11 = PRIVATEBROWSINGCHECK _12 = LPAREN xs00 = loption_separated_nonempty_list_COMMA_expr__ _30 = RPAREN
    {let args =
  let _3 = _30 in
  let xs0 = xs00 in
  let _1 = _12 in
  let x =
    let xs = xs0 in
        ( xs )
  in
      ( x )
in
let id =
  let _1 = _11 in
                           ( Id.id_of_string "PrivateBrowsingCheck" )
in
let name =
  let _1 = _10 in
             ( Id.id_of_string "retval" )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _10 = RETVAL _2 = EQUALS _11 = QUERYINTERFACETYPE _12 = LPAREN xs00 = loption_separated_nonempty_list_COMMA_expr__ _30 = RPAREN
    {let args =
  let _3 = _30 in
  let xs0 = xs00 in
  let _1 = _12 in
  let x =
    let xs = xs0 in
        ( xs )
  in
      ( x )
in
let id =
  let _1 = _11 in
                         ( Id.id_of_string "QueryInterfaceType" )
in
let name =
  let _1 = _10 in
             ( Id.id_of_string "retval" )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _10 = RETVAL _2 = EQUALS _1000 = CREATOR _11 = LPAREN xs00 = loption_separated_nonempty_list_COMMA_expr__ _30 = RPAREN
    {let args =
  let _3 = _30 in
  let xs0 = xs00 in
  let _1 = _11 in
  let x =
    let xs = xs0 in
        ( xs )
  in
      ( x )
in
let id =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                  ( Id.id_of_string "creator" )
    in
                             ( id )
  in
                                      ( id )
in
let name =
  let _1 = _10 in
             ( Id.id_of_string "retval" )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _10 = RETVAL _2 = EQUALS _1000 = GETTER _11 = LPAREN xs00 = loption_separated_nonempty_list_COMMA_expr__ _30 = RPAREN
    {let args =
  let _3 = _30 in
  let xs0 = xs00 in
  let _1 = _11 in
  let x =
    let xs = xs0 in
        ( xs )
  in
      ( x )
in
let id =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                 ( Id.id_of_string "getter" )
    in
                             ( id )
  in
                                      ( id )
in
let name =
  let _1 = _10 in
             ( Id.id_of_string "retval" )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _10 = RETVAL _2 = EQUALS _1000 = SETTER _11 = LPAREN xs00 = loption_separated_nonempty_list_COMMA_expr__ _30 = RPAREN
    {let args =
  let _3 = _30 in
  let xs0 = xs00 in
  let _1 = _11 in
  let x =
    let xs = xs0 in
        ( xs )
  in
      ( x )
in
let id =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                 ( Id.id_of_string "setter" )
    in
                             ( id )
  in
                                      ( id )
in
let name =
  let _1 = _10 in
             ( Id.id_of_string "retval" )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _10 = RETVAL _2 = EQUALS id000 = ID _11 = LPAREN xs00 = loption_separated_nonempty_list_COMMA_expr__ _30 = RPAREN
    {let args =
  let _3 = _30 in
  let xs0 = xs00 in
  let _1 = _11 in
  let x =
    let xs = xs0 in
        ( xs )
  in
      ( x )
in
let id =
  let id00 = id000 in
  let id =
    let id0 = id00 in
    let id =
      let id = id0 in
                ( id )
    in
                                                 ( id )
  in
                                      ( id )
in
let name =
  let _1 = _10 in
             ( Id.id_of_string "retval" )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _10 = RETVAL _2 = EQUALS _1000 = DICTIONARY _11 = LPAREN xs00 = loption_separated_nonempty_list_COMMA_expr__ _30 = RPAREN
    {let args =
  let _3 = _30 in
  let xs0 = xs00 in
  let _1 = _11 in
  let x =
    let xs = xs0 in
        ( xs )
  in
      ( x )
in
let id =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                     ( Id.id_of_string "dictionary" )
    in
                                                 ( id )
  in
                                      ( id )
in
let name =
  let _1 = _10 in
             ( Id.id_of_string "retval" )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _10 = RETVAL _2 = EQUALS _1000 = PARTIAL _11 = LPAREN xs00 = loption_separated_nonempty_list_COMMA_expr__ _30 = RPAREN
    {let args =
  let _3 = _30 in
  let xs0 = xs00 in
  let _1 = _11 in
  let x =
    let xs = xs0 in
        ( xs )
  in
      ( x )
in
let id =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                  ( Id.id_of_string "partial" )
    in
                                                 ( id )
  in
                                      ( id )
in
let name =
  let _1 = _10 in
             ( Id.id_of_string "retval" )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _10 = UNSAFE _2 = EQUALS _11 = CONSTRUCTOR _12 = LPAREN xs00 = loption_separated_nonempty_list_COMMA_expr__ _30 = RPAREN
    {let args =
  let _3 = _30 in
  let xs0 = xs00 in
  let _1 = _12 in
  let x =
    let xs = xs0 in
        ( xs )
  in
      ( x )
in
let id =
  let _1 = _11 in
                  ( Id.id_of_string "Constructor" )
in
let name =
  let _1 = _10 in
             ( Id.id_of_string "unsafe" )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _10 = UNSAFE _2 = EQUALS _11 = NOTXPCOM _12 = LPAREN xs00 = loption_separated_nonempty_list_COMMA_expr__ _30 = RPAREN
    {let args =
  let _3 = _30 in
  let xs0 = xs00 in
  let _1 = _12 in
  let x =
    let xs = xs0 in
        ( xs )
  in
      ( x )
in
let id =
  let _1 = _11 in
               ( Id.id_of_string "notxpcom" )
in
let name =
  let _1 = _10 in
             ( Id.id_of_string "unsafe" )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _10 = UNSAFE _2 = EQUALS _11 = RETVAL _12 = LPAREN xs00 = loption_separated_nonempty_list_COMMA_expr__ _30 = RPAREN
    {let args =
  let _3 = _30 in
  let xs0 = xs00 in
  let _1 = _12 in
  let x =
    let xs = xs0 in
        ( xs )
  in
      ( x )
in
let id =
  let _1 = _11 in
             ( Id.id_of_string "retval" )
in
let name =
  let _1 = _10 in
             ( Id.id_of_string "unsafe" )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _10 = UNSAFE _2 = EQUALS _11 = UNSAFE _12 = LPAREN xs00 = loption_separated_nonempty_list_COMMA_expr__ _30 = RPAREN
    {let args =
  let _3 = _30 in
  let xs0 = xs00 in
  let _1 = _12 in
  let x =
    let xs = xs0 in
        ( xs )
  in
      ( x )
in
let id =
  let _1 = _11 in
             ( Id.id_of_string "unsafe" )
in
let name =
  let _1 = _10 in
             ( Id.id_of_string "unsafe" )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _10 = UNSAFE _2 = EQUALS _11 = PRIVATEBROWSINGCHECK _12 = LPAREN xs00 = loption_separated_nonempty_list_COMMA_expr__ _30 = RPAREN
    {let args =
  let _3 = _30 in
  let xs0 = xs00 in
  let _1 = _12 in
  let x =
    let xs = xs0 in
        ( xs )
  in
      ( x )
in
let id =
  let _1 = _11 in
                           ( Id.id_of_string "PrivateBrowsingCheck" )
in
let name =
  let _1 = _10 in
             ( Id.id_of_string "unsafe" )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _10 = UNSAFE _2 = EQUALS _11 = QUERYINTERFACETYPE _12 = LPAREN xs00 = loption_separated_nonempty_list_COMMA_expr__ _30 = RPAREN
    {let args =
  let _3 = _30 in
  let xs0 = xs00 in
  let _1 = _12 in
  let x =
    let xs = xs0 in
        ( xs )
  in
      ( x )
in
let id =
  let _1 = _11 in
                         ( Id.id_of_string "QueryInterfaceType" )
in
let name =
  let _1 = _10 in
             ( Id.id_of_string "unsafe" )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _10 = UNSAFE _2 = EQUALS _1000 = CREATOR _11 = LPAREN xs00 = loption_separated_nonempty_list_COMMA_expr__ _30 = RPAREN
    {let args =
  let _3 = _30 in
  let xs0 = xs00 in
  let _1 = _11 in
  let x =
    let xs = xs0 in
        ( xs )
  in
      ( x )
in
let id =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                  ( Id.id_of_string "creator" )
    in
                             ( id )
  in
                                      ( id )
in
let name =
  let _1 = _10 in
             ( Id.id_of_string "unsafe" )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _10 = UNSAFE _2 = EQUALS _1000 = GETTER _11 = LPAREN xs00 = loption_separated_nonempty_list_COMMA_expr__ _30 = RPAREN
    {let args =
  let _3 = _30 in
  let xs0 = xs00 in
  let _1 = _11 in
  let x =
    let xs = xs0 in
        ( xs )
  in
      ( x )
in
let id =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                 ( Id.id_of_string "getter" )
    in
                             ( id )
  in
                                      ( id )
in
let name =
  let _1 = _10 in
             ( Id.id_of_string "unsafe" )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _10 = UNSAFE _2 = EQUALS _1000 = SETTER _11 = LPAREN xs00 = loption_separated_nonempty_list_COMMA_expr__ _30 = RPAREN
    {let args =
  let _3 = _30 in
  let xs0 = xs00 in
  let _1 = _11 in
  let x =
    let xs = xs0 in
        ( xs )
  in
      ( x )
in
let id =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                 ( Id.id_of_string "setter" )
    in
                             ( id )
  in
                                      ( id )
in
let name =
  let _1 = _10 in
             ( Id.id_of_string "unsafe" )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _10 = UNSAFE _2 = EQUALS id000 = ID _11 = LPAREN xs00 = loption_separated_nonempty_list_COMMA_expr__ _30 = RPAREN
    {let args =
  let _3 = _30 in
  let xs0 = xs00 in
  let _1 = _11 in
  let x =
    let xs = xs0 in
        ( xs )
  in
      ( x )
in
let id =
  let id00 = id000 in
  let id =
    let id0 = id00 in
    let id =
      let id = id0 in
                ( id )
    in
                                                 ( id )
  in
                                      ( id )
in
let name =
  let _1 = _10 in
             ( Id.id_of_string "unsafe" )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _10 = UNSAFE _2 = EQUALS _1000 = DICTIONARY _11 = LPAREN xs00 = loption_separated_nonempty_list_COMMA_expr__ _30 = RPAREN
    {let args =
  let _3 = _30 in
  let xs0 = xs00 in
  let _1 = _11 in
  let x =
    let xs = xs0 in
        ( xs )
  in
      ( x )
in
let id =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                     ( Id.id_of_string "dictionary" )
    in
                                                 ( id )
  in
                                      ( id )
in
let name =
  let _1 = _10 in
             ( Id.id_of_string "unsafe" )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _10 = UNSAFE _2 = EQUALS _1000 = PARTIAL _11 = LPAREN xs00 = loption_separated_nonempty_list_COMMA_expr__ _30 = RPAREN
    {let args =
  let _3 = _30 in
  let xs0 = xs00 in
  let _1 = _11 in
  let x =
    let xs = xs0 in
        ( xs )
  in
      ( x )
in
let id =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                  ( Id.id_of_string "partial" )
    in
                                                 ( id )
  in
                                      ( id )
in
let name =
  let _1 = _10 in
             ( Id.id_of_string "unsafe" )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _10 = PRIVATEBROWSINGCHECK _2 = EQUALS _11 = CONSTRUCTOR _12 = LPAREN xs00 = loption_separated_nonempty_list_COMMA_expr__ _30 = RPAREN
    {let args =
  let _3 = _30 in
  let xs0 = xs00 in
  let _1 = _12 in
  let x =
    let xs = xs0 in
        ( xs )
  in
      ( x )
in
let id =
  let _1 = _11 in
                  ( Id.id_of_string "Constructor" )
in
let name =
  let _1 = _10 in
                           ( Id.id_of_string "PrivateBrowsingCheck" )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _10 = PRIVATEBROWSINGCHECK _2 = EQUALS _11 = NOTXPCOM _12 = LPAREN xs00 = loption_separated_nonempty_list_COMMA_expr__ _30 = RPAREN
    {let args =
  let _3 = _30 in
  let xs0 = xs00 in
  let _1 = _12 in
  let x =
    let xs = xs0 in
        ( xs )
  in
      ( x )
in
let id =
  let _1 = _11 in
               ( Id.id_of_string "notxpcom" )
in
let name =
  let _1 = _10 in
                           ( Id.id_of_string "PrivateBrowsingCheck" )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _10 = PRIVATEBROWSINGCHECK _2 = EQUALS _11 = RETVAL _12 = LPAREN xs00 = loption_separated_nonempty_list_COMMA_expr__ _30 = RPAREN
    {let args =
  let _3 = _30 in
  let xs0 = xs00 in
  let _1 = _12 in
  let x =
    let xs = xs0 in
        ( xs )
  in
      ( x )
in
let id =
  let _1 = _11 in
             ( Id.id_of_string "retval" )
in
let name =
  let _1 = _10 in
                           ( Id.id_of_string "PrivateBrowsingCheck" )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _10 = PRIVATEBROWSINGCHECK _2 = EQUALS _11 = UNSAFE _12 = LPAREN xs00 = loption_separated_nonempty_list_COMMA_expr__ _30 = RPAREN
    {let args =
  let _3 = _30 in
  let xs0 = xs00 in
  let _1 = _12 in
  let x =
    let xs = xs0 in
        ( xs )
  in
      ( x )
in
let id =
  let _1 = _11 in
             ( Id.id_of_string "unsafe" )
in
let name =
  let _1 = _10 in
                           ( Id.id_of_string "PrivateBrowsingCheck" )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _10 = PRIVATEBROWSINGCHECK _2 = EQUALS _11 = PRIVATEBROWSINGCHECK _12 = LPAREN xs00 = loption_separated_nonempty_list_COMMA_expr__ _30 = RPAREN
    {let args =
  let _3 = _30 in
  let xs0 = xs00 in
  let _1 = _12 in
  let x =
    let xs = xs0 in
        ( xs )
  in
      ( x )
in
let id =
  let _1 = _11 in
                           ( Id.id_of_string "PrivateBrowsingCheck" )
in
let name =
  let _1 = _10 in
                           ( Id.id_of_string "PrivateBrowsingCheck" )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _10 = PRIVATEBROWSINGCHECK _2 = EQUALS _11 = QUERYINTERFACETYPE _12 = LPAREN xs00 = loption_separated_nonempty_list_COMMA_expr__ _30 = RPAREN
    {let args =
  let _3 = _30 in
  let xs0 = xs00 in
  let _1 = _12 in
  let x =
    let xs = xs0 in
        ( xs )
  in
      ( x )
in
let id =
  let _1 = _11 in
                         ( Id.id_of_string "QueryInterfaceType" )
in
let name =
  let _1 = _10 in
                           ( Id.id_of_string "PrivateBrowsingCheck" )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _10 = PRIVATEBROWSINGCHECK _2 = EQUALS _1000 = CREATOR _11 = LPAREN xs00 = loption_separated_nonempty_list_COMMA_expr__ _30 = RPAREN
    {let args =
  let _3 = _30 in
  let xs0 = xs00 in
  let _1 = _11 in
  let x =
    let xs = xs0 in
        ( xs )
  in
      ( x )
in
let id =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                  ( Id.id_of_string "creator" )
    in
                             ( id )
  in
                                      ( id )
in
let name =
  let _1 = _10 in
                           ( Id.id_of_string "PrivateBrowsingCheck" )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _10 = PRIVATEBROWSINGCHECK _2 = EQUALS _1000 = GETTER _11 = LPAREN xs00 = loption_separated_nonempty_list_COMMA_expr__ _30 = RPAREN
    {let args =
  let _3 = _30 in
  let xs0 = xs00 in
  let _1 = _11 in
  let x =
    let xs = xs0 in
        ( xs )
  in
      ( x )
in
let id =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                 ( Id.id_of_string "getter" )
    in
                             ( id )
  in
                                      ( id )
in
let name =
  let _1 = _10 in
                           ( Id.id_of_string "PrivateBrowsingCheck" )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _10 = PRIVATEBROWSINGCHECK _2 = EQUALS _1000 = SETTER _11 = LPAREN xs00 = loption_separated_nonempty_list_COMMA_expr__ _30 = RPAREN
    {let args =
  let _3 = _30 in
  let xs0 = xs00 in
  let _1 = _11 in
  let x =
    let xs = xs0 in
        ( xs )
  in
      ( x )
in
let id =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                 ( Id.id_of_string "setter" )
    in
                             ( id )
  in
                                      ( id )
in
let name =
  let _1 = _10 in
                           ( Id.id_of_string "PrivateBrowsingCheck" )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _10 = PRIVATEBROWSINGCHECK _2 = EQUALS id000 = ID _11 = LPAREN xs00 = loption_separated_nonempty_list_COMMA_expr__ _30 = RPAREN
    {let args =
  let _3 = _30 in
  let xs0 = xs00 in
  let _1 = _11 in
  let x =
    let xs = xs0 in
        ( xs )
  in
      ( x )
in
let id =
  let id00 = id000 in
  let id =
    let id0 = id00 in
    let id =
      let id = id0 in
                ( id )
    in
                                                 ( id )
  in
                                      ( id )
in
let name =
  let _1 = _10 in
                           ( Id.id_of_string "PrivateBrowsingCheck" )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _10 = PRIVATEBROWSINGCHECK _2 = EQUALS _1000 = DICTIONARY _11 = LPAREN xs00 = loption_separated_nonempty_list_COMMA_expr__ _30 = RPAREN
    {let args =
  let _3 = _30 in
  let xs0 = xs00 in
  let _1 = _11 in
  let x =
    let xs = xs0 in
        ( xs )
  in
      ( x )
in
let id =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                     ( Id.id_of_string "dictionary" )
    in
                                                 ( id )
  in
                                      ( id )
in
let name =
  let _1 = _10 in
                           ( Id.id_of_string "PrivateBrowsingCheck" )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _10 = PRIVATEBROWSINGCHECK _2 = EQUALS _1000 = PARTIAL _11 = LPAREN xs00 = loption_separated_nonempty_list_COMMA_expr__ _30 = RPAREN
    {let args =
  let _3 = _30 in
  let xs0 = xs00 in
  let _1 = _11 in
  let x =
    let xs = xs0 in
        ( xs )
  in
      ( x )
in
let id =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                  ( Id.id_of_string "partial" )
    in
                                                 ( id )
  in
                                      ( id )
in
let name =
  let _1 = _10 in
                           ( Id.id_of_string "PrivateBrowsingCheck" )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _10 = QUERYINTERFACETYPE _2 = EQUALS _11 = CONSTRUCTOR _12 = LPAREN xs00 = loption_separated_nonempty_list_COMMA_expr__ _30 = RPAREN
    {let args =
  let _3 = _30 in
  let xs0 = xs00 in
  let _1 = _12 in
  let x =
    let xs = xs0 in
        ( xs )
  in
      ( x )
in
let id =
  let _1 = _11 in
                  ( Id.id_of_string "Constructor" )
in
let name =
  let _1 = _10 in
                         ( Id.id_of_string "QueryInterfaceType" )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _10 = QUERYINTERFACETYPE _2 = EQUALS _11 = NOTXPCOM _12 = LPAREN xs00 = loption_separated_nonempty_list_COMMA_expr__ _30 = RPAREN
    {let args =
  let _3 = _30 in
  let xs0 = xs00 in
  let _1 = _12 in
  let x =
    let xs = xs0 in
        ( xs )
  in
      ( x )
in
let id =
  let _1 = _11 in
               ( Id.id_of_string "notxpcom" )
in
let name =
  let _1 = _10 in
                         ( Id.id_of_string "QueryInterfaceType" )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _10 = QUERYINTERFACETYPE _2 = EQUALS _11 = RETVAL _12 = LPAREN xs00 = loption_separated_nonempty_list_COMMA_expr__ _30 = RPAREN
    {let args =
  let _3 = _30 in
  let xs0 = xs00 in
  let _1 = _12 in
  let x =
    let xs = xs0 in
        ( xs )
  in
      ( x )
in
let id =
  let _1 = _11 in
             ( Id.id_of_string "retval" )
in
let name =
  let _1 = _10 in
                         ( Id.id_of_string "QueryInterfaceType" )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _10 = QUERYINTERFACETYPE _2 = EQUALS _11 = UNSAFE _12 = LPAREN xs00 = loption_separated_nonempty_list_COMMA_expr__ _30 = RPAREN
    {let args =
  let _3 = _30 in
  let xs0 = xs00 in
  let _1 = _12 in
  let x =
    let xs = xs0 in
        ( xs )
  in
      ( x )
in
let id =
  let _1 = _11 in
             ( Id.id_of_string "unsafe" )
in
let name =
  let _1 = _10 in
                         ( Id.id_of_string "QueryInterfaceType" )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _10 = QUERYINTERFACETYPE _2 = EQUALS _11 = PRIVATEBROWSINGCHECK _12 = LPAREN xs00 = loption_separated_nonempty_list_COMMA_expr__ _30 = RPAREN
    {let args =
  let _3 = _30 in
  let xs0 = xs00 in
  let _1 = _12 in
  let x =
    let xs = xs0 in
        ( xs )
  in
      ( x )
in
let id =
  let _1 = _11 in
                           ( Id.id_of_string "PrivateBrowsingCheck" )
in
let name =
  let _1 = _10 in
                         ( Id.id_of_string "QueryInterfaceType" )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _10 = QUERYINTERFACETYPE _2 = EQUALS _11 = QUERYINTERFACETYPE _12 = LPAREN xs00 = loption_separated_nonempty_list_COMMA_expr__ _30 = RPAREN
    {let args =
  let _3 = _30 in
  let xs0 = xs00 in
  let _1 = _12 in
  let x =
    let xs = xs0 in
        ( xs )
  in
      ( x )
in
let id =
  let _1 = _11 in
                         ( Id.id_of_string "QueryInterfaceType" )
in
let name =
  let _1 = _10 in
                         ( Id.id_of_string "QueryInterfaceType" )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _10 = QUERYINTERFACETYPE _2 = EQUALS _1000 = CREATOR _11 = LPAREN xs00 = loption_separated_nonempty_list_COMMA_expr__ _30 = RPAREN
    {let args =
  let _3 = _30 in
  let xs0 = xs00 in
  let _1 = _11 in
  let x =
    let xs = xs0 in
        ( xs )
  in
      ( x )
in
let id =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                  ( Id.id_of_string "creator" )
    in
                             ( id )
  in
                                      ( id )
in
let name =
  let _1 = _10 in
                         ( Id.id_of_string "QueryInterfaceType" )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _10 = QUERYINTERFACETYPE _2 = EQUALS _1000 = GETTER _11 = LPAREN xs00 = loption_separated_nonempty_list_COMMA_expr__ _30 = RPAREN
    {let args =
  let _3 = _30 in
  let xs0 = xs00 in
  let _1 = _11 in
  let x =
    let xs = xs0 in
        ( xs )
  in
      ( x )
in
let id =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                 ( Id.id_of_string "getter" )
    in
                             ( id )
  in
                                      ( id )
in
let name =
  let _1 = _10 in
                         ( Id.id_of_string "QueryInterfaceType" )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _10 = QUERYINTERFACETYPE _2 = EQUALS _1000 = SETTER _11 = LPAREN xs00 = loption_separated_nonempty_list_COMMA_expr__ _30 = RPAREN
    {let args =
  let _3 = _30 in
  let xs0 = xs00 in
  let _1 = _11 in
  let x =
    let xs = xs0 in
        ( xs )
  in
      ( x )
in
let id =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                 ( Id.id_of_string "setter" )
    in
                             ( id )
  in
                                      ( id )
in
let name =
  let _1 = _10 in
                         ( Id.id_of_string "QueryInterfaceType" )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _10 = QUERYINTERFACETYPE _2 = EQUALS id000 = ID _11 = LPAREN xs00 = loption_separated_nonempty_list_COMMA_expr__ _30 = RPAREN
    {let args =
  let _3 = _30 in
  let xs0 = xs00 in
  let _1 = _11 in
  let x =
    let xs = xs0 in
        ( xs )
  in
      ( x )
in
let id =
  let id00 = id000 in
  let id =
    let id0 = id00 in
    let id =
      let id = id0 in
                ( id )
    in
                                                 ( id )
  in
                                      ( id )
in
let name =
  let _1 = _10 in
                         ( Id.id_of_string "QueryInterfaceType" )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _10 = QUERYINTERFACETYPE _2 = EQUALS _1000 = DICTIONARY _11 = LPAREN xs00 = loption_separated_nonempty_list_COMMA_expr__ _30 = RPAREN
    {let args =
  let _3 = _30 in
  let xs0 = xs00 in
  let _1 = _11 in
  let x =
    let xs = xs0 in
        ( xs )
  in
      ( x )
in
let id =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                     ( Id.id_of_string "dictionary" )
    in
                                                 ( id )
  in
                                      ( id )
in
let name =
  let _1 = _10 in
                         ( Id.id_of_string "QueryInterfaceType" )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _10 = QUERYINTERFACETYPE _2 = EQUALS _1000 = PARTIAL _11 = LPAREN xs00 = loption_separated_nonempty_list_COMMA_expr__ _30 = RPAREN
    {let args =
  let _3 = _30 in
  let xs0 = xs00 in
  let _1 = _11 in
  let x =
    let xs = xs0 in
        ( xs )
  in
      ( x )
in
let id =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                  ( Id.id_of_string "partial" )
    in
                                                 ( id )
  in
                                      ( id )
in
let name =
  let _1 = _10 in
                         ( Id.id_of_string "QueryInterfaceType" )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1000 = CREATOR _2 = EQUALS _10 = CONSTRUCTOR _11 = LPAREN xs00 = loption_separated_nonempty_list_COMMA_expr__ _30 = RPAREN
    {let args =
  let _3 = _30 in
  let xs0 = xs00 in
  let _1 = _11 in
  let x =
    let xs = xs0 in
        ( xs )
  in
      ( x )
in
let id =
  let _1 = _10 in
                  ( Id.id_of_string "Constructor" )
in
let name =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                  ( Id.id_of_string "creator" )
    in
                             ( id )
  in
                                      ( id )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1000 = CREATOR _2 = EQUALS _10 = NOTXPCOM _11 = LPAREN xs00 = loption_separated_nonempty_list_COMMA_expr__ _30 = RPAREN
    {let args =
  let _3 = _30 in
  let xs0 = xs00 in
  let _1 = _11 in
  let x =
    let xs = xs0 in
        ( xs )
  in
      ( x )
in
let id =
  let _1 = _10 in
               ( Id.id_of_string "notxpcom" )
in
let name =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                  ( Id.id_of_string "creator" )
    in
                             ( id )
  in
                                      ( id )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1000 = CREATOR _2 = EQUALS _10 = RETVAL _11 = LPAREN xs00 = loption_separated_nonempty_list_COMMA_expr__ _30 = RPAREN
    {let args =
  let _3 = _30 in
  let xs0 = xs00 in
  let _1 = _11 in
  let x =
    let xs = xs0 in
        ( xs )
  in
      ( x )
in
let id =
  let _1 = _10 in
             ( Id.id_of_string "retval" )
in
let name =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                  ( Id.id_of_string "creator" )
    in
                             ( id )
  in
                                      ( id )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1000 = CREATOR _2 = EQUALS _10 = UNSAFE _11 = LPAREN xs00 = loption_separated_nonempty_list_COMMA_expr__ _30 = RPAREN
    {let args =
  let _3 = _30 in
  let xs0 = xs00 in
  let _1 = _11 in
  let x =
    let xs = xs0 in
        ( xs )
  in
      ( x )
in
let id =
  let _1 = _10 in
             ( Id.id_of_string "unsafe" )
in
let name =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                  ( Id.id_of_string "creator" )
    in
                             ( id )
  in
                                      ( id )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1000 = CREATOR _2 = EQUALS _10 = PRIVATEBROWSINGCHECK _11 = LPAREN xs00 = loption_separated_nonempty_list_COMMA_expr__ _30 = RPAREN
    {let args =
  let _3 = _30 in
  let xs0 = xs00 in
  let _1 = _11 in
  let x =
    let xs = xs0 in
        ( xs )
  in
      ( x )
in
let id =
  let _1 = _10 in
                           ( Id.id_of_string "PrivateBrowsingCheck" )
in
let name =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                  ( Id.id_of_string "creator" )
    in
                             ( id )
  in
                                      ( id )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1000 = CREATOR _2 = EQUALS _10 = QUERYINTERFACETYPE _11 = LPAREN xs00 = loption_separated_nonempty_list_COMMA_expr__ _30 = RPAREN
    {let args =
  let _3 = _30 in
  let xs0 = xs00 in
  let _1 = _11 in
  let x =
    let xs = xs0 in
        ( xs )
  in
      ( x )
in
let id =
  let _1 = _10 in
                         ( Id.id_of_string "QueryInterfaceType" )
in
let name =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                  ( Id.id_of_string "creator" )
    in
                             ( id )
  in
                                      ( id )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1000 = CREATOR _2 = EQUALS _1001 = CREATOR _10 = LPAREN xs00 = loption_separated_nonempty_list_COMMA_expr__ _30 = RPAREN
    {let args =
  let _3 = _30 in
  let xs0 = xs00 in
  let _1 = _10 in
  let x =
    let xs = xs0 in
        ( xs )
  in
      ( x )
in
let id =
  let _100 = _1001 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                  ( Id.id_of_string "creator" )
    in
                             ( id )
  in
                                      ( id )
in
let name =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                  ( Id.id_of_string "creator" )
    in
                             ( id )
  in
                                      ( id )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1000 = CREATOR _2 = EQUALS _1001 = GETTER _10 = LPAREN xs00 = loption_separated_nonempty_list_COMMA_expr__ _30 = RPAREN
    {let args =
  let _3 = _30 in
  let xs0 = xs00 in
  let _1 = _10 in
  let x =
    let xs = xs0 in
        ( xs )
  in
      ( x )
in
let id =
  let _100 = _1001 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                 ( Id.id_of_string "getter" )
    in
                             ( id )
  in
                                      ( id )
in
let name =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                  ( Id.id_of_string "creator" )
    in
                             ( id )
  in
                                      ( id )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1000 = CREATOR _2 = EQUALS _1001 = SETTER _10 = LPAREN xs00 = loption_separated_nonempty_list_COMMA_expr__ _30 = RPAREN
    {let args =
  let _3 = _30 in
  let xs0 = xs00 in
  let _1 = _10 in
  let x =
    let xs = xs0 in
        ( xs )
  in
      ( x )
in
let id =
  let _100 = _1001 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                 ( Id.id_of_string "setter" )
    in
                             ( id )
  in
                                      ( id )
in
let name =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                  ( Id.id_of_string "creator" )
    in
                             ( id )
  in
                                      ( id )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1000 = CREATOR _2 = EQUALS id000 = ID _10 = LPAREN xs00 = loption_separated_nonempty_list_COMMA_expr__ _30 = RPAREN
    {let args =
  let _3 = _30 in
  let xs0 = xs00 in
  let _1 = _10 in
  let x =
    let xs = xs0 in
        ( xs )
  in
      ( x )
in
let id =
  let id00 = id000 in
  let id =
    let id0 = id00 in
    let id =
      let id = id0 in
                ( id )
    in
                                                 ( id )
  in
                                      ( id )
in
let name =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                  ( Id.id_of_string "creator" )
    in
                             ( id )
  in
                                      ( id )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1000 = CREATOR _2 = EQUALS _1001 = DICTIONARY _10 = LPAREN xs00 = loption_separated_nonempty_list_COMMA_expr__ _30 = RPAREN
    {let args =
  let _3 = _30 in
  let xs0 = xs00 in
  let _1 = _10 in
  let x =
    let xs = xs0 in
        ( xs )
  in
      ( x )
in
let id =
  let _100 = _1001 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                     ( Id.id_of_string "dictionary" )
    in
                                                 ( id )
  in
                                      ( id )
in
let name =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                  ( Id.id_of_string "creator" )
    in
                             ( id )
  in
                                      ( id )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1000 = CREATOR _2 = EQUALS _1001 = PARTIAL _10 = LPAREN xs00 = loption_separated_nonempty_list_COMMA_expr__ _30 = RPAREN
    {let args =
  let _3 = _30 in
  let xs0 = xs00 in
  let _1 = _10 in
  let x =
    let xs = xs0 in
        ( xs )
  in
      ( x )
in
let id =
  let _100 = _1001 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                  ( Id.id_of_string "partial" )
    in
                                                 ( id )
  in
                                      ( id )
in
let name =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                  ( Id.id_of_string "creator" )
    in
                             ( id )
  in
                                      ( id )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1000 = GETTER _2 = EQUALS _10 = CONSTRUCTOR _11 = LPAREN xs00 = loption_separated_nonempty_list_COMMA_expr__ _30 = RPAREN
    {let args =
  let _3 = _30 in
  let xs0 = xs00 in
  let _1 = _11 in
  let x =
    let xs = xs0 in
        ( xs )
  in
      ( x )
in
let id =
  let _1 = _10 in
                  ( Id.id_of_string "Constructor" )
in
let name =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                 ( Id.id_of_string "getter" )
    in
                             ( id )
  in
                                      ( id )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1000 = GETTER _2 = EQUALS _10 = NOTXPCOM _11 = LPAREN xs00 = loption_separated_nonempty_list_COMMA_expr__ _30 = RPAREN
    {let args =
  let _3 = _30 in
  let xs0 = xs00 in
  let _1 = _11 in
  let x =
    let xs = xs0 in
        ( xs )
  in
      ( x )
in
let id =
  let _1 = _10 in
               ( Id.id_of_string "notxpcom" )
in
let name =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                 ( Id.id_of_string "getter" )
    in
                             ( id )
  in
                                      ( id )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1000 = GETTER _2 = EQUALS _10 = RETVAL _11 = LPAREN xs00 = loption_separated_nonempty_list_COMMA_expr__ _30 = RPAREN
    {let args =
  let _3 = _30 in
  let xs0 = xs00 in
  let _1 = _11 in
  let x =
    let xs = xs0 in
        ( xs )
  in
      ( x )
in
let id =
  let _1 = _10 in
             ( Id.id_of_string "retval" )
in
let name =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                 ( Id.id_of_string "getter" )
    in
                             ( id )
  in
                                      ( id )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1000 = GETTER _2 = EQUALS _10 = UNSAFE _11 = LPAREN xs00 = loption_separated_nonempty_list_COMMA_expr__ _30 = RPAREN
    {let args =
  let _3 = _30 in
  let xs0 = xs00 in
  let _1 = _11 in
  let x =
    let xs = xs0 in
        ( xs )
  in
      ( x )
in
let id =
  let _1 = _10 in
             ( Id.id_of_string "unsafe" )
in
let name =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                 ( Id.id_of_string "getter" )
    in
                             ( id )
  in
                                      ( id )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1000 = GETTER _2 = EQUALS _10 = PRIVATEBROWSINGCHECK _11 = LPAREN xs00 = loption_separated_nonempty_list_COMMA_expr__ _30 = RPAREN
    {let args =
  let _3 = _30 in
  let xs0 = xs00 in
  let _1 = _11 in
  let x =
    let xs = xs0 in
        ( xs )
  in
      ( x )
in
let id =
  let _1 = _10 in
                           ( Id.id_of_string "PrivateBrowsingCheck" )
in
let name =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                 ( Id.id_of_string "getter" )
    in
                             ( id )
  in
                                      ( id )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1000 = GETTER _2 = EQUALS _10 = QUERYINTERFACETYPE _11 = LPAREN xs00 = loption_separated_nonempty_list_COMMA_expr__ _30 = RPAREN
    {let args =
  let _3 = _30 in
  let xs0 = xs00 in
  let _1 = _11 in
  let x =
    let xs = xs0 in
        ( xs )
  in
      ( x )
in
let id =
  let _1 = _10 in
                         ( Id.id_of_string "QueryInterfaceType" )
in
let name =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                 ( Id.id_of_string "getter" )
    in
                             ( id )
  in
                                      ( id )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1000 = GETTER _2 = EQUALS _1001 = CREATOR _10 = LPAREN xs00 = loption_separated_nonempty_list_COMMA_expr__ _30 = RPAREN
    {let args =
  let _3 = _30 in
  let xs0 = xs00 in
  let _1 = _10 in
  let x =
    let xs = xs0 in
        ( xs )
  in
      ( x )
in
let id =
  let _100 = _1001 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                  ( Id.id_of_string "creator" )
    in
                             ( id )
  in
                                      ( id )
in
let name =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                 ( Id.id_of_string "getter" )
    in
                             ( id )
  in
                                      ( id )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1000 = GETTER _2 = EQUALS _1001 = GETTER _10 = LPAREN xs00 = loption_separated_nonempty_list_COMMA_expr__ _30 = RPAREN
    {let args =
  let _3 = _30 in
  let xs0 = xs00 in
  let _1 = _10 in
  let x =
    let xs = xs0 in
        ( xs )
  in
      ( x )
in
let id =
  let _100 = _1001 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                 ( Id.id_of_string "getter" )
    in
                             ( id )
  in
                                      ( id )
in
let name =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                 ( Id.id_of_string "getter" )
    in
                             ( id )
  in
                                      ( id )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1000 = GETTER _2 = EQUALS _1001 = SETTER _10 = LPAREN xs00 = loption_separated_nonempty_list_COMMA_expr__ _30 = RPAREN
    {let args =
  let _3 = _30 in
  let xs0 = xs00 in
  let _1 = _10 in
  let x =
    let xs = xs0 in
        ( xs )
  in
      ( x )
in
let id =
  let _100 = _1001 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                 ( Id.id_of_string "setter" )
    in
                             ( id )
  in
                                      ( id )
in
let name =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                 ( Id.id_of_string "getter" )
    in
                             ( id )
  in
                                      ( id )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1000 = GETTER _2 = EQUALS id000 = ID _10 = LPAREN xs00 = loption_separated_nonempty_list_COMMA_expr__ _30 = RPAREN
    {let args =
  let _3 = _30 in
  let xs0 = xs00 in
  let _1 = _10 in
  let x =
    let xs = xs0 in
        ( xs )
  in
      ( x )
in
let id =
  let id00 = id000 in
  let id =
    let id0 = id00 in
    let id =
      let id = id0 in
                ( id )
    in
                                                 ( id )
  in
                                      ( id )
in
let name =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                 ( Id.id_of_string "getter" )
    in
                             ( id )
  in
                                      ( id )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1000 = GETTER _2 = EQUALS _1001 = DICTIONARY _10 = LPAREN xs00 = loption_separated_nonempty_list_COMMA_expr__ _30 = RPAREN
    {let args =
  let _3 = _30 in
  let xs0 = xs00 in
  let _1 = _10 in
  let x =
    let xs = xs0 in
        ( xs )
  in
      ( x )
in
let id =
  let _100 = _1001 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                     ( Id.id_of_string "dictionary" )
    in
                                                 ( id )
  in
                                      ( id )
in
let name =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                 ( Id.id_of_string "getter" )
    in
                             ( id )
  in
                                      ( id )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1000 = GETTER _2 = EQUALS _1001 = PARTIAL _10 = LPAREN xs00 = loption_separated_nonempty_list_COMMA_expr__ _30 = RPAREN
    {let args =
  let _3 = _30 in
  let xs0 = xs00 in
  let _1 = _10 in
  let x =
    let xs = xs0 in
        ( xs )
  in
      ( x )
in
let id =
  let _100 = _1001 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                  ( Id.id_of_string "partial" )
    in
                                                 ( id )
  in
                                      ( id )
in
let name =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                 ( Id.id_of_string "getter" )
    in
                             ( id )
  in
                                      ( id )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1000 = SETTER _2 = EQUALS _10 = CONSTRUCTOR _11 = LPAREN xs00 = loption_separated_nonempty_list_COMMA_expr__ _30 = RPAREN
    {let args =
  let _3 = _30 in
  let xs0 = xs00 in
  let _1 = _11 in
  let x =
    let xs = xs0 in
        ( xs )
  in
      ( x )
in
let id =
  let _1 = _10 in
                  ( Id.id_of_string "Constructor" )
in
let name =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                 ( Id.id_of_string "setter" )
    in
                             ( id )
  in
                                      ( id )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1000 = SETTER _2 = EQUALS _10 = NOTXPCOM _11 = LPAREN xs00 = loption_separated_nonempty_list_COMMA_expr__ _30 = RPAREN
    {let args =
  let _3 = _30 in
  let xs0 = xs00 in
  let _1 = _11 in
  let x =
    let xs = xs0 in
        ( xs )
  in
      ( x )
in
let id =
  let _1 = _10 in
               ( Id.id_of_string "notxpcom" )
in
let name =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                 ( Id.id_of_string "setter" )
    in
                             ( id )
  in
                                      ( id )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1000 = SETTER _2 = EQUALS _10 = RETVAL _11 = LPAREN xs00 = loption_separated_nonempty_list_COMMA_expr__ _30 = RPAREN
    {let args =
  let _3 = _30 in
  let xs0 = xs00 in
  let _1 = _11 in
  let x =
    let xs = xs0 in
        ( xs )
  in
      ( x )
in
let id =
  let _1 = _10 in
             ( Id.id_of_string "retval" )
in
let name =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                 ( Id.id_of_string "setter" )
    in
                             ( id )
  in
                                      ( id )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1000 = SETTER _2 = EQUALS _10 = UNSAFE _11 = LPAREN xs00 = loption_separated_nonempty_list_COMMA_expr__ _30 = RPAREN
    {let args =
  let _3 = _30 in
  let xs0 = xs00 in
  let _1 = _11 in
  let x =
    let xs = xs0 in
        ( xs )
  in
      ( x )
in
let id =
  let _1 = _10 in
             ( Id.id_of_string "unsafe" )
in
let name =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                 ( Id.id_of_string "setter" )
    in
                             ( id )
  in
                                      ( id )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1000 = SETTER _2 = EQUALS _10 = PRIVATEBROWSINGCHECK _11 = LPAREN xs00 = loption_separated_nonempty_list_COMMA_expr__ _30 = RPAREN
    {let args =
  let _3 = _30 in
  let xs0 = xs00 in
  let _1 = _11 in
  let x =
    let xs = xs0 in
        ( xs )
  in
      ( x )
in
let id =
  let _1 = _10 in
                           ( Id.id_of_string "PrivateBrowsingCheck" )
in
let name =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                 ( Id.id_of_string "setter" )
    in
                             ( id )
  in
                                      ( id )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1000 = SETTER _2 = EQUALS _10 = QUERYINTERFACETYPE _11 = LPAREN xs00 = loption_separated_nonempty_list_COMMA_expr__ _30 = RPAREN
    {let args =
  let _3 = _30 in
  let xs0 = xs00 in
  let _1 = _11 in
  let x =
    let xs = xs0 in
        ( xs )
  in
      ( x )
in
let id =
  let _1 = _10 in
                         ( Id.id_of_string "QueryInterfaceType" )
in
let name =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                 ( Id.id_of_string "setter" )
    in
                             ( id )
  in
                                      ( id )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1000 = SETTER _2 = EQUALS _1001 = CREATOR _10 = LPAREN xs00 = loption_separated_nonempty_list_COMMA_expr__ _30 = RPAREN
    {let args =
  let _3 = _30 in
  let xs0 = xs00 in
  let _1 = _10 in
  let x =
    let xs = xs0 in
        ( xs )
  in
      ( x )
in
let id =
  let _100 = _1001 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                  ( Id.id_of_string "creator" )
    in
                             ( id )
  in
                                      ( id )
in
let name =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                 ( Id.id_of_string "setter" )
    in
                             ( id )
  in
                                      ( id )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1000 = SETTER _2 = EQUALS _1001 = GETTER _10 = LPAREN xs00 = loption_separated_nonempty_list_COMMA_expr__ _30 = RPAREN
    {let args =
  let _3 = _30 in
  let xs0 = xs00 in
  let _1 = _10 in
  let x =
    let xs = xs0 in
        ( xs )
  in
      ( x )
in
let id =
  let _100 = _1001 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                 ( Id.id_of_string "getter" )
    in
                             ( id )
  in
                                      ( id )
in
let name =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                 ( Id.id_of_string "setter" )
    in
                             ( id )
  in
                                      ( id )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1000 = SETTER _2 = EQUALS _1001 = SETTER _10 = LPAREN xs00 = loption_separated_nonempty_list_COMMA_expr__ _30 = RPAREN
    {let args =
  let _3 = _30 in
  let xs0 = xs00 in
  let _1 = _10 in
  let x =
    let xs = xs0 in
        ( xs )
  in
      ( x )
in
let id =
  let _100 = _1001 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                 ( Id.id_of_string "setter" )
    in
                             ( id )
  in
                                      ( id )
in
let name =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                 ( Id.id_of_string "setter" )
    in
                             ( id )
  in
                                      ( id )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1000 = SETTER _2 = EQUALS id000 = ID _10 = LPAREN xs00 = loption_separated_nonempty_list_COMMA_expr__ _30 = RPAREN
    {let args =
  let _3 = _30 in
  let xs0 = xs00 in
  let _1 = _10 in
  let x =
    let xs = xs0 in
        ( xs )
  in
      ( x )
in
let id =
  let id00 = id000 in
  let id =
    let id0 = id00 in
    let id =
      let id = id0 in
                ( id )
    in
                                                 ( id )
  in
                                      ( id )
in
let name =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                 ( Id.id_of_string "setter" )
    in
                             ( id )
  in
                                      ( id )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1000 = SETTER _2 = EQUALS _1001 = DICTIONARY _10 = LPAREN xs00 = loption_separated_nonempty_list_COMMA_expr__ _30 = RPAREN
    {let args =
  let _3 = _30 in
  let xs0 = xs00 in
  let _1 = _10 in
  let x =
    let xs = xs0 in
        ( xs )
  in
      ( x )
in
let id =
  let _100 = _1001 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                     ( Id.id_of_string "dictionary" )
    in
                                                 ( id )
  in
                                      ( id )
in
let name =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                 ( Id.id_of_string "setter" )
    in
                             ( id )
  in
                                      ( id )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1000 = SETTER _2 = EQUALS _1001 = PARTIAL _10 = LPAREN xs00 = loption_separated_nonempty_list_COMMA_expr__ _30 = RPAREN
    {let args =
  let _3 = _30 in
  let xs0 = xs00 in
  let _1 = _10 in
  let x =
    let xs = xs0 in
        ( xs )
  in
      ( x )
in
let id =
  let _100 = _1001 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                  ( Id.id_of_string "partial" )
    in
                                                 ( id )
  in
                                      ( id )
in
let name =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                 ( Id.id_of_string "setter" )
    in
                             ( id )
  in
                                      ( id )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| id000 = ID _2 = EQUALS _10 = CONSTRUCTOR _11 = LPAREN xs00 = loption_separated_nonempty_list_COMMA_expr__ _30 = RPAREN
    {let args =
  let _3 = _30 in
  let xs0 = xs00 in
  let _1 = _11 in
  let x =
    let xs = xs0 in
        ( xs )
  in
      ( x )
in
let id =
  let _1 = _10 in
                  ( Id.id_of_string "Constructor" )
in
let name =
  let id00 = id000 in
  let id =
    let id0 = id00 in
    let id =
      let id = id0 in
                ( id )
    in
                                                 ( id )
  in
                                      ( id )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| id000 = ID _2 = EQUALS _10 = NOTXPCOM _11 = LPAREN xs00 = loption_separated_nonempty_list_COMMA_expr__ _30 = RPAREN
    {let args =
  let _3 = _30 in
  let xs0 = xs00 in
  let _1 = _11 in
  let x =
    let xs = xs0 in
        ( xs )
  in
      ( x )
in
let id =
  let _1 = _10 in
               ( Id.id_of_string "notxpcom" )
in
let name =
  let id00 = id000 in
  let id =
    let id0 = id00 in
    let id =
      let id = id0 in
                ( id )
    in
                                                 ( id )
  in
                                      ( id )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| id000 = ID _2 = EQUALS _10 = RETVAL _11 = LPAREN xs00 = loption_separated_nonempty_list_COMMA_expr__ _30 = RPAREN
    {let args =
  let _3 = _30 in
  let xs0 = xs00 in
  let _1 = _11 in
  let x =
    let xs = xs0 in
        ( xs )
  in
      ( x )
in
let id =
  let _1 = _10 in
             ( Id.id_of_string "retval" )
in
let name =
  let id00 = id000 in
  let id =
    let id0 = id00 in
    let id =
      let id = id0 in
                ( id )
    in
                                                 ( id )
  in
                                      ( id )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| id000 = ID _2 = EQUALS _10 = UNSAFE _11 = LPAREN xs00 = loption_separated_nonempty_list_COMMA_expr__ _30 = RPAREN
    {let args =
  let _3 = _30 in
  let xs0 = xs00 in
  let _1 = _11 in
  let x =
    let xs = xs0 in
        ( xs )
  in
      ( x )
in
let id =
  let _1 = _10 in
             ( Id.id_of_string "unsafe" )
in
let name =
  let id00 = id000 in
  let id =
    let id0 = id00 in
    let id =
      let id = id0 in
                ( id )
    in
                                                 ( id )
  in
                                      ( id )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| id000 = ID _2 = EQUALS _10 = PRIVATEBROWSINGCHECK _11 = LPAREN xs00 = loption_separated_nonempty_list_COMMA_expr__ _30 = RPAREN
    {let args =
  let _3 = _30 in
  let xs0 = xs00 in
  let _1 = _11 in
  let x =
    let xs = xs0 in
        ( xs )
  in
      ( x )
in
let id =
  let _1 = _10 in
                           ( Id.id_of_string "PrivateBrowsingCheck" )
in
let name =
  let id00 = id000 in
  let id =
    let id0 = id00 in
    let id =
      let id = id0 in
                ( id )
    in
                                                 ( id )
  in
                                      ( id )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| id000 = ID _2 = EQUALS _10 = QUERYINTERFACETYPE _11 = LPAREN xs00 = loption_separated_nonempty_list_COMMA_expr__ _30 = RPAREN
    {let args =
  let _3 = _30 in
  let xs0 = xs00 in
  let _1 = _11 in
  let x =
    let xs = xs0 in
        ( xs )
  in
      ( x )
in
let id =
  let _1 = _10 in
                         ( Id.id_of_string "QueryInterfaceType" )
in
let name =
  let id00 = id000 in
  let id =
    let id0 = id00 in
    let id =
      let id = id0 in
                ( id )
    in
                                                 ( id )
  in
                                      ( id )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| id000 = ID _2 = EQUALS _1000 = CREATOR _10 = LPAREN xs00 = loption_separated_nonempty_list_COMMA_expr__ _30 = RPAREN
    {let args =
  let _3 = _30 in
  let xs0 = xs00 in
  let _1 = _10 in
  let x =
    let xs = xs0 in
        ( xs )
  in
      ( x )
in
let id =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                  ( Id.id_of_string "creator" )
    in
                             ( id )
  in
                                      ( id )
in
let name =
  let id00 = id000 in
  let id =
    let id0 = id00 in
    let id =
      let id = id0 in
                ( id )
    in
                                                 ( id )
  in
                                      ( id )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| id000 = ID _2 = EQUALS _1000 = GETTER _10 = LPAREN xs00 = loption_separated_nonempty_list_COMMA_expr__ _30 = RPAREN
    {let args =
  let _3 = _30 in
  let xs0 = xs00 in
  let _1 = _10 in
  let x =
    let xs = xs0 in
        ( xs )
  in
      ( x )
in
let id =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                 ( Id.id_of_string "getter" )
    in
                             ( id )
  in
                                      ( id )
in
let name =
  let id00 = id000 in
  let id =
    let id0 = id00 in
    let id =
      let id = id0 in
                ( id )
    in
                                                 ( id )
  in
                                      ( id )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| id000 = ID _2 = EQUALS _1000 = SETTER _10 = LPAREN xs00 = loption_separated_nonempty_list_COMMA_expr__ _30 = RPAREN
    {let args =
  let _3 = _30 in
  let xs0 = xs00 in
  let _1 = _10 in
  let x =
    let xs = xs0 in
        ( xs )
  in
      ( x )
in
let id =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                 ( Id.id_of_string "setter" )
    in
                             ( id )
  in
                                      ( id )
in
let name =
  let id00 = id000 in
  let id =
    let id0 = id00 in
    let id =
      let id = id0 in
                ( id )
    in
                                                 ( id )
  in
                                      ( id )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| id000 = ID _2 = EQUALS id001 = ID _10 = LPAREN xs00 = loption_separated_nonempty_list_COMMA_expr__ _30 = RPAREN
    {let args =
  let _3 = _30 in
  let xs0 = xs00 in
  let _1 = _10 in
  let x =
    let xs = xs0 in
        ( xs )
  in
      ( x )
in
let id =
  let id00 = id001 in
  let id =
    let id0 = id00 in
    let id =
      let id = id0 in
                ( id )
    in
                                                 ( id )
  in
                                      ( id )
in
let name =
  let id00 = id000 in
  let id =
    let id0 = id00 in
    let id =
      let id = id0 in
                ( id )
    in
                                                 ( id )
  in
                                      ( id )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| id000 = ID _2 = EQUALS _1000 = DICTIONARY _10 = LPAREN xs00 = loption_separated_nonempty_list_COMMA_expr__ _30 = RPAREN
    {let args =
  let _3 = _30 in
  let xs0 = xs00 in
  let _1 = _10 in
  let x =
    let xs = xs0 in
        ( xs )
  in
      ( x )
in
let id =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                     ( Id.id_of_string "dictionary" )
    in
                                                 ( id )
  in
                                      ( id )
in
let name =
  let id00 = id000 in
  let id =
    let id0 = id00 in
    let id =
      let id = id0 in
                ( id )
    in
                                                 ( id )
  in
                                      ( id )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| id000 = ID _2 = EQUALS _1000 = PARTIAL _10 = LPAREN xs00 = loption_separated_nonempty_list_COMMA_expr__ _30 = RPAREN
    {let args =
  let _3 = _30 in
  let xs0 = xs00 in
  let _1 = _10 in
  let x =
    let xs = xs0 in
        ( xs )
  in
      ( x )
in
let id =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                  ( Id.id_of_string "partial" )
    in
                                                 ( id )
  in
                                      ( id )
in
let name =
  let id00 = id000 in
  let id =
    let id0 = id00 in
    let id =
      let id = id0 in
                ( id )
    in
                                                 ( id )
  in
                                      ( id )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1000 = DICTIONARY _2 = EQUALS _10 = CONSTRUCTOR _11 = LPAREN xs00 = loption_separated_nonempty_list_COMMA_expr__ _30 = RPAREN
    {let args =
  let _3 = _30 in
  let xs0 = xs00 in
  let _1 = _11 in
  let x =
    let xs = xs0 in
        ( xs )
  in
      ( x )
in
let id =
  let _1 = _10 in
                  ( Id.id_of_string "Constructor" )
in
let name =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                     ( Id.id_of_string "dictionary" )
    in
                                                 ( id )
  in
                                      ( id )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1000 = DICTIONARY _2 = EQUALS _10 = NOTXPCOM _11 = LPAREN xs00 = loption_separated_nonempty_list_COMMA_expr__ _30 = RPAREN
    {let args =
  let _3 = _30 in
  let xs0 = xs00 in
  let _1 = _11 in
  let x =
    let xs = xs0 in
        ( xs )
  in
      ( x )
in
let id =
  let _1 = _10 in
               ( Id.id_of_string "notxpcom" )
in
let name =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                     ( Id.id_of_string "dictionary" )
    in
                                                 ( id )
  in
                                      ( id )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1000 = DICTIONARY _2 = EQUALS _10 = RETVAL _11 = LPAREN xs00 = loption_separated_nonempty_list_COMMA_expr__ _30 = RPAREN
    {let args =
  let _3 = _30 in
  let xs0 = xs00 in
  let _1 = _11 in
  let x =
    let xs = xs0 in
        ( xs )
  in
      ( x )
in
let id =
  let _1 = _10 in
             ( Id.id_of_string "retval" )
in
let name =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                     ( Id.id_of_string "dictionary" )
    in
                                                 ( id )
  in
                                      ( id )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1000 = DICTIONARY _2 = EQUALS _10 = UNSAFE _11 = LPAREN xs00 = loption_separated_nonempty_list_COMMA_expr__ _30 = RPAREN
    {let args =
  let _3 = _30 in
  let xs0 = xs00 in
  let _1 = _11 in
  let x =
    let xs = xs0 in
        ( xs )
  in
      ( x )
in
let id =
  let _1 = _10 in
             ( Id.id_of_string "unsafe" )
in
let name =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                     ( Id.id_of_string "dictionary" )
    in
                                                 ( id )
  in
                                      ( id )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1000 = DICTIONARY _2 = EQUALS _10 = PRIVATEBROWSINGCHECK _11 = LPAREN xs00 = loption_separated_nonempty_list_COMMA_expr__ _30 = RPAREN
    {let args =
  let _3 = _30 in
  let xs0 = xs00 in
  let _1 = _11 in
  let x =
    let xs = xs0 in
        ( xs )
  in
      ( x )
in
let id =
  let _1 = _10 in
                           ( Id.id_of_string "PrivateBrowsingCheck" )
in
let name =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                     ( Id.id_of_string "dictionary" )
    in
                                                 ( id )
  in
                                      ( id )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1000 = DICTIONARY _2 = EQUALS _10 = QUERYINTERFACETYPE _11 = LPAREN xs00 = loption_separated_nonempty_list_COMMA_expr__ _30 = RPAREN
    {let args =
  let _3 = _30 in
  let xs0 = xs00 in
  let _1 = _11 in
  let x =
    let xs = xs0 in
        ( xs )
  in
      ( x )
in
let id =
  let _1 = _10 in
                         ( Id.id_of_string "QueryInterfaceType" )
in
let name =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                     ( Id.id_of_string "dictionary" )
    in
                                                 ( id )
  in
                                      ( id )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1000 = DICTIONARY _2 = EQUALS _1001 = CREATOR _10 = LPAREN xs00 = loption_separated_nonempty_list_COMMA_expr__ _30 = RPAREN
    {let args =
  let _3 = _30 in
  let xs0 = xs00 in
  let _1 = _10 in
  let x =
    let xs = xs0 in
        ( xs )
  in
      ( x )
in
let id =
  let _100 = _1001 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                  ( Id.id_of_string "creator" )
    in
                             ( id )
  in
                                      ( id )
in
let name =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                     ( Id.id_of_string "dictionary" )
    in
                                                 ( id )
  in
                                      ( id )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1000 = DICTIONARY _2 = EQUALS _1001 = GETTER _10 = LPAREN xs00 = loption_separated_nonempty_list_COMMA_expr__ _30 = RPAREN
    {let args =
  let _3 = _30 in
  let xs0 = xs00 in
  let _1 = _10 in
  let x =
    let xs = xs0 in
        ( xs )
  in
      ( x )
in
let id =
  let _100 = _1001 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                 ( Id.id_of_string "getter" )
    in
                             ( id )
  in
                                      ( id )
in
let name =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                     ( Id.id_of_string "dictionary" )
    in
                                                 ( id )
  in
                                      ( id )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1000 = DICTIONARY _2 = EQUALS _1001 = SETTER _10 = LPAREN xs00 = loption_separated_nonempty_list_COMMA_expr__ _30 = RPAREN
    {let args =
  let _3 = _30 in
  let xs0 = xs00 in
  let _1 = _10 in
  let x =
    let xs = xs0 in
        ( xs )
  in
      ( x )
in
let id =
  let _100 = _1001 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                 ( Id.id_of_string "setter" )
    in
                             ( id )
  in
                                      ( id )
in
let name =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                     ( Id.id_of_string "dictionary" )
    in
                                                 ( id )
  in
                                      ( id )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1000 = DICTIONARY _2 = EQUALS id000 = ID _10 = LPAREN xs00 = loption_separated_nonempty_list_COMMA_expr__ _30 = RPAREN
    {let args =
  let _3 = _30 in
  let xs0 = xs00 in
  let _1 = _10 in
  let x =
    let xs = xs0 in
        ( xs )
  in
      ( x )
in
let id =
  let id00 = id000 in
  let id =
    let id0 = id00 in
    let id =
      let id = id0 in
                ( id )
    in
                                                 ( id )
  in
                                      ( id )
in
let name =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                     ( Id.id_of_string "dictionary" )
    in
                                                 ( id )
  in
                                      ( id )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1000 = DICTIONARY _2 = EQUALS _1001 = DICTIONARY _10 = LPAREN xs00 = loption_separated_nonempty_list_COMMA_expr__ _30 = RPAREN
    {let args =
  let _3 = _30 in
  let xs0 = xs00 in
  let _1 = _10 in
  let x =
    let xs = xs0 in
        ( xs )
  in
      ( x )
in
let id =
  let _100 = _1001 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                     ( Id.id_of_string "dictionary" )
    in
                                                 ( id )
  in
                                      ( id )
in
let name =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                     ( Id.id_of_string "dictionary" )
    in
                                                 ( id )
  in
                                      ( id )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1000 = DICTIONARY _2 = EQUALS _1001 = PARTIAL _10 = LPAREN xs00 = loption_separated_nonempty_list_COMMA_expr__ _30 = RPAREN
    {let args =
  let _3 = _30 in
  let xs0 = xs00 in
  let _1 = _10 in
  let x =
    let xs = xs0 in
        ( xs )
  in
      ( x )
in
let id =
  let _100 = _1001 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                  ( Id.id_of_string "partial" )
    in
                                                 ( id )
  in
                                      ( id )
in
let name =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                     ( Id.id_of_string "dictionary" )
    in
                                                 ( id )
  in
                                      ( id )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1000 = PARTIAL _2 = EQUALS _10 = CONSTRUCTOR _11 = LPAREN xs00 = loption_separated_nonempty_list_COMMA_expr__ _30 = RPAREN
    {let args =
  let _3 = _30 in
  let xs0 = xs00 in
  let _1 = _11 in
  let x =
    let xs = xs0 in
        ( xs )
  in
      ( x )
in
let id =
  let _1 = _10 in
                  ( Id.id_of_string "Constructor" )
in
let name =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                  ( Id.id_of_string "partial" )
    in
                                                 ( id )
  in
                                      ( id )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1000 = PARTIAL _2 = EQUALS _10 = NOTXPCOM _11 = LPAREN xs00 = loption_separated_nonempty_list_COMMA_expr__ _30 = RPAREN
    {let args =
  let _3 = _30 in
  let xs0 = xs00 in
  let _1 = _11 in
  let x =
    let xs = xs0 in
        ( xs )
  in
      ( x )
in
let id =
  let _1 = _10 in
               ( Id.id_of_string "notxpcom" )
in
let name =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                  ( Id.id_of_string "partial" )
    in
                                                 ( id )
  in
                                      ( id )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1000 = PARTIAL _2 = EQUALS _10 = RETVAL _11 = LPAREN xs00 = loption_separated_nonempty_list_COMMA_expr__ _30 = RPAREN
    {let args =
  let _3 = _30 in
  let xs0 = xs00 in
  let _1 = _11 in
  let x =
    let xs = xs0 in
        ( xs )
  in
      ( x )
in
let id =
  let _1 = _10 in
             ( Id.id_of_string "retval" )
in
let name =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                  ( Id.id_of_string "partial" )
    in
                                                 ( id )
  in
                                      ( id )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1000 = PARTIAL _2 = EQUALS _10 = UNSAFE _11 = LPAREN xs00 = loption_separated_nonempty_list_COMMA_expr__ _30 = RPAREN
    {let args =
  let _3 = _30 in
  let xs0 = xs00 in
  let _1 = _11 in
  let x =
    let xs = xs0 in
        ( xs )
  in
      ( x )
in
let id =
  let _1 = _10 in
             ( Id.id_of_string "unsafe" )
in
let name =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                  ( Id.id_of_string "partial" )
    in
                                                 ( id )
  in
                                      ( id )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1000 = PARTIAL _2 = EQUALS _10 = PRIVATEBROWSINGCHECK _11 = LPAREN xs00 = loption_separated_nonempty_list_COMMA_expr__ _30 = RPAREN
    {let args =
  let _3 = _30 in
  let xs0 = xs00 in
  let _1 = _11 in
  let x =
    let xs = xs0 in
        ( xs )
  in
      ( x )
in
let id =
  let _1 = _10 in
                           ( Id.id_of_string "PrivateBrowsingCheck" )
in
let name =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                  ( Id.id_of_string "partial" )
    in
                                                 ( id )
  in
                                      ( id )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1000 = PARTIAL _2 = EQUALS _10 = QUERYINTERFACETYPE _11 = LPAREN xs00 = loption_separated_nonempty_list_COMMA_expr__ _30 = RPAREN
    {let args =
  let _3 = _30 in
  let xs0 = xs00 in
  let _1 = _11 in
  let x =
    let xs = xs0 in
        ( xs )
  in
      ( x )
in
let id =
  let _1 = _10 in
                         ( Id.id_of_string "QueryInterfaceType" )
in
let name =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                  ( Id.id_of_string "partial" )
    in
                                                 ( id )
  in
                                      ( id )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1000 = PARTIAL _2 = EQUALS _1001 = CREATOR _10 = LPAREN xs00 = loption_separated_nonempty_list_COMMA_expr__ _30 = RPAREN
    {let args =
  let _3 = _30 in
  let xs0 = xs00 in
  let _1 = _10 in
  let x =
    let xs = xs0 in
        ( xs )
  in
      ( x )
in
let id =
  let _100 = _1001 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                  ( Id.id_of_string "creator" )
    in
                             ( id )
  in
                                      ( id )
in
let name =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                  ( Id.id_of_string "partial" )
    in
                                                 ( id )
  in
                                      ( id )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1000 = PARTIAL _2 = EQUALS _1001 = GETTER _10 = LPAREN xs00 = loption_separated_nonempty_list_COMMA_expr__ _30 = RPAREN
    {let args =
  let _3 = _30 in
  let xs0 = xs00 in
  let _1 = _10 in
  let x =
    let xs = xs0 in
        ( xs )
  in
      ( x )
in
let id =
  let _100 = _1001 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                 ( Id.id_of_string "getter" )
    in
                             ( id )
  in
                                      ( id )
in
let name =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                  ( Id.id_of_string "partial" )
    in
                                                 ( id )
  in
                                      ( id )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1000 = PARTIAL _2 = EQUALS _1001 = SETTER _10 = LPAREN xs00 = loption_separated_nonempty_list_COMMA_expr__ _30 = RPAREN
    {let args =
  let _3 = _30 in
  let xs0 = xs00 in
  let _1 = _10 in
  let x =
    let xs = xs0 in
        ( xs )
  in
      ( x )
in
let id =
  let _100 = _1001 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                 ( Id.id_of_string "setter" )
    in
                             ( id )
  in
                                      ( id )
in
let name =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                  ( Id.id_of_string "partial" )
    in
                                                 ( id )
  in
                                      ( id )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1000 = PARTIAL _2 = EQUALS id000 = ID _10 = LPAREN xs00 = loption_separated_nonempty_list_COMMA_expr__ _30 = RPAREN
    {let args =
  let _3 = _30 in
  let xs0 = xs00 in
  let _1 = _10 in
  let x =
    let xs = xs0 in
        ( xs )
  in
      ( x )
in
let id =
  let id00 = id000 in
  let id =
    let id0 = id00 in
    let id =
      let id = id0 in
                ( id )
    in
                                                 ( id )
  in
                                      ( id )
in
let name =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                  ( Id.id_of_string "partial" )
    in
                                                 ( id )
  in
                                      ( id )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1000 = PARTIAL _2 = EQUALS _1001 = DICTIONARY _10 = LPAREN xs00 = loption_separated_nonempty_list_COMMA_expr__ _30 = RPAREN
    {let args =
  let _3 = _30 in
  let xs0 = xs00 in
  let _1 = _10 in
  let x =
    let xs = xs0 in
        ( xs )
  in
      ( x )
in
let id =
  let _100 = _1001 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                     ( Id.id_of_string "dictionary" )
    in
                                                 ( id )
  in
                                      ( id )
in
let name =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                  ( Id.id_of_string "partial" )
    in
                                                 ( id )
  in
                                      ( id )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1000 = PARTIAL _2 = EQUALS _1001 = PARTIAL _10 = LPAREN xs00 = loption_separated_nonempty_list_COMMA_expr__ _30 = RPAREN
    {let args =
  let _3 = _30 in
  let xs0 = xs00 in
  let _1 = _10 in
  let x =
    let xs = xs0 in
        ( xs )
  in
      ( x )
in
let id =
  let _100 = _1001 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                  ( Id.id_of_string "partial" )
    in
                                                 ( id )
  in
                                      ( id )
in
let name =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                  ( Id.id_of_string "partial" )
    in
                                                 ( id )
  in
                                      ( id )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}

idlFile:
| _1 = definitions _2 = EOF
    {                     ( _1 )}

option_identOrKeyword_:
| 
    {    ( None )}
| _10 = CONSTRUCTOR
    {let x =
  let _1 = _10 in
                  ( Id.id_of_string "Constructor" )
in
    ( Some x )}
| _10 = NOTXPCOM
    {let x =
  let _1 = _10 in
               ( Id.id_of_string "notxpcom" )
in
    ( Some x )}
| _10 = RETVAL
    {let x =
  let _1 = _10 in
             ( Id.id_of_string "retval" )
in
    ( Some x )}
| _10 = UNSAFE
    {let x =
  let _1 = _10 in
             ( Id.id_of_string "unsafe" )
in
    ( Some x )}
| _10 = PRIVATEBROWSINGCHECK
    {let x =
  let _1 = _10 in
                           ( Id.id_of_string "PrivateBrowsingCheck" )
in
    ( Some x )}
| _10 = QUERYINTERFACETYPE
    {let x =
  let _1 = _10 in
                         ( Id.id_of_string "QueryInterfaceType" )
in
    ( Some x )}
| _1000 = CREATOR
    {let x =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                  ( Id.id_of_string "creator" )
    in
                             ( id )
  in
                                      ( id )
in
    ( Some x )}
| _1000 = GETTER
    {let x =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                 ( Id.id_of_string "getter" )
    in
                             ( id )
  in
                                      ( id )
in
    ( Some x )}
| _1000 = SETTER
    {let x =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                 ( Id.id_of_string "setter" )
    in
                             ( id )
  in
                                      ( id )
in
    ( Some x )}
| id000 = ID
    {let x =
  let id00 = id000 in
  let id =
    let id0 = id00 in
    let id =
      let id = id0 in
                ( id )
    in
                                                 ( id )
  in
                                      ( id )
in
    ( Some x )}
| _1000 = DICTIONARY
    {let x =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                     ( Id.id_of_string "dictionary" )
    in
                                                 ( id )
  in
                                      ( id )
in
    ( Some x )}
| _1000 = PARTIAL
    {let x =
  let _100 = _1000 in
  let id =
    let _10 = _100 in
    let id =
      let _1 = _10 in
                  ( Id.id_of_string "partial" )
    in
                                                 ( id )
  in
                                      ( id )
in
    ( Some x )}

%%





