File "obc.mly", line 28, characters 9-15:
Warning: the token BADTOK is unused.
File "obc.mly", line 31, characters 48-54:
Warning: the token IMPORT is unused.
Grammar has 55 nonterminal symbols, among which 1 start symbols.
Grammar has 62 terminal symbols.
Grammar has 154 productions.
nullable(with_branches) = false
nullable(with_branch) = false
nullable(var_decls) = false
nullable(var_decl) = false
nullable(typexpr) = false
nullable(typename) = false
nullable(type_decls) = false
nullable(type_decl) = false
nullable(term) = false
nullable(stmts_b) = false
nullable(stmts_a) = true
nullable(stmts) = true
nullable(stmt1) = false
nullable(stmt0) = false
nullable(simple) = false
nullable(semi) = true
nullable(result) = true
nullable(receiver) = false
nullable(qualid) = false
nullable(program) = false
nullable(proc) = false
nullable(parent) = true
nullable(params) = true
nullable(opt_ident) = true
nullable(name) = false
nullable(modname) = false
nullable(missing) = true
nullable(imports) = false
nullable(import) = false
nullable(if_chain) = false
nullable(formals) = false
nullable(formal) = false
nullable(fields) = true
nullable(fieldlist) = true
nullable(factor) = false
nullable(exprs) = false
nullable(expr) = false
nullable(export) = true
nullable(else_part) = true
nullable(elements) = false
nullable(element) = false
nullable(designator) = false
nullable(defids) = false
nullable(defid) = false
nullable(decls) = true
nullable(decl) = false
nullable(const_decls) = false
nullable(const_decl) = false
nullable(case_arms) = true
nullable(case_arm) = true
nullable(by_part) = true
nullable(body) = true
nullable(block) = false
nullable(actuals) = false
nullable(absmark) = true
first(with_branches) = IDENT
first(with_branch) = IDENT
first(var_decls) = IDENT
first(var_decl) = IDENT
first(typexpr) = RECORD PROCEDURE POINTER LPAR IDENT ARRAY ABSTRACT
first(typename) = IDENT
first(type_decls) = IDENT
first(type_decl) = IDENT
first(term) = STRING NUMBER NOT NIL LPAR LBRACE IDENT FLOCON DECIMAL DBLCON CHAR
first(stmts_b) = error WITH WHILE SEMI RETURN REPEAT LOOP LOCAL IF IDENT FOR EXIT CASE
first(stmts_a) = error WITH WHILE SEMI RETURN REPEAT LOOP LOCAL IF IDENT FOR EXIT CASE
first(stmts) = error WITH WHILE SEMI RETURN REPEAT LOOP LOCAL IF IDENT FOR EXIT CASE
first(stmt1) = error WITH WHILE RETURN REPEAT LOOP LOCAL IF FOR EXIT CASE
first(stmt0) = IDENT
first(simple) = STRING PLUS NUMBER NOT NIL MINUS LPAR LBRACE IDENT FLOCON DECIMAL DBLCON CHAR
first(semi) = SEMI COMMA
first(result) = COLON
first(receiver) = LPAR
first(qualid) = IDENT
first(program) = MODULE
first(proc) = PROCEDURE ABSTRACT
first(parent) = LPAR
first(params) = LPAR
first(opt_ident) = IDENT
first(name) = IDENT
first(modname) = IDENT
first(missing) = 
first(imports) = IDENT
first(import) = IDENT
first(if_chain) = IF
first(formals) = VAR IDENT
first(formal) = VAR IDENT
first(fields) = SEMI IDENT
first(fieldlist) = IDENT
first(factor) = STRING NUMBER NOT NIL LPAR LBRACE IDENT FLOCON DECIMAL DBLCON CHAR
first(exprs) = STRING PLUS NUMBER NOT NIL MINUS LPAR LBRACE IDENT FLOCON DECIMAL DBLCON CHAR
first(expr) = STRING PLUS NUMBER NOT NIL MINUS LPAR LBRACE IDENT FLOCON DECIMAL DBLCON CHAR
first(export) = STAR MINUS
first(else_part) = ELSE
first(elements) = STRING PLUS NUMBER NOT NIL MINUS LPAR LBRACE IDENT FLOCON DECIMAL DBLCON CHAR
first(element) = STRING PLUS NUMBER NOT NIL MINUS LPAR LBRACE IDENT FLOCON DECIMAL DBLCON CHAR
first(designator) = IDENT
first(defids) = IDENT
first(defid) = IDENT
first(decls) = error VAR TYPE PROCEDURE CONST ABSTRACT
first(decl) = error VAR TYPE PROCEDURE CONST ABSTRACT
first(const_decls) = IDENT
first(const_decl) = IDENT
first(case_arms) = VBAR STRING PLUS NUMBER NOT NIL MINUS LPAR LBRACE IDENT FLOCON DECIMAL DBLCON CHAR
first(case_arm) = STRING PLUS NUMBER NOT NIL MINUS LPAR LBRACE IDENT FLOCON DECIMAL DBLCON CHAR
first(by_part) = BY
first(body) = BEGIN
first(block) = error VAR TYPE PROCEDURE END CONST BEGIN ABSTRACT
first(actuals) = LPAR
first(absmark) = ABSTRACT
follow(with_branches) = END ELSE
follow(with_branch) = VBAR END ELSE
follow(var_decls) = error VAR TYPE PROCEDURE END CONST BEGIN ABSTRACT
follow(var_decl) = error VAR TYPE PROCEDURE IDENT END CONST BEGIN ABSTRACT
follow(typexpr) = error VAR TYPE SEMI RPAR PROCEDURE IDENT END CONST COMMA BEGIN ABSTRACT
follow(typename) = error VAR TYPE SEMI RPAR PROCEDURE IDENT END CONST COMMA BEGIN ABSTRACT
follow(type_decls) = error VAR TYPE PROCEDURE END CONST BEGIN ABSTRACT
follow(type_decl) = error VAR TYPE PROCEDURE IDENT END CONST BEGIN ABSTRACT
follow(term) = error WITH WHILE VBAR VAR UPARROW UNTIL TYPE TO THEN SUB STAR SEMI RPAR RETURN REPEAT RELOP RBRACE PROCEDURE PLUS OF MULOP MINUS LPAR LOOP LOCAL IS IF IDENT FOR EXIT EQUAL END ELSIF ELSE DOTDOT DOT DO CONST COMMA COLON CASE BY BUS BEGIN ASSIGN ADDOP ABSTRACT
follow(stmts_b) = error WITH WHILE VBAR UNTIL SEMI RETURN REPEAT LOOP LOCAL IF FOR EXIT END ELSIF ELSE CASE
follow(stmts_a) = error WITH WHILE VBAR UNTIL SEMI RETURN REPEAT LOOP LOCAL IF IDENT FOR EXIT END ELSIF ELSE CASE
follow(stmts) = VBAR UNTIL END ELSIF ELSE
follow(stmt1) = error WITH WHILE VBAR UNTIL SEMI RETURN REPEAT LOOP LOCAL IF FOR EXIT END ELSIF ELSE CASE
follow(stmt0) = error WITH WHILE VBAR UNTIL SEMI RETURN REPEAT LOOP LOCAL IF FOR EXIT END ELSIF ELSE CASE
follow(simple) = error WITH WHILE VBAR VAR UPARROW UNTIL TYPE TO THEN SUB STAR SEMI RPAR RETURN REPEAT RELOP RBRACE PROCEDURE PLUS OF MULOP MINUS LPAR LOOP LOCAL IS IF IDENT FOR EXIT EQUAL END ELSIF ELSE DOTDOT DOT DO CONST COMMA COLON CASE BY BUS BEGIN ASSIGN ADDOP ABSTRACT
follow(semi) = error VAR TYPE PROCEDURE IDENT END CONST BEGIN ABSTRACT
follow(result) = error VAR TYPE SEMI RPAR PROCEDURE IS IDENT END CONST COMMA BEGIN ABSTRACT
follow(receiver) = IDENT
follow(qualid) = error WITH WHILE VBAR VAR UPARROW UNTIL TYPE TO THEN SUB STAR SEMI RPAR RETURN REPEAT RELOP RBRACE PROCEDURE PLUS OF MULOP MINUS LPAR LOOP LOCAL IS IF IDENT FOR EXIT EQUAL END ELSIF ELSE DOTDOT DOT DO CONST COMMA COLON CASE BY BUS BEGIN ASSIGN ADDOP ABSTRACT
follow(program) = #
follow(proc) = error VAR TYPE PROCEDURE END CONST BEGIN ABSTRACT
follow(parent) = SEMI IDENT END
follow(params) = error VAR TYPE SEMI RPAR PROCEDURE IS IDENT END CONST COMMA BEGIN ABSTRACT
follow(opt_ident) = error VAR TYPE SEMI PROCEDURE END DOT CONST COMMA BEGIN ABSTRACT
follow(name) = error WITH WHILE VBAR VAR UPARROW UNTIL TYPE TO THEN SUB STAR SEMI RPAR RETURN REPEAT RELOP RBRACE PROCEDURE PLUS OF MULOP MINUS LPAR LOOP LOCAL IS IF IDENT FOR EXIT EQUAL END ELSIF ELSE DOTDOT DOT DO CONST COMMA COLON CASE BY BUS BEGIN ASSIGN ADDOP ABSTRACT
follow(modname) = SEMI IDENT COMMA
follow(missing) = error WITH WHILE RETURN REPEAT LOOP LOCAL IF FOR EXIT CASE
follow(imports) = error VAR TYPE PROCEDURE END CONST COMMA BEGIN ABSTRACT
follow(import) = error VAR TYPE PROCEDURE END CONST COMMA BEGIN ABSTRACT
follow(if_chain) = END ELSIF ELSE
follow(formals) = RPAR
follow(formal) = VAR SEMI RPAR IDENT COMMA
follow(fields) = END
follow(fieldlist) = SEMI END
follow(factor) = error WITH WHILE VBAR VAR UPARROW UNTIL TYPE TO THEN SUB STAR SEMI RPAR RETURN REPEAT RELOP RBRACE PROCEDURE PLUS OF MULOP MINUS LPAR LOOP LOCAL IS IF IDENT FOR EXIT EQUAL END ELSIF ELSE DOTDOT DOT DO CONST COMMA COLON CASE BY BUS BEGIN ASSIGN ADDOP ABSTRACT
follow(exprs) = error WITH WHILE VBAR VAR UPARROW UNTIL TYPE TO THEN SUB STAR SEMI RPAR RETURN REPEAT RELOP RBRACE PROCEDURE PLUS OF MULOP MINUS LPAR LOOP LOCAL IS IF IDENT FOR EXIT EQUAL END ELSIF ELSE DOTDOT DOT DO CONST COMMA COLON CASE BY BUS BEGIN ASSIGN ADDOP ABSTRACT
follow(expr) = error WITH WHILE VBAR VAR UPARROW UNTIL TYPE TO THEN SUB STAR SEMI RPAR RETURN REPEAT RELOP RBRACE PROCEDURE PLUS OF MULOP MINUS LPAR LOOP LOCAL IS IF IDENT FOR EXIT EQUAL END ELSIF ELSE DOTDOT DOT DO CONST COMMA COLON CASE BY BUS BEGIN ASSIGN ADDOP ABSTRACT
follow(export) = error VAR TYPE SEMI RPAR PROCEDURE LPAR IS EQUAL END CONST COMMA COLON BEGIN ABSTRACT
follow(else_part) = END
follow(elements) = RBRACE COLON
follow(element) = RBRACE COMMA COLON
follow(designator) = error WITH WHILE VBAR VAR UPARROW UNTIL TYPE TO THEN SUB STAR SEMI RPAR RETURN REPEAT RELOP RBRACE PROCEDURE PLUS OF MULOP MINUS LPAR LOOP LOCAL IS IF IDENT FOR EXIT EQUAL END ELSIF ELSE DOTDOT DOT DO CONST COMMA COLON CASE BY BUS BEGIN ASSIGN ADDOP ABSTRACT
follow(defids) = RPAR COLON
follow(defid) = error VAR TYPE SEMI RPAR PROCEDURE LPAR IS EQUAL END CONST COMMA COLON BEGIN ABSTRACT
follow(decls) = error VAR TYPE PROCEDURE END CONST BEGIN ABSTRACT
follow(decl) = error VAR TYPE PROCEDURE END CONST BEGIN ABSTRACT
follow(const_decls) = error VAR TYPE PROCEDURE END CONST BEGIN ABSTRACT
follow(const_decl) = error VAR TYPE PROCEDURE IDENT END CONST BEGIN ABSTRACT
follow(case_arms) = END ELSE
follow(case_arm) = VBAR END ELSE
follow(by_part) = DO
follow(body) = END
follow(block) = error VAR TYPE SEMI PROCEDURE IDENT END DOT CONST COMMA BEGIN ABSTRACT
follow(actuals) = error WITH WHILE VBAR VAR UPARROW UNTIL TYPE TO THEN SUB STAR SEMI RPAR RETURN REPEAT RELOP RBRACE PROCEDURE PLUS OF MULOP MINUS LPAR LOOP LOCAL IS IF IDENT FOR EXIT EQUAL END ELSIF ELSE DOTDOT DOT DO CONST COMMA COLON CASE BY BUS BEGIN ASSIGN ADDOP ABSTRACT
follow(absmark) = RECORD
Built an LR(0) automaton with 305 states.
The grammar is not SLR(1) -- 16 states have a conflict.
Built an LR(1) automaton with 403 states.
67 shift/reduce conflicts were silently solved.
File "obc.mly", line 40, characters 0-6:
Warning: the precedence level assigned to CASE is never useful.
File "obc.mly", line 40, characters 0-6:
Warning: the precedence level assigned to EXIT is never useful.
File "obc.mly", line 40, characters 0-6:
Warning: the precedence level assigned to FOR is never useful.
File "obc.mly", line 44, characters 0-6:
Warning: the precedence level assigned to IDENT is never useful.
File "obc.mly", line 40, characters 0-6:
Warning: the precedence level assigned to IF is never useful.
File "obc.mly", line 40, characters 0-6:
Warning: the precedence level assigned to LOOP is never useful.
File "obc.mly", line 40, characters 0-6:
Warning: the precedence level assigned to REPEAT is never useful.
File "obc.mly", line 40, characters 0-6:
Warning: the precedence level assigned to RETURN is never useful.
File "obc.mly", line 39, characters 0-6:
Warning: the precedence level assigned to SEMI is never useful.
File "obc.mly", line 40, characters 0-6:
Warning: the precedence level assigned to WHILE is never useful.
File "obc.mly", line 40, characters 0-6:
Warning: the precedence level assigned to WITH is never useful.
File "obc.mly", line 402, characters 22-27:
Warning: this %prec declaration is never useful.
175 out of 403 states are represented.
0 out of 120 symbols keep track of their start position.
0 out of 120 symbols keep track of their end position.
171 out of 403 states have a default reduction.
68 out of 155 productions exploit shiftreduce optimization.
78 out of 403 states can peek at an error.
1022 functions before inlining, 243 functions after inlining.
