Warning: you are using the standard library and/or the %inline keyword. We
recommend switching on --infer in order to avoid obscure type error messages.
%start main
%token RPAREN
%token LPAREN
%token <int> INT
%token EOL
%token PLUS
%token MINUS
%token TIMES
%token DIV
%left PLUS MINUS 
%left TIMES DIV 
%nonassoc UMINUS 
%type <int> main
%%

main:
| e = expr EOL
    { e }

expr:
| i = INT
    { i }
| LPAREN e = expr RPAREN
    { e }
| e1 = expr PLUS e2 = expr
    {let op =
  let x =
    ( (+) )
  in
  ( x )
in
 op e1 e2 }
| e1 = expr MINUS e2 = expr
    {let op =
  let x =
    ( (-) )
  in
  ( x )
in
 op e1 e2 }
| e1 = expr TIMES e2 = expr
    {let op =
  let x =
    ( ( * ) )
  in
  ( x )
in
 op e1 e2 }
| e1 = expr DIV e2 = expr
    {let op =
  let x =
    ( (/) )
  in
  ( x )
in
 op e1 e2 }
| MINUS e = expr %prec UMINUS
    { - e }

%%



