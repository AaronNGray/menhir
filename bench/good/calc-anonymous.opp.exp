Warning: you are using the standard library and/or the %inline keyword. We
recommend switching on --infer in order to avoid obscure type error messages.
%start main
%token DIV
%token EOL
%token <int> INT
%token LPAREN
%token MINUS
%token PLUS
%token RPAREN
%token TIMES
%left MINUS PLUS 
%left DIV TIMES 
%nonassoc UMINUS 
%type <int> main
%%

main:
  e = expr _2 = EOL
    {    ( e )}

expr:
  i = INT
    {    ( i )}
| _1 = LPAREN e = expr _3 = RPAREN
    {    ( e )}
| e1 = expr _100 = PLUS e2 = expr
    {let op =
  let _10 = _100 in
  let x =
    let _1 = _10 in
                          ( (+) )
  in
      ( x )
in
    ( op e1 e2 )}
| e1 = expr _100 = MINUS e2 = expr
    {let op =
  let _10 = _100 in
  let x =
    let _1 = _10 in
                                          ( (-) )
  in
      ( x )
in
    ( op e1 e2 )}
| e1 = expr _100 = TIMES e2 = expr
    {let op =
  let _10 = _100 in
  let x =
    let _1 = _10 in
                                                          ( ( * ) )
  in
      ( x )
in
    ( op e1 e2 )}
| e1 = expr _100 = DIV e2 = expr
    {let op =
  let _10 = _100 in
  let x =
    let _1 = _10 in
                                                                          ( (/) )
  in
      ( x )
in
    ( op e1 e2 )}
| _1 = MINUS e = expr %prec UMINUS
    {    ( - e )}

%%



