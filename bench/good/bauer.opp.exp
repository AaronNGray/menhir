Warning: you are using the standard library and/or the %inline keyword. We
recommend switching on --infer in order to avoid obscure type error messages.
%{
  open Prolog
%}
%start clauses
%token COMMA
%token DOT
%token EOF
%token <string> IDENTIFIER
%token INFERS
%token LPARENT
%token RPARENT
%token <string> VARIABLE
%type <Prolog.clause list> clauses
%%

option_params_:
  
    {    ( None )}
| x = params
    {    ( Some x )}

loption_separated_nonempty_list_COMMA_term__:
  
    {    ( [] )}
| x = separated_nonempty_list_COMMA_term_
    {    ( x )}

loption_separated_nonempty_list_DOT_clause__:
  
    {    ( [] )}
| x = separated_nonempty_list_DOT_clause_
    {    ( x )}

separated_nonempty_list_COMMA_term_:
  x = term
    {    ( [ x ] )}
| x = term _2 = COMMA xs = separated_nonempty_list_COMMA_term_
    {    ( x :: xs )}

separated_nonempty_list_DOT_clause_:
  x = clause
    {    ( [ x ] )}
| x = clause _2 = DOT xs = separated_nonempty_list_DOT_clause_
    {    ( x :: xs )}

clauses:
  xs0 = loption_separated_nonempty_list_DOT_clause__ _2 = EOF
    {let clauses =
  let xs = xs0 in
      ( xs )
in
                                                     ( clauses )}

clause:
  tm = term _2 = INFERS xs0 = loption_separated_nonempty_list_COMMA_term__
    {let ts =
  let xs = xs0 in
      ( xs )
in
                                                        ( (tm, ts) )}
| fact = term
    {                 ( (fact, []) )}

term:
  name = IDENTIFIER p = option_params_
    {                                        ( 
    let ts = match p with None -> [] | Some l -> l in
      Struct (name, ts)
  )}
| v = VARIABLE
    {                 ( Var (0, v) )}

params:
  _10 = LPARENT xs00 = loption_separated_nonempty_list_COMMA_term__ _30 = RPARENT
    {let terms =
  let _3 = _30 in
  let xs0 = xs00 in
  let _1 = _10 in
  let x =
    let xs = xs0 in
        ( xs )
  in
      ( x )
in
         ( terms )}

%%



