%{
open Syntax

(* Auxiliaries for the parser. *)

let named_regexps =
  (Hashtbl.create 13 : (string, regular_expression) Hashtbl.t)

let regexp_for_string s =
  let rec re_string n =
    if n >= String.length s then Epsilon
    else if succ n = String.length s then
      Characters (Cset.singleton (Char.code s.[n]))
    else
      Sequence
        (Characters(Cset.singleton (Char.code s.[n])),
         re_string (succ n))
  in re_string 0

let rec remove_as = function
  | Bind (e,_) -> remove_as e
  | Epsilon|Eof|Characters _ as e -> e
  | Sequence (e1, e2) -> Sequence (remove_as e1, remove_as e2)
  | Alternative (e1, e2) -> Alternative (remove_as e1, remove_as e2)
  | Repetition e -> Repetition (remove_as e)

let as_cset = function
  | Characters s -> s
  | _ -> raise Cset.Bad

%}
%start lexer_definition
%token Trule
%token Trparen
%token Trbracket
%token Tparse_shortest
%token Tparse
%token Tlet
%token Tequal
%token Tend
%token Tdash
%token Tcaret
%token Tand
%token <Syntax.location> Taction
%token Tas
%token Tsharp
%token Tor
%token Tunderscore
%token <string> Tstring
%token Tstar
%token Tplus
%token Tmaybe
%token Tlparen
%token Tlbracket
%token <string> Tident
%token Teof
%token <int> Tchar
%right Tas 
%left Tsharp 
%left Tor 
%nonassoc CONCAT 
%nonassoc Tunderscore Tstring Tstar Tplus Tmaybe Tlparen Tlbracket Tident Teof Tchar 
%type <Syntax.lexer_definition> lexer_definition
%%

lexer_definition:
  _1 = header _2 = named_regexps _3 = Trule _4 = definition _5 = other_definitions _6 = header _7 = Tend
    {        ( {header = _1;
           entrypoints = _4 :: List.rev _5;
           trailer = _6} )}

header:
  _1 = Taction
    {        ( _1 )}
| 
    {        ( { start_pos = 0; end_pos = 0; start_line = 1; start_col = 0 } )}

named_regexps:
  _1 = named_regexps _2 = Tlet _3 = Tident _4 = Tequal _5 = regexp
    {        ( Hashtbl.add named_regexps _3 _5 )}
| 
    {        ( () )}

other_definitions:
  _1 = other_definitions _2 = Tand _3 = definition
    {        ( _3::_1 )}
| 
    {        ( [] )}

definition:
  _1 = Tident _2 = arguments _3 = Tequal _4 = Tparse _5 = entry
    {        ( {name=_1 ; shortest=false ; args=_2 ; clauses=_5} )}
| _1 = Tident _2 = arguments _3 = Tequal _4 = Tparse_shortest _5 = entry
    {        ( {name=_1 ; shortest=true ; args=_2 ; clauses=_5} )}

arguments:
  _1 = Tident _2 = arguments
    {                            ( _1::_2 )}
| 
    {                            ( [] )}

entry:
  _1 = case _2 = rest_of_entry
    {        ( _1::List.rev _2 )}
| _1 = Tor _2 = case _3 = rest_of_entry
    {        ( _2::List.rev _3 )}

rest_of_entry:
  _1 = rest_of_entry _2 = Tor _3 = case
    {        ( _3::_1 )}
| 
    {        ( [] )}

case:
  _1 = regexp _2 = Taction
    {        ( (_1,_2) )}

regexp:
  _1 = Tunderscore
    {        ( Characters Cset.all_chars )}
| _1 = Teof
    {        ( Eof )}
| _1 = Tchar
    {        ( Characters (Cset.singleton _1) )}
| _1 = Tstring
    {        ( regexp_for_string _1 )}
| _1 = Tlbracket _2 = char_class _3 = Trbracket
    {        ( Characters _2 )}
| _1 = regexp _2 = Tstar
    {        ( Repetition _1 )}
| _1 = regexp _2 = Tmaybe
    {        ( Alternative(Epsilon, _1) )}
| _1 = regexp _2 = Tplus
    {        ( Sequence(Repetition (remove_as _1), _1) )}
| _1 = regexp _2 = Tsharp _3 = regexp
    {        (
          let s1 = as_cset _1
          and s2 = as_cset _3 in
          Characters (Cset.diff s1 s2)
        )}
| _1 = regexp _2 = Tor _3 = regexp
    {        ( Alternative(_1,_3) )}
| _1 = regexp _2 = regexp %prec CONCAT
    {        ( Sequence(_1,_2) )}
| _1 = Tlparen _2 = regexp _3 = Trparen
    {        ( _2 )}
| _1 = Tident
    {        ( try
            Hashtbl.find named_regexps _1
          with Not_found ->
            prerr_string "Reference to unbound regexp name `";
            prerr_string _1;
            prerr_string "' at char ";
            prerr_int (Parsing.symbol_start());
            prerr_newline();
            exit 2 )}
| _1 = regexp _2 = Tas _3 = ident
    {        (Bind (_1, _3))}

ident:
  _1 = Tident
    {         (_1)}

char_class:
  _1 = Tcaret _2 = char_class1
    {        ( Cset.complement _2 )}
| _1 = char_class1
    {        ( _1 )}

char_class1:
  _1 = Tchar _2 = Tdash _3 = Tchar
    {        ( Cset.interval _1 _3 )}
| _1 = Tchar
    {        ( Cset.singleton _1 )}
| _1 = char_class1 _2 = char_class1 %prec CONCAT
    {        ( Cset.union _1 _2 )}

%%






