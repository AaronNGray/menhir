Warning: you are using the standard library and/or the %inline keyword. We
recommend switching on --infer in order to avoid obscure type error messages.
%start phrase
%token <int> EOF
%token <int> D
%token <int> C
%token <int> B
%token <int> A

%type <int list> phrase
%%

phrase:
| xs = list___anonymous_0_ ys = list___anonymous_1_ _3 = EOF
    {    ( xs @ ys )}

list___anonymous_1_:
| 
    {    ( [] )}
| x0 = D y0 = D xs = list___anonymous_1_
    {let x =
  let y = y0 in
  let x = x0 in
  (                        ( x + y ))
in
    ( x :: xs )}

list___anonymous_0_:
| 
    {    ( [] )}
| x0 = A xs = list___anonymous_0_
    {let x =
  let x = x0 in
  (                                  ( x ))
in
    ( x :: xs )}
| x0 = B xs = list___anonymous_0_
    {let x =
  let x = x0 in
  (                                  ( x ))
in
    ( x :: xs )}
| x0 = C xs = list___anonymous_0_
    {let x =
  let x = x0 in
  (                                  ( x ))
in
    ( x :: xs )}

%%



