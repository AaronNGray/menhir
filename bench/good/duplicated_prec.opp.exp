Warning: you are using the standard library and/or the %inline keyword. We
recommend switching on --infer in order to avoid obscure type error messages.
%start expr_eoi
%token Typevar
%token Rparen
%token Ident
%token Eoi
%token Colon
%token Lparen
%left type_ 
%left Lparen 
%type <unit> expr_eoi
%%

expr_eoi:
  _1 = expr _2 = Eoi
    {                   ()}

type_expr:
  _1 = Ident %prec type_
    {let _2 =
      ( None )
in
                                                      ()}
| _1 = Ident _100 = Lparen x00 = type_expr _300 = Rparen %prec type_
    {let _2 =
  let _30 = _300 in
  let x0 = x00 in
  let _10 = _100 in
  let x =
    let _3 = _30 in
    let x = x0 in
    let _1 = _10 in
        ( x )
  in
      ( Some x )
in
                                                      ()}
| _1 = Typevar
    {          ()}

expr:
  _1 = Ident
    {        ()}
| _1 = expr _2 = Colon _3 = type_expr
    {                       ()}
| _1 = expr _2 = Lparen _3 = expr _4 = Rparen
    {                          ()}

%%



