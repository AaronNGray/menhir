%{
  open Structures
%}
%start main
%token VDASH
%token <string> VAR
%token RIMP
%token OP
%token LIMP
%token IMP
%token END
%token DIRECTIVE
%token CP
%token SEQ
%token PAR
%token TIMES
%token NEXT
%token NEG
%left SEQ PAR 
%left TIMES NEXT 
%nonassoc NEG 
%type <[`Directive of string | `Sequent of Structures.sequent]> main
%%

main:
  _1 = sequent _2 = END
    {              (`Sequent _1)}
| _1 = DIRECTIVE _2 = VAR
    {                (`Directive _2)}

formimp:
  _1 = VAR
    {       (`Var _1)}
| _1 = formimp _2 = PAR _3 = formimp
    {                      (`Par(_1,_3))}
| _1 = formimp _2 = TIMES _3 = formimp
    {                        (`Times(_1,_3))}
| _1 = formimp _2 = NEXT _3 = formimp
    {                       (`Next(_1,_3))}
| _1 = formimp _2 = SEQ _3 = formimp
    {                      (`Seq(_1,_3))}
| _1 = formimp _2 = IMP _3 = formimp
    {                      (`Imp(_1,_3))}
| _1 = formimp _2 = RIMP _3 = formimp
    {                       (`RImp(_1,_3))}
| _1 = formimp _2 = LIMP _3 = formimp
    {                       (`LImp(_1,_3))}
| _1 = OP _2 = formimp _3 = CP
    {                (_2)}
| _1 = formimp _2 = NEG
    {              (`Not(_1))}

sequent:
  _1 = formimp _2 = VDASH _3 = formimp
    {                      (Sequent(_1, _3))}
| _1 = VDASH _2 = formimp
    {                (Form(_2))}
| _1 = formimp
    {          (Form(_1))}

%%



