%{
open Fp;;
%}
%start cmd
%start exp
%start fct
%token Rsqu
%token Rpar
%token Rang
%token Lwhile
%token <string> Lvar
%token <string> Lstr
%token Lsqu
%token Lscl
%token <int> Ls
%token <int> Lr
%token Lpar
%token <int> Lint
%token Lins
%token <string> Lident
%token Leol
%token Lcom
%token Lbu
%token Lapplytoall
%token Lang
%token Laff
%token LUndef
%token LT
%token LShow
%token LSave
%token LQuit
%token LLoad
%token LF
%token LDef
%token Leval
%token <string> Lprim
%token Lcond
%token Lo
%token Lcst
%right Leval 
%left Lprim 
%right Lcond 
%right Lo 
%left Lcst 
%type <Fp.cmd> cmd
%type <Fp.expr> exp
%type <Fp.fct> fct
%%

cmd:
| _1 = LDef _2 = Lident _3 = Laff _4 = fct _5 = Leol
    {                            ( Def(_2,_4) )}
| _1 = LUndef _2 = Lident _3 = Leol
    {                            ( Undef _2 )}
| _1 = LShow _2 = Lident _3 = Leol
    {                            ( Show _2 )}
| _1 = exp _2 = Leol
    {                            ( Exp _1 )}
| _1 = LQuit _2 = Leol
    {                            ( Quit )}
| _1 = LLoad _2 = Lstr _3 = Leol
    {                            ( Load _2 )}
| _1 = LSave _2 = Lstr _3 = Leol
    {                            ( Save _2 )}
| _1 = Leol
    {                            ( None )}

exp:
| _1 = LT
    {                    ( T )}
| _1 = LF
    {                    ( F )}
| _1 = Lint
    {                    ( Int (Num.Int _1) )}
| _1 = Lvar
    {                    ( Var _1 )}
| _1 = Lpar _2 = exp _3 = Rpar
    {                    ( _2 )}
| _1 = Lang _2 = Rang
    {                    ( Seq [] )}
| _1 = Lang _2 = fp_list _3 = Rang
    {                    ( Seq _2 )}
| _1 = fct _2 = Leval _3 = exp
    {                    ( App(_1, _3) )}

fatom:
| _1 = Lprim
    {                    ( Prim _1 )}
| _1 = Ls
    {                    ( Sel _1 )}
| _1 = Lr
    {                    ( RSel _1 )}
| _1 = Lident
    {                    ( User _1 )}
| _1 = Lapplytoall _2 = fatom
    {                         ( ApplyToAll _2 )}
| _1 = Lins _2 = fatom
    {                         ( Insert _2 )}
| _1 = Lcst _2 = exp
    {                         ( Constant _2 )}
| _1 = Lsqu _2 = fctlist _3 = Rsqu
    {                         ( Construction _2 )}
| _1 = Lbu _2 = fatom _3 = exp
    {                         ( Bu(_2,_3) )}
| _1 = Lwhile _2 = fatom _3 = fatom
    {                         ( While(_2,_3) )}
| _1 = Lpar _2 = fct _3 = Rpar
    {                         ( _2 )}

fct:
| _1 = comp _2 = Lcond _3 = comp _4 = Lscl _5 = fct
    {                             ( Condition(_1,_3,_5) )}
| _1 = comp
    {                             ( _1 )}

comp:
| _1 = fatom _2 = Lo _3 = comp
    {                   ( Composition(_1,_3) )}
| _1 = fatom
    {                   ( _1 )}

fp_list:
| _1 = exp _2 = Lcom _3 = fp_list
    {                   ( _1 :: _3 )}
| _1 = exp
    {                   ( [ _1 ] )}

fctlist:
| _1 = fct _2 = Lcom _3 = fctlist
    {                     ( _1 :: _3 )}
| _1 = fct
    {                     ( [ _1 ] )}

%%

  




Note: the nonterminal symbol list (from fp.mly) is renamed fp_list.
