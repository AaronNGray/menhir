File "simnml.mly", line 128, characters 9-13:
Warning: the token ATTR is unused.
File "simnml.mly", line 119, characters 9-21:
Warning: the token BINARY_CONST is unused.
File "simnml.mly", line 124, characters 19-28:
Warning: the token BIT_RIGHT is unused.
File "simnml.mly", line 81, characters 10-16:
Warning: the token DOLLAR is unused.
File "simnml.mly", line 120, characters 9-18:
Warning: the token HEX_CONST is unused.
File "simnml.mly", line 110, characters 10-14:
Warning: the token LIST is unused.
File "simnml.mly", line 90, characters 10-15:
Warning: the token MACRO is unused.
File "simnml.mly", line 111, characters 10-13:
Warning: the token NOP is unused.
File "simnml.mly", line 108, characters 10-13:
Warning: the token NOT is unused.
Grammar has 77 nonterminal symbols, among which 1 start symbols.
Grammar has 91 terminal symbols.
Grammar has 234 productions.
nullable(top) = false
nullable(specs) = false
nullable(VarSpec) = false
nullable(UsesOrSequence) = false
nullable(UsesLocationList) = false
nullable(UsesLocation) = false
nullable(UsesIndirectAtom) = false
nullable(UsesIfAtom) = false
nullable(UsesDef) = false
nullable(UsesCondAtom) = false
nullable(UsesAndAtom) = false
nullable(UsesActionList) = true
nullable(UsesActionAttr) = false
nullable(TypeSpec) = false
nullable(TypeList) = false
nullable(TypeExpr) = false
nullable(Type) = false
nullable(TimeActionList) = false
nullable(StatementList) = true
nullable(Statement) = true
nullable(Sequence) = true
nullable(ResourceSpec) = false
nullable(ResourceList) = false
nullable(Resource) = false
nullable(RegisterSpec) = false
nullable(RegPart) = false
nullable(ParamListPart) = false
nullable(ParamList) = true
nullable(ParaType) = false
nullable(OptionalTime) = true
nullable(OptionalModeExpr) = true
nullable(OptionalMemAttrDefList) = true
nullable(OptionalElseAtom) = true
nullable(OptionalElse) = true
nullable(OptionalAction) = true
nullable(Opt_SecDim) = true
nullable(Opt_Bit_Optr) = true
nullable(OptCaseList) = true
nullable(OptCaseExprList) = true
nullable(OpSpec) = false
nullable(NOAttrDefList) = false
nullable(ModeSpec) = false
nullable(MemorySpec) = false
nullable(MemPart) = false
nullable(MemLocation) = false
nullable(MemLocBase) = false
nullable(MemAttrDefList) = false
nullable(MemAttrDef) = false
nullable(MachineSpec) = false
nullable(Location) = false
nullable(LocatedID) = false
nullable(LetExpr) = false
nullable(LetDef) = false
nullable(Identifier_Or_List) = false
nullable(IdentifierList) = false
nullable(ExtendSpec) = false
nullable(ExtendIDList) = false
nullable(ExtendHeader) = false
nullable(ExprDefault) = false
nullable(Expr) = false
nullable(ExceptionSpec) = false
nullable(Default) = false
nullable(Constant) = false
nullable(ConditionalStatement) = false
nullable(CaseStat) = false
nullable(CaseList) = false
nullable(CaseExprStat) = false
nullable(CaseExprList) = false
nullable(CaseExprBody) = false
nullable(CaseBody) = false
nullable(CanonSpec) = false
nullable(Bit_Expr) = false
nullable(AttrExpr) = false
nullable(AttrDefList) = true
nullable(AttrDef) = false
nullable(ArgList) = true
nullable(ActionTimeList) = false
first(top) = VAR TYPE RESOURCE REG OP MODE MEM LET EXTEND EXCEPTION CANON
first(specs) = VAR TYPE RESOURCE REG OP MODE MEM LET EXTEND EXCEPTION CANON
first(VarSpec) = VAR
first(UsesOrSequence) = LPAREN LBRACE IF ID
first(UsesLocationList) = ID
first(UsesLocation) = ID
first(UsesIndirectAtom) = LPAREN LBRACE ID
first(UsesIfAtom) = LPAREN LBRACE IF ID
first(UsesDef) = LPAREN LBRACE IF ID
first(UsesCondAtom) = LBRACE ID
first(UsesAndAtom) = ID
first(UsesActionList) = SHARP COLON
first(UsesActionAttr) = ID ACTION
first(TypeSpec) = TYPE
first(TypeList) = LBRACK INT ID FLOAT FIX ENUM CARD BOOL
first(TypeExpr) = LBRACK INT FLOAT FIX ENUM CARD BOOL
first(Type) = LBRACK INT ID FLOAT FIX ENUM CARD BOOL
first(TimeActionList) = COLON
first(StatementList) = SWITCH STRING_CONST SEMI IF ID ERROR ACTION
first(Statement) = SWITCH STRING_CONST IF ID ERROR ACTION
first(Sequence) = SWITCH STRING_CONST SEMI IF ID ERROR ACTION
first(ResourceSpec) = RESOURCE
first(ResourceList) = ID
first(Resource) = ID
first(RegisterSpec) = REG
first(RegPart) = TILD SWITCH STRING_CONST PLUS MINUS LPAREN LBRACK INT IF ID FORMAT FLOAT FIXED_CONST FIX EXCLAM ENUM COERCE CARD_CONST_64 CARD_CONST CARD BOOL BIN_CONST_64 BIN_CONST AROBAS
first(ParamListPart) = ID
first(ParamList) = ID COMMA
first(ParaType) = LBRACK INT ID FLOAT FIX ENUM CARD BOOL
first(OptionalTime) = SHARP
first(OptionalModeExpr) = EQ
first(OptionalMemAttrDefList) = VOLATILE USES PORTS INITIALA ID ALIAS
first(OptionalElseAtom) = ELSE
first(OptionalElse) = ELSE
first(OptionalAction) = COLON
first(Opt_SecDim) = LBRACK
first(Opt_Bit_Optr) = BIT_LEFT
first(OptCaseList) = CASE
first(OptCaseExprList) = CASE
first(OpSpec) = OP
first(NOAttrDefList) = USES SYNTAX IMAGE ID ACTION
first(ModeSpec) = MODE
first(MemorySpec) = MEM
first(MemPart) = TILD SWITCH STRING_CONST PLUS MINUS LPAREN IF ID FORMAT FIXED_CONST EXCLAM COERCE CARD_CONST_64 CARD_CONST BIN_CONST_64 BIN_CONST AROBAS
first(MemLocation) = ID
first(MemLocBase) = ID
first(MemAttrDefList) = VOLATILE USES PORTS INITIALA ID ALIAS
first(MemAttrDef) = VOLATILE USES PORTS INITIALA ID ALIAS
first(MachineSpec) = VAR TYPE RESOURCE REG OP MODE MEM LET EXTEND EXCEPTION CANON
first(Location) = ID
first(LocatedID) = ID
first(LetExpr) = TILD SWITCH STRING_CONST PLUS MINUS LPAREN IF ID FORMAT FIXED_CONST EXCLAM COERCE CARD_CONST_64 CARD_CONST BIN_CONST_64 BIN_CONST AROBAS
first(LetDef) = LET
first(Identifier_Or_List) = ID
first(IdentifierList) = ID
first(ExtendSpec) = EXTEND
first(ExtendIDList) = ID
first(ExtendHeader) = EXTEND
first(ExprDefault) = DEFAULT
first(Expr) = TILD SWITCH STRING_CONST PLUS MINUS LPAREN IF ID FORMAT FIXED_CONST EXCLAM COERCE CARD_CONST_64 CARD_CONST BIN_CONST_64 BIN_CONST AROBAS
first(ExceptionSpec) = EXCEPTION
first(Default) = DEFAULT
first(Constant) = STRING_CONST FIXED_CONST CARD_CONST_64 CARD_CONST BIN_CONST_64 BIN_CONST
first(ConditionalStatement) = SWITCH IF
first(CaseStat) = CASE
first(CaseList) = CASE
first(CaseExprStat) = CASE
first(CaseExprList) = CASE
first(CaseExprBody) = DEFAULT CASE
first(CaseBody) = DEFAULT CASE
first(CanonSpec) = CANON
first(Bit_Expr) = TILD STRING_CONST PLUS MINUS LPAREN ID FIXED_CONST CARD_CONST
first(AttrExpr) = TILD SWITCH STRING_CONST PLUS MINUS LPAREN IF ID FORMAT FIXED_CONST EXCLAM COERCE CARD_CONST_64 CARD_CONST BIN_CONST_64 BIN_CONST AROBAS
first(AttrDefList) = USES SYNTAX IMAGE ID ACTION
first(AttrDef) = USES SYNTAX IMAGE ID ACTION
first(ArgList) = TILD SWITCH STRING_CONST PLUS MINUS LPAREN IF ID FORMAT FIXED_CONST EXCLAM COMMA COERCE CARD_CONST_64 CARD_CONST BIN_CONST_64 BIN_CONST AROBAS
first(ActionTimeList) = SHARP
follow(top) = #
follow(specs) = VAR TYPE RESOURCE REG OP MODE MEM LET EXTEND EXCEPTION EOF CANON
follow(VarSpec) = VAR TYPE RESOURCE REG OP MODE MEM LET EXTEND EXCEPTION EOF CANON
follow(UsesOrSequence) = VOLATILE VAR USES TYPE SYNTAX RPAREN RESOURCE REG PORTS PIPE OP MODE MEM LET INITIALA IMAGE ID EXTEND EXCEPTION EOF COMMA CANON ALIAS ACTION
follow(UsesLocationList) = VOLATILE VAR USES TYPE SYNTAX SHARP RPAREN RESOURCE REG PORTS PIPE OP MODE MEM LET INITIALA IMAGE ID EXTEND EXCEPTION EOF ENDIF ELSE COMMA COLON CANON AND AMPERS ALIAS ACTION
follow(UsesLocation) = VOLATILE VAR USES TYPE SYNTAX SHARP RPAREN RESOURCE REG PORTS PIPE OP MODE MEM LET INITIALA IMAGE ID EXTEND EXCEPTION EOF ENDIF ELSE COMMA COLON CANON AND AMPERS ALIAS ACTION
follow(UsesIndirectAtom) = VOLATILE VAR USES TYPE SYNTAX RPAREN RESOURCE REG PORTS PIPE OP MODE MEM LET INITIALA IMAGE ID EXTEND EXCEPTION EOF ENDIF ELSE COMMA CANON ALIAS ACTION
follow(UsesIfAtom) = VOLATILE VAR USES TYPE SYNTAX RPAREN RESOURCE REG PORTS PIPE OP MODE MEM LET INITIALA IMAGE ID EXTEND EXCEPTION EOF ENDIF ELSE COMMA CANON ALIAS ACTION
follow(UsesDef) = VOLATILE VAR USES TYPE SYNTAX RPAREN RESOURCE REG PORTS OP MODE MEM LET INITIALA IMAGE ID EXTEND EXCEPTION EOF COMMA CANON ALIAS ACTION
follow(UsesCondAtom) = VOLATILE VAR USES TYPE SYNTAX RPAREN RESOURCE REG PORTS PIPE OP MODE MEM LET INITIALA IMAGE ID EXTEND EXCEPTION EOF ENDIF ELSE COMMA CANON ALIAS ACTION
follow(UsesAndAtom) = VOLATILE VAR USES TYPE SYNTAX RPAREN RESOURCE REG PORTS PIPE OP MODE MEM LET INITIALA IMAGE ID EXTEND EXCEPTION EOF ENDIF ELSE COMMA CANON ALIAS ACTION
follow(UsesActionList) = VOLATILE VAR USES TYPE SYNTAX RPAREN RESOURCE REG PORTS PIPE OP MODE MEM LET INITIALA IMAGE ID EXTEND EXCEPTION EOF ENDIF ELSE COMMA CANON ALIAS ACTION
follow(UsesActionAttr) = VOLATILE VAR USES TYPE SYNTAX SHARP RPAREN RESOURCE REG PORTS PIPE OP MODE MEM LET INITIALA IMAGE ID EXTEND EXCEPTION EOF ENDIF ELSE COMMA CANON ALIAS ACTION
follow(TypeSpec) = VAR TYPE RESOURCE REG OP MODE MEM LET EXTEND EXCEPTION EOF CANON
follow(TypeList) = RPAREN COMMA
follow(TypeExpr) = VAR TYPE STRING_CONST RPAREN RESOURCE REG RBRACK OP MODE MEM LET EXTEND EXCEPTION EOF COMMA CANON
follow(Type) = STRING_CONST RPAREN RBRACK COMMA
follow(TimeActionList) = VOLATILE VAR USES TYPE SYNTAX SHARP RPAREN RESOURCE REG PORTS PIPE OP MODE MEM LET INITIALA IMAGE ID EXTEND EXCEPTION EOF ENDIF ELSE COMMA CANON ALIAS ACTION
follow(StatementList) = SEMI
follow(Statement) = SEMI
follow(Sequence) = RBRACE ENDIF ELSE DEFAULT CASE
follow(ResourceSpec) = VAR TYPE RESOURCE REG OP MODE MEM LET EXTEND EXCEPTION EOF CANON
follow(ResourceList) = VAR TYPE RESOURCE REG OP MODE MEM LET EXTEND EXCEPTION EOF COMMA CANON
follow(Resource) = VAR TYPE RESOURCE REG OP MODE MEM LET EXTEND EXCEPTION EOF COMMA CANON
follow(RegisterSpec) = VAR TYPE RESOURCE REG OP MODE MEM LET EXTEND EXCEPTION EOF CANON
follow(RegPart) = RBRACK
follow(ParamListPart) = RPAREN COMMA
follow(ParamList) = RPAREN COMMA
follow(ParaType) = RPAREN COMMA
follow(OptionalTime) = VOLATILE VAR USES TYPE SYNTAX RPAREN RESOURCE REG PORTS PIPE OP MODE MEM LET INITIALA IMAGE ID EXTEND EXCEPTION EOF ENDIF ELSE COMMA CANON ALIAS ACTION
follow(OptionalModeExpr) = VAR USES TYPE SYNTAX RESOURCE REG OP MODE MEM LET IMAGE ID EXTEND EXCEPTION EOF CANON ACTION
follow(OptionalMemAttrDefList) = VAR TYPE RESOURCE REG OP MODE MEM LET EXTEND EXCEPTION EOF CANON
follow(OptionalElseAtom) = ENDIF
follow(OptionalElse) = ENDIF
follow(OptionalAction) = VOLATILE VAR USES TYPE SYNTAX RPAREN RESOURCE REG PORTS PIPE OP MODE MEM LET INITIALA IMAGE ID EXTEND EXCEPTION EOF ENDIF ELSE COMMA CANON ALIAS ACTION
follow(Opt_SecDim) = VOLATILE VAR USES TYPE SYNTAX SHARP RPAREN RESOURCE REG PORTS PIPE OP MODE MEM LET INITIALA IMAGE ID EXTEND EXCEPTION EOF ENDIF ELSE COMMA COLON CANON BIT_LEFT AND AMPERS ALIAS ACTION
follow(Opt_Bit_Optr) = VOLATILE VAR USES TYPE SYNTAX SHARP RPAREN RESOURCE REG PORTS PIPE OP MODE MEM LET INITIALA IMAGE ID EXTEND EXCEPTION EOF ENDIF ELSE COMMA COLON CANON AND AMPERS ALIAS ACTION
follow(OptCaseList) = RBRACE DEFAULT
follow(OptCaseExprList) = RBRACE DEFAULT
follow(OpSpec) = VAR TYPE RESOURCE REG OP MODE MEM LET EXTEND EXCEPTION EOF CANON
follow(NOAttrDefList) = VAR USES TYPE SYNTAX RESOURCE REG OP MODE MEM LET IMAGE ID EXTEND EXCEPTION EOF CANON ACTION
follow(ModeSpec) = VAR TYPE RESOURCE REG OP MODE MEM LET EXTEND EXCEPTION EOF CANON
follow(MemorySpec) = VAR TYPE RESOURCE REG OP MODE MEM LET EXTEND EXCEPTION EOF CANON
follow(MemPart) = RBRACK
follow(MemLocation) = VOLATILE VAR USES TYPE RESOURCE REG PORTS OP MODE MEM LET INITIALA ID EXTEND EXCEPTION EOF CANON ALIAS
follow(MemLocBase) = VOLATILE VAR USES TYPE RESOURCE REG PORTS OP MODE MEM LET INITIALA ID EXTEND EXCEPTION EOF CANON BIT_LEFT ALIAS
follow(MemAttrDefList) = VOLATILE VAR USES TYPE RESOURCE REG PORTS OP MODE MEM LET INITIALA ID EXTEND EXCEPTION EOF CANON ALIAS
follow(MemAttrDef) = VOLATILE VAR USES TYPE RESOURCE REG PORTS OP MODE MEM LET INITIALA ID EXTEND EXCEPTION EOF CANON ALIAS
follow(MachineSpec) = VAR TYPE RESOURCE REG OP MODE MEM LET EXTEND EXCEPTION EOF CANON
follow(Location) = EQ DOUBLE_COLON
follow(LocatedID) = VAR TYPE RESOURCE REG OP MODE MEM LPAREN LET LBRACK EXTEND EXCEPTION EQ EOF COMMA CANON
follow(LetExpr) = VOLATILE VAR USES TYPE RPAREN RESOURCE REG RBRACK PORTS OP MODE MEM LET INITIALA ID EXTEND EXCEPTION EOF DOUBLE_DOT COMMA CANON ALIAS
follow(LetDef) = VAR TYPE RESOURCE REG OP MODE MEM LET EXTEND EXCEPTION EOF CANON
follow(Identifier_Or_List) = VAR TYPE RESOURCE REG PIPE OP MODE MEM LET EXTEND EXCEPTION EOF CANON
follow(IdentifierList) = VAR TYPE RPAREN RESOURCE REG OP MODE MEM LET EXTEND EXCEPTION EOF COMMA CANON
follow(ExtendSpec) = VAR TYPE RESOURCE REG OP MODE MEM LET EXTEND EXCEPTION EOF CANON
follow(ExtendIDList) = VAR USES TYPE SYNTAX RESOURCE REG OP MODE MEM LET IMAGE ID EXTEND EXCEPTION EOF COMMA CANON ACTION
follow(ExtendHeader) = VAR USES TYPE SYNTAX RESOURCE REG OP MODE MEM LET IMAGE ID EXTEND EXCEPTION EOF CANON ACTION
follow(ExprDefault) = RBRACE CASE
follow(Expr) = VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION
follow(ExceptionSpec) = VAR TYPE RESOURCE REG OP MODE MEM LET EXTEND EXCEPTION EOF CANON
follow(Default) = RBRACE CASE
follow(Constant) = VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION
follow(ConditionalStatement) = SEMI
follow(CaseStat) = RBRACE DEFAULT CASE
follow(CaseList) = RBRACE DEFAULT CASE
follow(CaseExprStat) = RBRACE DEFAULT CASE
follow(CaseExprList) = RBRACE DEFAULT CASE
follow(CaseExprBody) = RBRACE
follow(CaseBody) = RBRACE
follow(CanonSpec) = VAR TYPE RESOURCE REG OP MODE MEM LET EXTEND EXCEPTION EOF CANON
follow(Bit_Expr) = STAR SLASH RPAREN PLUS PIPE PERCENT MINUS GT DOUBLE_STAR DOUBLE_DOT CIRC AMPERS
follow(AttrExpr) = VAR USES TYPE SYNTAX RESOURCE REG OP MODE MEM LET IMAGE ID EXTEND EXCEPTION EOF CANON ACTION
follow(AttrDefList) = VAR TYPE RESOURCE REG OP MODE MEM LET EXTEND EXCEPTION EOF CANON
follow(AttrDef) = VAR USES TYPE SYNTAX RESOURCE REG OP MODE MEM LET IMAGE ID EXTEND EXCEPTION EOF CANON ACTION
follow(ArgList) = RPAREN COMMA
follow(ActionTimeList) = VOLATILE VAR USES TYPE SYNTAX RPAREN RESOURCE REG PORTS PIPE OP MODE MEM LET INITIALA IMAGE ID EXTEND EXCEPTION EOF ENDIF ELSE COMMA COLON CANON ALIAS ACTION
Built an LR(0) automaton with 508 states.
The grammar is not SLR(1) -- 42 states have a conflict.
Built an LR(1) automaton with 508 states.
707 shift/reduce conflicts were silently solved.
File "simnml.mly", line 148, characters 0-5:
Warning: the precedence level assigned to BIT_RIGHT is never useful.
File "simnml.mly", line 148, characters 0-5:
Warning: the precedence level assigned to DOUBLE_DOT is never useful.
File "simnml.mly", line 133, characters 0-6:
Warning: the precedence level assigned to EQ is never useful.
161 out of 508 states are represented.
0 out of 171 symbols keep track of their start position.
0 out of 171 symbols keep track of their end position.
144 out of 508 states have a default reduction.
123 out of 235 productions exploit shiftreduce optimization.
0 out of 508 states can peek at an error.
1334 functions before inlining, 200 functions after inlining.
