* Document the recent additions (CHANGES + doc).
  - attributes in .mly files
    rationale / purpose
    syntax of attributes
    placement of attributes
    attributes are incompatible with %inline
    how attributes are propagated during expansion of parameterized definitions
    how %attribute is desugared
  - --cmly command line flag
  - menhirSdk; document the .cmly API...?
  - demo of menhirSdk: generate-printers

* move to a new license (GPL V2?), as per Hongbo Zhang's request.

* set things up so the files under version control have correct headers;
  do not run headache as part of [make package].

* move to gitlab.inria.fr
  see https://help.github.com/articles/splitting-a-subfolder-out-into-a-new-repository/

* clean up this TODO file! and use gitlab issues for known bugs.

* clean up and parallelize the test suite.

* see if ErrorReports could be part of MenhirLib.

* see if --only-preprocess-for-ocamlyacc could be implemented.
  Re-introduce $1 keywords.
  Define $startpos, etc.

* The documentation says not to use _i,
  but --only-preprocess produces it.
  Should we avoid producing it?
  Should we check that it is not used?

* Discussion with Frédéric Bour.
  - SDK, exposing a dump of Grammar/Lr0/Lr1
  - Engine: offer richer API
      new stack inspection API, without streams
        stack_next pourrait renvoyer une somme (stack + initial)
        allows comparing stacks
        allows exposing current state even when it is an initial state?
        meta-initial state with transition to the real initial states?
      remonter aussi la fonction element: 'a checkpoint -> int -> element de CompCert
      parameterize the type 'a env again
      and offer val input_needed : 'a env -> 'a checkpoint
                val pop: 'a env -> 'a env option
                val feed_symbol: 'a symbol -> -> 'a -> pos -> pos -> 'b env -> 'b env (* peut échouer si la transition n'existe pas *)
                val force_reduction: production -> 'a env -> 'a env (* unsafe actuellement; need a bitmap of which productions can safely be reduced in each state *)
                val default_reduction: _ lr1state -> production option
                bijection entre production et int
  - incompatibility avec ocamlyacc: Menhir discards the token when entering
    error mode, ocamlyacc doesn't.
  - allow splitting a nonterminal symbol (in a file or over multiple files).
    with an explicit keyword?

* Look into the format of bison's tables, and see if we could produce
  them.

* standard library: define "%public %inline epsilon: {}", which allows using
  "epsilon" as a marker for an empty right-hand side.

* Implement $0, $-1, etc.
    with named syntax along the lines of <x> foo: ...
    with and without --infer, must be type-safe (analyse left context)
    in the code and table back-ends
  On top of that, it is easy to implement mid-rule actions (à la Bison).
  On top of that, it should be easy to implement inherited attributes (à la BtYacc).
    again, should be type-safe

* explain how to simulate inherited attributes in the manual
  (cf. post by David Chemouil on mailing list)

* Installation problems.
  - put menhirLib.{ml,mli} in a different directory;
  - avoid using "share/" for architecture-dependent files

* Add a flag to ignore all semantic actions, replacing them with unit,
  and replace all %type declarations with unit. Use it to build a more
  serious test suite in bench/good.

* Look for "artificial dependency" and remove them.
  Make sure every module is explicitly called.

* Develop an alternate src/Makefile that does not require ocamlbuild?
  Could use OCamlMakefile instead, for instance.

* A %type declaration with parameters is not properly checked;
  it could be useless or even ill-typed.
  Same for %on_error_reduce.

* Is it true that the warning "this production is never reduced" is
  sound but incomplete? i.e. certain states could be unreachable and
  we do not know it (but LRijkstra can tell us).
  Take never_reduced.mly and see if we can have a production that is
  never reduced *and no warning about it*. (Just place it behind
  another production that is never reduced.) Document this fact.

* If the right-hand side of a production provably generates the empty
  language, remove this production. (Must remove it explicitly, otherwise
  we lose the property that errors are detected as early as possible.
  Also, this avoids triggering the detection of epsilon-cycles, which
  assumes that all symbols are inhabited.)
  Document this trick: the empty language can be defined by "void: void"
  and can be used as an actual parameter in parameterized definitions.
  This allows making extensible definitions and instantiating them with
  "no extension".

* --compile-errors could warn about messages wider than 80 columns
                   could also warn statically about out-of-range $i?

* Dans les avantages de Menhir versus ocamlyacc (dans la doc et
  sur la page Web), ajouter le back-end Coq, l'API incrémentale
  et l'API d'inspection, les règles anonymes, la gestion fine des
  erreurs de syntaxe...

* Pénible que l'API d'inspection ne donne pas accès
  à l'état courant lorsque la pile est vide (état initial donc).
  Pourrait-on exposer cet état? Polymorphe? incoming_symbol
  devrait alors produit une option. Et le cas Nil du type
  stream devrait contenir l'état initial...
  attention, car si on lui applique la fonction items, on va
  obtenir un item spécial S' -> S # qui va poser problème.
  Exposer l'état initial avec un type différent lr1initial?
  De toute façon il faudra compliquer la notion de explanation
  qui ne pourra plus toujours être basée sur un item...

* gros BUG à corriger: il ne faut pas exiger le prochain token
  AVANT une réduction par défaut. Il faut suivre ocamlyacc et
  bison. Réfléchir... et corriger les deux back-ends. Attention
  toutefois, c'est un changement incompatible. Option de ligne
  de commande?
  (voir aussi messages de Tiphaine Turpin à partir du 30/08/2011)
  Idée de F. Bour: on pourrait annoter une production %default
  pour indiquer qu'elle doit toujours être réduite par défaut.
  Il faut aussi revisiter la notion de conflit end-of-stream.
  - si réduction par défaut, alors pas de conflit possible!
  - si conflit, alors pourquoi on le résoud en éliminant la
    réduction sur #? on pourrait faire aussi le choix opposé,
    à savoir éliminer toutes les autres actions. Que fait
    ocamlyacc?

* autoriser %token FOO "foo"
  pour pouvoir afficher les tokens sous forme plus lisible
  et auto-générer une fonction (ou une table) print_terminal

* autoriser %token FOO (unused)
  (syntaxe concrète à déterminer)
  équivalent à --unused-token FOO sur la ligne de commande.

* Produce well-chosen (predictable) names for anonymous rules?

* In the standard library, possibly rename "anonymous" and "embedded" and
  document them. The non-inline version allows embedding an action in the
  middle of a rule.

* Add left-recursive lists to the standard library.

* Define [print_result].
  Define a printer that shows the states in the stack.
  Try computing a set of expected symbols in the current state.

* Generate default printers for terminal and nonterminal.
  Using modular implicits, generate terminal2token and
  nonterminal2value.

* document that --depend may produce inaccurate dependencies
  for parser.cmi and that it is recommended to use --raw-depend
  --ocamldep "ocamldep -modules" and work from there (which is
  what ocamlbuild does).

* Suite des patchs de Frédéric Bour.
    API d'inspection complète.
      Documenter loop_handle_undo, loop_test, acceptable.
      Exposer le nombre d'états (pour la mémoisation).
      Idem pour les productions.
      Fonctions d'affichage pour les types terminal, nonterminal, etc.?
      Fonctions d'isomorphisme entre token et 'a terminal * 'a?
    Librairie(s) pour la gestion des erreurs.
    Librairie pour la complétion du parsing.
      Need a way of feeding the parser a nonterminal symbol.
      Or a way of applying a semantic action to a vector of semantic values.

* Instead of directly invoking ocamlc (in --infer mode), Menhir could
  dump an .actions.ml file,
  expect the build system to invoke "ocamlc -i" and create .actions.mli,
  and continue (in a second invocation) from there.
  (Suggestion by Fabrice Le Fessant.)

* Test and document --lalr (maybe). Explain that it is (probably)
  incompatible in principle with --explain. Modify the code to fail
  gracefully when the problem arises.

* BUG: --only-preprocess imprime des actions sémantiques où les $ ont
  été remplacés par _, ce qui rend la grammaire invalide.

* Tenter une minimisation a posteriori de l'automate. Sur la grammaire
  OCaml on devrait retrouver l'automate LALR, non?
  Faire cette minimisation *après* la résolution des conflits afin que
  la minimisation n'affecte pas le comportement de l'automate, même en
  présence de directives de priorité. Du coup si on combine --canonical
  et --minimize alors on devrait obtenir un automate correct, proche de
  IELR, voir Denny et Malloy. Confirmer.

* Pourquoi --canonical --table ne marche pas sur une grosse grammaire?
  (3m57 pour ocaml.mly versus 16s sans --table)
  Afficher combien de temps est passé à comprimer les tables.

* TableBackend en principe ne devrait pas avoir besoin de Invariant?
  Gain de temps/simplicité possible.

* bundle the Coq library with menhir, and add demos/calc-coq
  to show how it is used

* Clarifier si ocamlbuild doit recevoir -use-ocamlfind, -no-ocamlfind,
  ou rien; tester en particulier sous Windows?
  Modifier la doc pour recommander ocamlfind.

* ajouter une possibilité de désactiver certains warnings (utile pour
  le cours de compilation où on démarre avec une grammaire à trous),
  par exemple les non-terminaux inaccessibles

* BUG: la directive $type<...> nt donne lieu à un message d'erreur bizarre
  si le non-terminal nt n'existe pas. (Jacques-Henri.)

* On pourrait rendre moins restrictif le critère qui garantit la terminaison
  de l'expansion des non-terminaux paramétrés. Il suffirait de vérifier que
  les paramètres effectifs sont toujours des atomes (symboles terminaux ou
  non-terminaux), non? (Jacques-Henri.)

* Reconnaître les directives # n "foo" dans le fichier .mly et en tenir
  compte dans les locations.

* BUG: message de Valentin Gatien-Baron du 09/01/2010: le bug de --explain
  est-il bien le bug connu? peut-on le corriger? ne suffirait-il pas de
  passer sous silence les conflits qui ont lieu dans une partie inaccessible
  de l'automate?

* Implémenter un test de détection de boucles. Si la grammaire contient une
  boucle, elle est infiniment ambiguë. Pour le test, calculer tous les
  nullables, ajouter une production unité A -> B dès qu'il existe une
  production A -> alpha B beta avec alpha et beta nullables, et regarder
  ensuite s'il existe un cycle de productions unité.

* Permettre une trace avec autre chose que fprintf stderr. Cela permettrait
  au programmeur (par exemple) de décider à runtime s'il veut afficher ou
  non la trace. (En mode --trace.) Et si possible, donner accès depuis
  l'extérieur à la fonction print_token qui est engendrée.

* (petit) BUG: --follow-construction n'affiche pas le contenu des états
  initiaux (r0)

* relire la preuve de Pager et comprendre si ce que fait Lr1.grow est correct
  ou pas; faut-il faire grossir les états existants, ou bien (par exemple) les
  supprimer et recommencer leur construction?

* que fait/que doit faire la combinaison --tokens-only --depend?

* Préserver dirname/ dans les directives #line émises.

* BUG: Boris (1.- bouclage parser sur une entrée erronée 2.- une lecture
  trop loin dans le stream, également liée à error).

* éviter "Warning: 22 conflicts ..." car emacs prend "Warning" pour un
  nom de fichier; d'après Damien, il devrait suffire que la phrase après
  les deux points ne commence pas par un nombre.

* ajouter une option -q pour désactiver tous les warnings

* si une variable est inutilisée dans une action sémantique, le
  warning est affiché dans le code produit.

* si une parenthèse est mal fermée dans une action sémantique,
  l'erreur de syntaxe peut être détectée par OCaml en dehors
  des actions sémantiques. Bétonner en mettant une séquence
  improbable de begin/end/parenthèseses autour de l'action?

* BUG: solving a shift/reduce conflict in favor of reduction can
  cut a path that was required in order to explain another conflict.
  (see e.g. belloeil.mly) (et le reduced_parser.mly d'Adrien Guatto)
  (also check the parser.mly sent by Andrej Bauer on 2016/01/21)
  Or just give up on explaining the conflict in this case.
  Take priorities into account *during* the construction of the
  automaton? Is it feasible? Compatible with Pager?

* BUG: cutdown.mly

* le fichier .conflicts devrait etre supprime par --explain s'il
  n'y a aucun conflit

* dans le dump de l'automate, rajouter les transitions qui ont
  ete supprimees par resolution de conflits. Afficher aussi les
  réductions par défaut?

* expliquer aussi les conflits end-of-stream

* Documenter l'emploi d'ocamlbuild.

* Lorsqu'on crée un pseudo-lexème pour utiliser dans les
  directives %prec, la question de savoir s'il est associatif
  à gauche ou à droite ou pas du tout ne se posera jamais. Donc,
  pour faire propre, on ne devrait pas autoriser l'emploi de
  %left, %right, %nonassoc (sauf pour compatibilité arrière,
  avec warning) mais introduire un nouveau mot-clé %fictitious
  ou %pseudo ou whatever.

* Autre remarque du même tonneau, si on souhaite choisir un
  niveau mais pas un statut d'associativité (parce qu'on pense
  qu'il est inutile), il faudrait pouvoir déclarer %neutral
  (whatever) et obtenir un niveau au statut non-spécifié (d'où
  erreur si on tente de consulter ce statut).
